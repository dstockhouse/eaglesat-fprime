#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930772.958504
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:52 2019'
__CHEETAH_src__ = 'hpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class hpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(hpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// ======================================================================
// \\title  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 12.
        write(u'''/test/ut/GTestBase.hpp
// \\author Auto-generated
// \\brief  hpp file for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 4, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 4, col 25.
        write(u''' component Google Test harness base class
//
// \\copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
//
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ======================================================================

#ifndef ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 20, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 20, col 10.
        write(u'''_GTEST_BASE_HPP
#define ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 21, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 21, col 10.
        write(u'''_GTEST_BASE_HPP

#include "TesterBase.hpp"
#include "gtest/gtest.h"

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True): # generated from line 26, col 1
            write(u'''// ----------------------------------------------------------------------
// Macros for command history assertions
// ----------------------------------------------------------------------

#define ASSERT_CMD_RESPONSE_SIZE(size) \\
  this->assertCmdResponse_size(__FILE__, __LINE__, size)

#define ASSERT_CMD_RESPONSE(index, opCode, cmdSeq, response) \\
  this->assertCmdResponse(__FILE__, __LINE__, index, opCode, cmdSeq, response)

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 38, col 1
            write(u'''// ----------------------------------------------------------------------
// Macros for telemetry history assertions
// ----------------------------------------------------------------------

#define ASSERT_TLM_SIZE(size) \\
  this->assertTlm_size(__FILE__, __LINE__, size)

''')
            for id, channel_name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 46, col 3
                write(u'''#define ASSERT_TLM_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 47, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 47, col 21.
                write(u'''_SIZE(size) \\
  this->assertTlm_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 48, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 48, col 19.
                write(u'''_size(__FILE__, __LINE__, size)

#define ASSERT_TLM_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 50, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 50, col 21.
                write(u'''(index, value) \\
  this->assertTlm_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 51, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 51, col 19.
                write(u'''(__FILE__, __LINE__, index, value)

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 55, col 1
            write(u'''// ----------------------------------------------------------------------
// Macros for event history assertions 
// ----------------------------------------------------------------------

#define ASSERT_EVENTS_SIZE(size) \\
  this->assertEvents_size(__FILE__, __LINE__, size)

''')
            for id, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 63, col 3
                write(u'''#define ASSERT_EVENTS_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 64, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 64, col 24.
                write(u'''_SIZE(size) \\
  this->assertEvents_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 65, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 65, col 22.
                write(u'''_size(__FILE__, __LINE__, size)

''')
                params = VFSL([locals()]+SL+[globals(), builtin],"event_params",True)[VFSL([locals()]+SL+[globals(), builtin],"event_name",True)]
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 68, col 5
                    write(u'''#define ASSERT_EVENTS_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 69, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 69, col 24.
                    write(u'''(index''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_macro_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_macro_params($params)' on line 69, col 43
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_macro_params($params)')) # from line 69, col 43.
                    write(u''') \\
  this->assertEvents_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 70, col 22
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 70, col 22.
                    write(u'''(__FILE__, __LINE__, index''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_macro_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_macro_params($params)' on line 70, col 61
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_macro_params($params)')) # from line 70, col 61.
                    write(u''')

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 75, col 1
            write(u'''// ----------------------------------------------------------------------
// Macros for typed user from port history assertions
// ----------------------------------------------------------------------

#define ASSERT_FROM_PORT_HISTORY_SIZE(size) \\
  this->assertFromPortHistory_size(__FILE__, __LINE__, size)

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 83, col 3
                write(u'''#define ASSERT_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 84, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 84, col 22.
                write(u'''_SIZE(size) \\
  this->assert_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 85, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 85, col 21.
                write(u'''_size(__FILE__, __LINE__, size)

''')
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 88, col 5
                    write(u'''#define ASSERT_from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 89, col 22
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 89, col 22.
                    write(u'''(index''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_macro_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_macro_params($params)' on line 89, col 39
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_macro_params($params)')) # from line 89, col 39.
                    write(u''') \\
  { \\
    ASSERT_GT(this->fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 91, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 91, col 37.
                    write(u'''->size(), static_cast<U32>(index)) \\
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 92, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 92, col 5.
                    write(u''' \\
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 93, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 93, col 5.
                    write(u''' "  Value:    Index into history of from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 93, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 93, col 51.
                    write(u'''\\n" \\
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 94, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 94, col 5.
                    write(u''' "  Expected: Less than size of history (" \\
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 95, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 95, col 5.
                    write(u''' this->fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 95, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 95, col 33.
                    write(u'''->size() ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 95, col 53
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 95, col 53.
                    write(u''' ")\\n" \\
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 96, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 96, col 5.
                    write(u''' "  Actual:   " ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 96, col 26
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 96, col 26.
                    write(u''' index ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 96, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 96, col 38.
                    write(u''' "\\n"; \\
    const FromPortEntry_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 97, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 97, col 25.
                    write(u'''& _e = \\
      this->fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 98, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 98, col 29.
                    write(u'''->at(index); \\
''')
                    for param_name, param_type, param_comment, param_modifier, param_enum in VFSL([locals()]+SL+[globals(), builtin],"params",True): # generated from line 99, col 7
                        write(u'''    ASSERT_EQ(_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 100, col 16
                        if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 100, col 16.
                        write(u''', _e.''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 100, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 100, col 34.
                        write(u''') \\
    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 101, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 101, col 5.
                        write(u''' \\
    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 102, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 102, col 5.
                        write(u''' "  Value:    Value of argument ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'$param_name' on line 102, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'$param_name')) # from line 102, col 42.
                        write(u''' at index " \\
    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 103, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 103, col 5.
                        write(u''' index \\
    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 104, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 104, col 5.
                        write(u''' " in history of from_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 104, col 32
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 104, col 32.
                        write(u'''\\n" \\
    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 105, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 105, col 5.
                        write(u''' "  Expected: " ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 105, col 26
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 105, col 26.
                        write(u''' _''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'$param_name' on line 105, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u'$param_name')) # from line 105, col 33.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 105, col 45
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 105, col 45.
                        write(u''' "\\n" \\
    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 106, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 106, col 5.
                        write(u''' "  Actual:   " ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 106, col 26
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 106, col 26.
                        write(u''' _e.''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 106, col 35
                        if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 106, col 35.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 106, col 49
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 106, col 49.
                        write(u''' "\\n"; \\
''')
                    write(u'''  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 113, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 114, col 3
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 115, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 115, col 11.
                write(u''' {

''')
        write(u'''  //! \\class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 119, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 119, col 14.
        write(u'''
  //! \\brief Auto-generated base class for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 120, col 44
        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 120, col 44.
        write(u''' component Google Test harness
  //!
  class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 122, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 122, col 9.
        write(u''' :
    public ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'$tester_base' on line 123, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'$tester_base')) # from line 123, col 12.
        write(u'''
  {

    protected:

      // ----------------------------------------------------------------------
      // Construction and destruction
      // ----------------------------------------------------------------------

      //! Construct object ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 132, col 28
        if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 132, col 28.
        write(u'''
      //!
      ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'${gtest_base}' on line 134, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${gtest_base}')) # from line 134, col 7.
        write(u'''(
#if FW_OBJECT_NAMES == 1
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_compName",True), VFSL([locals()]+SL+[globals(), builtin],"param_maxHistorySize",True) ]) # u'$emit_hpp_params([ $param_compName, $param_maxHistorySize ])' on line 136, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_compName, $param_maxHistorySize ])')) # from line 136, col 1.
        write(u'''
#else
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_maxHistorySize",True) ]) # u'$emit_hpp_params([ $param_maxHistorySize ])' on line 138, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_maxHistorySize ])')) # from line 138, col 1.
        write(u'''
#endif
      );

      //! Destroy object ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 142, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 142, col 26.
        write(u'''
      //!
      virtual ~''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'${gtest_base}' on line 144, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${gtest_base}')) # from line 144, col 16.
        write(u'''(void);

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True): # generated from line 146, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Commands
      // ----------------------------------------------------------------------

      //! Assert size of command response history
      //!
      void assertCmdResponse_size(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_hpp_params($params_assert_size)' on line 156, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_size)')) # from line 156, col 1.
            write(u'''
      ) const;

      //! Assert command response in history at index
      //!
      void assertCmdResponse(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_cmd_response",True)) # u'$emit_hpp_params($params_assert_cmd_response)' on line 162, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_cmd_response)')) # from line 162, col 1.
            write(u'''
      ) const;

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 166, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Telemetry
      // ----------------------------------------------------------------------

      //! Assert size of telemetry history
      //!
      void assertTlm_size(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_hpp_params($params_assert_size)' on line 176, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_size)')) # from line 176, col 1.
            write(u'''
      ) const;

''')
            for id, channel_name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 179, col 3
                write(u'''    protected:

      // ----------------------------------------------------------------------
      // Channel: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 183, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 183, col 19.
                write(u'''
      // ----------------------------------------------------------------------

      //! Assert telemetry value in history at index
      //!
      void assertTlm_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 188, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 188, col 22.
                write(u'''_size(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_hpp_params($params_assert_size)' on line 189, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_size)')) # from line 189, col 1.
                write(u'''
      ) const;

''')
                param_val = VFSL([locals()]+SL+[globals(), builtin],"get_param_val_Tlm",False)(VFSL([locals()]+SL+[globals(), builtin],"type",True), VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True))
                write(u'''      void assertTlm_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 193, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 193, col 22.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_fileName",True), VFSL([locals()]+SL+[globals(), builtin],"param_lineNumber",True), VFSL([locals()]+SL+[globals(), builtin],"param_index",True), VFSL([locals()]+SL+[globals(), builtin],"param_val",True) ]) # u'$emit_hpp_params([ $param_fileName, $param_lineNumber, $param_index, $param_val ])' on line 194, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_fileName, $param_lineNumber, $param_index, $param_val ])')) # from line 194, col 1.
                write(u'''
      ) const;

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 199, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Events
      // ----------------------------------------------------------------------

      void assertEvents_size(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_hpp_params($params_assert_size)' on line 207, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_size)')) # from line 207, col 1.
            write(u'''
      ) const;

''')
            for id, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 210, col 3
                write(u'''    protected:

      // ----------------------------------------------------------------------
      // Event: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'$event_name' on line 214, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$event_name')) # from line 214, col 17.
                write(u'''
      // ----------------------------------------------------------------------

      void assertEvents_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 217, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 217, col 25.
                write(u'''_size(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_hpp_params($params_assert_size)' on line 218, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_size)')) # from line 218, col 1.
                write(u'''
      ) const;

''')
                params = VFSL([locals()]+SL+[globals(), builtin],"get_event_params",False)(VFSL([locals()]+SL+[globals(), builtin],"event_name",True))
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 222, col 5
                    write(u'''      void assertEvents_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 223, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 223, col 25.
                    write(u'''(
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_event",True) + VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_hpp_params($params_assert_event + $params)' on line 224, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_event + $params)')) # from line 224, col 1.
                    write(u'''
      ) const;

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 230, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // From ports 
      // ----------------------------------------------------------------------

      void assertFromPortHistory_size(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_hpp_params($params_assert_size)' on line 238, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_size)')) # from line 238, col 1.
            write(u'''
      ) const;

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 241, col 3
                write(u'''    protected:

      // ----------------------------------------------------------------------
      // From port: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 245, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 245, col 21.
                write(u''' 
      // ----------------------------------------------------------------------

      void assert_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 248, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 248, col 24.
                write(u'''_size(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_hpp_params($params_assert_size)' on line 249, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params_assert_size)')) # from line 249, col 1.
                write(u'''
      ) const;

''')
        write(u'''  };

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 256, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 257, col 3
                write(u'''} // end namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 258, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 258, col 20.
                write(u'''

''')
        write(u'''#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_hpp= 'respond'

## END CLASS DEFINITION

if not hasattr(hpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(hpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(hpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=hpp()).run()


