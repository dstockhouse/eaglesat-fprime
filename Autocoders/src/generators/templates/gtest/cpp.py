#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930772.51156
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:52 2019'
__CHEETAH_src__ = 'cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// ======================================================================
// \\title  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 12.
        write(u'''/test/ut/GTestBase.cpp
// \\author Auto-generated
// \\brief  cpp file for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 4, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 4, col 25.
        write(u''' component Google Test harness base class
//
// \\copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
//
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ======================================================================

#include "GTestBase.hpp"

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 22, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 23, col 2
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 24, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 24, col 11.
                write(u''' {
''')
        write(u'''
  // ----------------------------------------------------------------------
  // Construction and destruction
  // ----------------------------------------------------------------------

  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 32, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 32, col 3.
        write(u''' ::
    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'${gtest_base}' on line 33, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${gtest_base}')) # from line 33, col 5.
        write(u'''(
#if FW_OBJECT_NAMES == 1
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_compName",True), VFSL([locals()]+SL+[globals(), builtin],"param_maxHistorySize",True) ]) # u'$emit_cpp_params([ $param_compName, $param_maxHistorySize ])' on line 35, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_compName, $param_maxHistorySize ])')) # from line 35, col 1.
        write(u'''
#else
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_maxHistorySize",True) ]) # u'$emit_cpp_params([ $param_maxHistorySize ])' on line 37, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_maxHistorySize ])')) # from line 37, col 1.
        write(u'''
#endif
    ) : 
        ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 40, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 40, col 9.
        write(u''' (
#if FW_OBJECT_NAMES == 1
            compName,
#endif
            maxHistorySize
        )
  {

  }

  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 50, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 50, col 3.
        write(u''' ::
    ~''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'${gtest_base}' on line 51, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${gtest_base}')) # from line 51, col 6.
        write(u'''(void)
  {

  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True): # generated from line 56, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Commands
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 61, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 61, col 8.
            write(u''' ::
    assertCmdResponse_size(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_cpp_params($params_assert_size)' on line 63, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_size)')) # from line 63, col 1.
            write(u'''
    ) const
  {
    ASSERT_EQ((unsigned long) size, this->cmdResponseHistory->size())
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 67, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 67, col 7.
            write(u'''
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 68, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 68, col 7.
            write(u''' "  Value:    Size of command response history\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 69, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 69, col 7.
            write(u''' "  Expected: " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 69, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 69, col 28.
            write(u''' size ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 69, col 39
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 69, col 39.
            write(u''' "\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 70, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 70, col 7.
            write(u''' "  Actual:   " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 70, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 70, col 28.
            write(u''' this->cmdResponseHistory->size() ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 70, col 67
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 70, col 67.
            write(u''' "\\n";
  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 73, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 73, col 8.
            write(u''' ::
    assertCmdResponse(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_cmd_response",True)) # u'$emit_cpp_params($params_assert_cmd_response)' on line 75, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_cmd_response)')) # from line 75, col 1.
            write(u'''
    )
    const
  {
    ASSERT_LT(index, this->cmdResponseHistory->size())
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 80, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 80, col 7.
            write(u'''
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 81, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 81, col 7.
            write(u''' "  Value:    Index into command response history\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 82, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 82, col 7.
            write(u''' "  Expected: Less than size of command response history (" 
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 83, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 83, col 7.
            write(u''' this->cmdResponseHistory->size() ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 83, col 46
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 83, col 46.
            write(u''' ")\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 84, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 84, col 7.
            write(u''' "  Actual:   " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 84, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 84, col 28.
            write(u''' index ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 84, col 40
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 84, col 40.
            write(u''' "\\n";
    const CmdResponse& e = this->cmdResponseHistory->at(index);
    ASSERT_EQ(opCode, e.opCode)
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 87, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 87, col 7.
            write(u'''
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 88, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 88, col 7.
            write(u''' "  Value:    Opcode at index "
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 89, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 89, col 7.
            write(u''' index
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 90, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 90, col 7.
            write(u''' " in command response history\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 91, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 91, col 7.
            write(u''' "  Expected: " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 91, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 91, col 28.
            write(u''' opCode ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 91, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 91, col 41.
            write(u''' "\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 92, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 92, col 7.
            write(u''' "  Actual:   " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 92, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 92, col 28.
            write(u''' e.opCode ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 92, col 43
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 92, col 43.
            write(u''' "\\n";
    ASSERT_EQ(cmdSeq, e.cmdSeq)
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 94, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 94, col 7.
            write(u'''
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 95, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 95, col 7.
            write(u''' "  Value:    Command sequence number at index "
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 96, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 96, col 7.
            write(u''' index
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 97, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 97, col 7.
            write(u''' " in command response history\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 98, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 98, col 7.
            write(u''' "  Expected: " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 98, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 98, col 28.
            write(u''' cmdSeq ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 98, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 98, col 41.
            write(u''' "\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 99, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 99, col 7.
            write(u''' "  Actual:   " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 99, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 99, col 28.
            write(u''' e.cmdSeq ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 99, col 43
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 99, col 43.
            write(u''' "\\n";
    ASSERT_EQ(response, e.response)
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 101, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 101, col 7.
            write(u'''
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 102, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 102, col 7.
            write(u''' "  Value:    Command response at index "
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 103, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 103, col 7.
            write(u''' index
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 104, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 104, col 7.
            write(u''' " in command resopnse history\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 105, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 105, col 7.
            write(u''' "  Expected: " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 105, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 105, col 28.
            write(u''' response ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 105, col 43
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 105, col 43.
            write(u''' "\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 106, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 106, col 7.
            write(u''' "  Actual:   " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 106, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 106, col 28.
            write(u''' e.response ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 106, col 45
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 106, col 45.
            write(u''' "\\n";
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 110, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Telemetry
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 115, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 115, col 8.
            write(u''' ::
    assertTlm_size(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_cpp_params($params_assert_size)' on line 117, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_size)')) # from line 117, col 1.
            write(u'''
    ) const
  {
    ASSERT_EQ(size, this->tlmSize)
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 121, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 121, col 7.
            write(u'''
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 122, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 122, col 7.
            write(u''' "  Value:    Total size of all telemetry histories\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 123, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 123, col 7.
            write(u''' "  Expected: " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 123, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 123, col 28.
            write(u''' size ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 123, col 39
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 123, col 39.
            write(u''' "\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 124, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 124, col 7.
            write(u''' "  Actual:   " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 124, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 124, col 28.
            write(u''' this->tlmSize ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 124, col 48
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 124, col 48.
            write(u''' "\\n";
  }

''')
            for id, channel_name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 127, col 3
                write(u'''  // ----------------------------------------------------------------------
  // Channel: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 129, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 129, col 15.
                write(u'''
  // ----------------------------------------------------------------------

  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 132, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 132, col 8.
                write(u''' ::
    assertTlm_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 133, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 133, col 15.
                write(u'''_size(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_cpp_params($params_assert_size)' on line 134, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_size)')) # from line 134, col 1.
                write(u'''
    ) const
  {
    ASSERT_EQ(this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 137, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 137, col 32.
                write(u'''->size(), size)
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 138, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 138, col 7.
                write(u'''
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 139, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 139, col 7.
                write(u''' "  Value:    Size of history for telemetry channel ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'$channel_name' on line 139, col 64
                if _v is not None: write(_filter(_v, rawExpr=u'$channel_name')) # from line 139, col 64.
                write(u'''\\n"
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 140, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 140, col 7.
                write(u''' "  Expected: " ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 140, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 140, col 28.
                write(u''' size ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 140, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 140, col 39.
                write(u''' "\\n"
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 141, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 141, col 7.
                write(u''' "  Actual:   " ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 141, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 141, col 28.
                write(u''' this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 141, col 51
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 141, col 51.
                write(u'''->size() ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 141, col 75
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 141, col 75.
                write(u''' "\\n";
  }

''')
                param_val = VFSL([locals()]+SL+[globals(), builtin],"get_param_val_Tlm",False)(VFSL([locals()]+SL+[globals(), builtin],"type",True), VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True))
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 145, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 145, col 8.
                write(u''' ::
    assertTlm_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 146, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 146, col 15.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_fileName",True), VFSL([locals()]+SL+[globals(), builtin],"param_lineNumber",True), VFSL([locals()]+SL+[globals(), builtin],"param_index",True), VFSL([locals()]+SL+[globals(), builtin],"param_val",True) ]) # u'$emit_cpp_params([ $param_fileName, $param_lineNumber, $param_index, $param_val ])' on line 147, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_fileName, $param_lineNumber, $param_index, $param_val ])')) # from line 147, col 1.
                write(u'''
    )
    const
  {
    ASSERT_LT(index, this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 151, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 151, col 39.
                write(u'''->size())
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 152, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 152, col 7.
                write(u'''
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 153, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 153, col 7.
                write(u''' "  Value:    Index into history of telemetry channel ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 153, col 66
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 153, col 66.
                write(u'''\\n"
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 154, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 154, col 7.
                write(u''' "  Expected: Less than size of history (" 
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 155, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 155, col 7.
                write(u''' this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 155, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 155, col 30.
                write(u'''->size() ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 155, col 54
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 155, col 54.
                write(u''' ")\\n"
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 156, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 156, col 7.
                write(u''' "  Actual:   " ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 156, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 156, col 28.
                write(u''' index ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 156, col 40
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 156, col 40.
                write(u''' "\\n";
    const TlmEntry_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 157, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 157, col 20.
                write(u'''& e =
      this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 158, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 158, col 24.
                write(u'''->at(index);
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 159, col 5
                    write(u'''    ASSERT_STREQ(val, e.arg.toChar())
''')
                else: # generated from line 161, col 5
                    write(u'''    ASSERT_EQ(val, e.arg)
''')
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 164, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 164, col 7.
                write(u'''
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 165, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 165, col 7.
                write(u''' "  Value:    Value at index "
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 166, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 166, col 7.
                write(u''' index
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 167, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 167, col 7.
                write(u''' " on telmetry channel ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"channel_name",True) # u'${channel_name}' on line 167, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'${channel_name}')) # from line 167, col 35.
                write(u'''\\n"
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 168, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 168, col 7.
                write(u''' "  Expected: " ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 168, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 168, col 28.
                write(u''' val ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 168, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 168, col 38.
                write(u''' "\\n"
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 169, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 169, col 7.
                write(u''' "  Actual:   " ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 169, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 169, col 28.
                write(u''' e.arg ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 169, col 40
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 169, col 40.
                write(u''' "\\n";
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 174, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Events
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 179, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 179, col 8.
            write(u''' ::
    assertEvents_size(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_cpp_params($params_assert_size)' on line 181, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_size)')) # from line 181, col 1.
            write(u'''
    ) const
  {
    ASSERT_EQ(size, this->eventsSize)
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 185, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 185, col 7.
            write(u'''
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 186, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 186, col 7.
            write(u''' "  Value:    Total size of all event histories\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 187, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 187, col 7.
            write(u''' "  Expected: " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 187, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 187, col 28.
            write(u''' size ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 187, col 39
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 187, col 39.
            write(u''' "\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 188, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 188, col 7.
            write(u''' "  Actual:   " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 188, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 188, col 28.
            write(u''' this->eventsSize ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 188, col 51
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 188, col 51.
            write(u''' "\\n";
  }

''')
            for id, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 191, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"get_event_params",False)(VFSL([locals()]+SL+[globals(), builtin],"event_name",True))
                write(u'''  // ----------------------------------------------------------------------
  // Event: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 194, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 194, col 13.
                write(u'''
  // ----------------------------------------------------------------------

  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 197, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 197, col 8.
                write(u''' ::
    assertEvents_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 198, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 198, col 18.
                write(u'''_size(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_cpp_params($params_assert_size)' on line 199, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_size)')) # from line 199, col 1.
                write(u'''
    ) const
  {
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 202, col 5
                    write(u'''    ASSERT_EQ(size, this->eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 203, col 40
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 203, col 40.
                    write(u'''->size())
''')
                else: # generated from line 204, col 5
                    write(u'''    ASSERT_EQ(size, this->eventsSize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 205, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 205, col 38.
                    write(u''')
''')
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 207, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 207, col 7.
                write(u'''
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 208, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 208, col 7.
                write(u''' "  Value:    Size of history for event ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'$event_name' on line 208, col 52
                if _v is not None: write(_filter(_v, rawExpr=u'$event_name')) # from line 208, col 52.
                write(u'''\\n"
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 209, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 209, col 7.
                write(u''' "  Expected: " ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 209, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 209, col 28.
                write(u''' size ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 209, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 209, col 39.
                write(u''' "\\n"
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 210, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 211, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 211, col 7.
                    write(u''' "  Actual:   " ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 211, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 211, col 28.
                    write(u''' this->eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 211, col 53
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 211, col 53.
                    write(u'''->size() ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 211, col 75
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 211, col 75.
                    write(u''' "\\n";
''')
                else: # generated from line 212, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 213, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 213, col 7.
                    write(u''' "  Actual:   " ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 213, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 213, col 28.
                    write(u''' this->eventsSize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 213, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 213, col 51.
                    write(u''' ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 213, col 65
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 213, col 65.
                    write(u''' "\\n";
''')
                write(u'''  }

''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 217, col 5
                    write(u'''  void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 218, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 218, col 8.
                    write(u''' ::
    assertEvents_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 219, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 219, col 18.
                    write(u'''(
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_event",True) + VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_cpp_params($params_assert_event + $params)' on line 220, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_event + $params)')) # from line 220, col 1.
                    write(u'''
    ) const
  {
    ASSERT_GT(this->eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 223, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 223, col 34.
                    write(u'''->size(), index)
      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 224, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 224, col 7.
                    write(u'''
      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 225, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 225, col 7.
                    write(u''' "  Value:    Index into history of event ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 225, col 54
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 225, col 54.
                    write(u'''\\n"
      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 226, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 226, col 7.
                    write(u''' "  Expected: Less than size of history (" 
      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 227, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 227, col 7.
                    write(u''' this->eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 227, col 32
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 227, col 32.
                    write(u'''->size() ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 227, col 54
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 227, col 54.
                    write(u''' ")\\n"
      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 228, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 228, col 7.
                    write(u''' "  Actual:   " ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 228, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 228, col 28.
                    write(u''' index ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 228, col 40
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 228, col 40.
                    write(u''' "\\n";
    const EventEntry_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 229, col 22
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 229, col 22.
                    write(u'''& e =
      this->eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 230, col 26
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 230, col 26.
                    write(u'''->at(index);
''')
                    for param_name, param_type, param_comment, param_typeinfo in VFSL([locals()]+SL+[globals(), builtin],"params",True): # generated from line 231, col 7
                        if VFSL([locals()]+SL+[globals(), builtin],"param_typeinfo",True) == "string": # generated from line 232, col 9
                            write(u'''    ASSERT_STREQ(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 233, col 18
                            if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 233, col 18.
                            write(u''', e.''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 233, col 35
                            if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 233, col 35.
                            write(u'''.toChar())
''')
                        else: # generated from line 234, col 9
                            write(u'''    ASSERT_EQ(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 235, col 15
                            if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 235, col 15.
                            write(u''', e.''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 235, col 32
                            if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 235, col 32.
                            write(u''')
''')
                        write(u'''      ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 237, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 237, col 7.
                        write(u'''
      ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 238, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 238, col 7.
                        write(u''' "  Value:    Value of argument ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'$param_name' on line 238, col 44
                        if _v is not None: write(_filter(_v, rawExpr=u'$param_name')) # from line 238, col 44.
                        write(u''' at index "
      ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 239, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 239, col 7.
                        write(u''' index
      ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 240, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 240, col 7.
                        write(u''' " in history of event ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 240, col 35
                        if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 240, col 35.
                        write(u'''\\n"
      ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 241, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 241, col 7.
                        write(u''' "  Expected: " ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 241, col 28
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 241, col 28.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'$param_name' on line 241, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u'$param_name')) # from line 241, col 34.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 241, col 46
                        if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 241, col 46.
                        write(u''' "\\n"
''')
                        if VFSL([locals()]+SL+[globals(), builtin],"param_typeinfo",True) == "string": # generated from line 242, col 9
                            write(u'''      ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 243, col 7
                            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 243, col 7.
                            write(u''' "  Actual:   " ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 243, col 28
                            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 243, col 28.
                            write(u''' e.''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 243, col 36
                            if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 243, col 36.
                            write(u'''.toChar() ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 243, col 59
                            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 243, col 59.
                            write(u''' "\\n";
''')
                        else: # generated from line 244, col 9
                            write(u'''      ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 245, col 7
                            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 245, col 7.
                            write(u''' "  Actual:   " ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 245, col 28
                            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 245, col 28.
                            write(u''' e.''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 245, col 36
                            if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 245, col 36.
                            write(u''' ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 245, col 50
                            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 245, col 50.
                            write(u''' "\\n";
''')
                    write(u'''  }

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 253, col 1
            write(u'''  // ----------------------------------------------------------------------
  // From ports
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 258, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 258, col 8.
            write(u''' ::
    assertFromPortHistory_size(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_cpp_params($params_assert_size)' on line 260, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_size)')) # from line 260, col 1.
            write(u'''
    ) const
  {
    ASSERT_EQ(size, this->fromPortHistorySize)
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 264, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 264, col 7.
            write(u'''
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 265, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 265, col 7.
            write(u''' "  Value:    Total size of all from port histories\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 266, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 266, col 7.
            write(u''' "  Expected: " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 266, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 266, col 28.
            write(u''' size ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 266, col 39
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 266, col 39.
            write(u''' "\\n"
      ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 267, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 267, col 7.
            write(u''' "  Actual:   " ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 267, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 267, col 28.
            write(u''' this->fromPortHistorySize ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 267, col 60
            if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 267, col 60.
            write(u''' "\\n";
  }

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 270, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''  // ----------------------------------------------------------------------
  // From port: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 273, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 273, col 17.
                write(u'''
  // ----------------------------------------------------------------------

  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'$gtest_base' on line 276, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'$gtest_base')) # from line 276, col 8.
                write(u''' ::
    assert_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 277, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 277, col 17.
                write(u'''_size(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params_assert_size",True)) # u'$emit_cpp_params($params_assert_size)' on line 278, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params_assert_size)')) # from line 278, col 1.
                write(u'''
    ) const
  {
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 281, col 5
                    write(u'''    ASSERT_EQ(size, this->fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 282, col 43
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 282, col 43.
                    write(u'''->size())
''')
                else: # generated from line 283, col 5
                    write(u'''    ASSERT_EQ(size, this->fromPortHistorySize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 284, col 47
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 284, col 47.
                    write(u''')
''')
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"failure_message",True) # u'$failure_message' on line 286, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$failure_message')) # from line 286, col 7.
                write(u'''
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 287, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 287, col 7.
                write(u''' "  Value:    Size of history for from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 287, col 51
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 287, col 51.
                write(u'''\\n"
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 288, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 288, col 7.
                write(u''' "  Expected: " ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 288, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 288, col 28.
                write(u''' size ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 288, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 288, col 39.
                write(u''' "\\n"
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 289, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 290, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 290, col 7.
                    write(u''' "  Actual:   " ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 290, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 290, col 28.
                    write(u''' this->fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 290, col 56
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 290, col 56.
                    write(u'''->size() ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 290, col 76
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 290, col 76.
                    write(u''' "\\n";
''')
                else: # generated from line 291, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 292, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 292, col 7.
                    write(u''' "  Actual:   " ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 292, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 292, col 28.
                    write(u''' this->fromPortHistorySize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 292, col 60
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 292, col 60.
                    write(u''' ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"LTLT",True) # u'$LTLT' on line 292, col 72
                    if _v is not None: write(_filter(_v, rawExpr=u'$LTLT')) # from line 292, col 72.
                    write(u''' "\\n";
''')
                write(u'''  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 298, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 299, col 2
                write(u'''} // end namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 300, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 300, col 20.
                write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=cpp()).run()


