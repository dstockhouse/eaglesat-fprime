#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930766.673538
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:46 2019'
__CHEETAH_src__ = 'CommandBody.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class CommandBody(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(CommandBody, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''# Each file represents the information for a single command
# These module variables are used to instance the command object within the Gse

''')
        for ser_import in VFSL([locals()]+SL+[globals(), builtin],"ser_import_list",True): # generated from line 4, col 1
            write(u'''import ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"ser_import",True) # u'$ser_import' on line 5, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$ser_import')) # from line 5, col 8.
            write(u'''
''')
        write(u'''
COMPONENT = "''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"component",True) # u'${component}' on line 8, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'${component}')) # from line 8, col 14.
        write(u'''"

MNEMONIC = "''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 10, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 10, col 13.
        write(u'''"

OP_CODE  = ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"opcode",True) # u'${opcode}' on line 12, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${opcode}')) # from line 12, col 12.
        write(u'''

CMD_DESCRIPTION = "''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"description",True) # u'${description}' on line 14, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'${description}')) # from line 14, col 20.
        write(u'''"

# Set arguments list with default values here.
ARGUMENTS = [
''')
        for argname,arg_description,type in VFSL([locals()]+SL+[globals(), builtin],"arglist",True): # generated from line 18, col 1
            write(u'''    ("''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 19, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 19, col 7.
            write(u'''","''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_description",True) # u'${arg_description}' on line 19, col 20
            if _v is not None: write(_filter(_v, rawExpr=u'${arg_description}')) # from line 19, col 20.
            write(u'''",''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 19, col 40
            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 19, col 40.
            write(u'''), 
''')
        write(u"""    ]

if __name__ == '__main__':
    testcmd = command.Command(COMPONENT, MNEMONIC, OP_CODE, CMD_DESCRIPTION, ARGUMENTS)
    data = testcmd.serialize()
    type_base.showBytes(data)
""")
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_CommandBody= 'respond'

## END CLASS DEFINITION

if not hasattr(CommandBody, '_initCheetahAttributes'):
    templateAPIClass = getattr(CommandBody, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(CommandBody)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=CommandBody()).run()


