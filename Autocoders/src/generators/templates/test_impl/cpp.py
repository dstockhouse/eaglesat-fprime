#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930777.450624
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:57 2019'
__CHEETAH_src__ = 'cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// ====================================================================== 
// \\title  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 12.
        write(u'''.hpp
// \\author ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"user",True) # u'$user' on line 3, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'$user')) # from line 3, col 12.
        write(u'''
// \\brief  cpp file for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 4, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 4, col 25.
        write(u''' test harness implementation class
//
// \\copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
// 
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ====================================================================== 

#include "Tester.hpp"

#define INSTANCE 0
#define MAX_HISTORY_SIZE 10
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) != "passive": # generated from line 24, col 1
            write(u'''#define QUEUE_DEPTH 10
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 28, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 29, col 3
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 30, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 30, col 11.
                write(u''' {
''')
        write(u'''
  // ----------------------------------------------------------------------
  // Construction and destruction 
  // ----------------------------------------------------------------------

  Tester ::
    Tester(void) : 
#if FW_OBJECT_NAMES == 1
      ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'${gtest_base}' on line 41, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${gtest_base}')) # from line 41, col 7.
        write(u'''("Tester", MAX_HISTORY_SIZE),
      component("''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 42, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 42, col 18.
        write(u'''")
#else
      ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"gtest_base",True) # u'${gtest_base}' on line 44, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${gtest_base}')) # from line 44, col 7.
        write(u'''(MAX_HISTORY_SIZE),
      component()
#endif
  {
    this->initComponents();
    this->connectPorts();
  }

  Tester ::
    ~Tester(void) 
  {
    
  }

  // ----------------------------------------------------------------------
  // Tests 
  // ----------------------------------------------------------------------

  void Tester ::
    toDo(void) 
  {
    // TODO
  }

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 68, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Handlers for typed from ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 73, col 3
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''  ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 75, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 75, col 3.
                write(u'''Tester ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 76, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 76, col 10.
                write(u'''_handler(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_port_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True) ] + VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]) # u'$emit_port_params([ $param_portNum ] + $port_params[$instance])' on line 77, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_port_params([ $param_portNum ] + $port_params[$instance])')) # from line 77, col 1.
                write(u'''
    )
  {
    this->pushFromPortEntry_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 80, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 80, col 29.
                write(u'''(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)] # u'$port_arg_strs[$instance]' on line 80, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$port_arg_strs[$instance]')) # from line 80, col 41.
                write(u''');
''')
                if not VFSL([locals()]+SL+[globals(), builtin],"return_type",True)[:4] == "void": # generated from line 81, col 5
                    write(u'''    // TODO: Return a value
''')
                write(u'''  }

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"serial_output_ports",True)) > 0: # generated from line 88, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Handlers for serial from ports
  // ----------------------------------------------------------------------

''')
            for instance, sync, priority, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_output_ports",True): # generated from line 93, col 3
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''  ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 95, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 95, col 3.
                write(u'''Tester ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 96, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 96, col 10.
                write(u'''_handler(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 97, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 97, col 34.
                write(u'''
        Fw::SerializeBufferBase &Buffer ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 98, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 98, col 41.
                write(u'''
    )
  {
    // TODO
  }

''')
        write(u'''  // ----------------------------------------------------------------------
  // Helper methods 
  // ----------------------------------------------------------------------

  void Tester ::
    connectPorts(void) 
  {

''')
        for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_input_ports",True): # generated from line 114, col 1
            write(u'''    // ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 115, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 115, col 8.
            write(u'''
''')
            if VFSL([locals()]+SL+[globals(), builtin],"max_num",True) == 1 or VFSL([locals()]+SL+[globals(), builtin],"max_num",True) == "1": # generated from line 116, col 3
                write(u'''    this->connect_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 117, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 117, col 22.
                write(u'''(
        0,
        this->component.get_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 119, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 119, col 29.
                write(u'''_InputPort(0)
    );
''')
            else: # generated from line 121, col 3
                LT = "<"
                write(u'''    for (NATIVE_INT_TYPE i = 0; i ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LT",True) # u'$LT' on line 123, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'$LT')) # from line 123, col 35.
                write(u''' ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"max_num",True) # u'$max_num' on line 123, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'$max_num')) # from line 123, col 39.
                write(u'''; ++i) {
      this->connect_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 124, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 124, col 24.
                write(u'''(
          i,
          this->component.get_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 126, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 126, col 31.
                write(u'''_InputPort(i)
      );
    }
''')
            write(u'''
''')
        for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_output_ports",True): # generated from line 132, col 1
            write(u'''    // ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 133, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 133, col 8.
            write(u'''
''')
            if VFSL([locals()]+SL+[globals(), builtin],"max_num",True) == 1 or VFSL([locals()]+SL+[globals(), builtin],"max_num",True) == "1": # generated from line 134, col 3
                write(u'''    this->component.set_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 135, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 135, col 25.
                write(u'''_OutputPort(
        0, 
        this->get_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 137, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 137, col 24.
                write(u'''(0)
    );
''')
            else: # generated from line 139, col 3
                LT = "<"
                write(u'''    for (NATIVE_INT_TYPE i = 0; i ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LT",True) # u'$LT' on line 141, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'$LT')) # from line 141, col 35.
                write(u''' ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"max_num",True) # u'$max_num' on line 141, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'$max_num')) # from line 141, col 39.
                write(u'''; ++i) {
      this->component.set_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 142, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 142, col 27.
                write(u'''_OutputPort(
          i, 
          this->get_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 144, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 144, col 26.
                write(u'''(i)
      );
    }
''')
            write(u'''
''')
        write(u'''  }

  void Tester ::
    initComponents(void) 
  {
    this->init();
    this->component.init(
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "passive": # generated from line 157, col 1
            write(u'''        INSTANCE
''')
        else: # generated from line 159, col 1
            write(u'''        QUEUE_DEPTH, INSTANCE
''')
        write(u'''    );
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 165, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 166, col 3
                write(u'''} // end namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 167, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 167, col 20.
                write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=cpp()).run()


