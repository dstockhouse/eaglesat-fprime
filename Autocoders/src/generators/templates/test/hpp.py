#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930753.57654
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:33 2019'
__CHEETAH_src__ = 'hpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class hpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(hpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// ======================================================================
// \\title  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 12.
        write(u'''/test/ut/TesterBase.hpp
// \\author Auto-generated
// \\brief  hpp file for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 4, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 4, col 25.
        write(u''' component test harness base class
//
// \\copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
//
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ======================================================================

#ifndef ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 20, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 20, col 10.
        write(u'''_TESTER_BASE_HPP
#define ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 21, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 21, col 10.
        write(u'''_TESTER_BASE_HPP

#include <''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"comp_include_path",True) # u'${comp_include_path}' on line 23, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${comp_include_path}')) # from line 23, col 12.
        write(u'''/''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"include_name",True) # u'${include_name}' on line 23, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'${include_name}')) # from line 23, col 33.
        write(u'''ComponentAc.hpp>
#include <Fw/Types/Assert.hpp>
#include <Fw/Comp/PassiveComponentBase.hpp>
#include <stdio.h>
#include <Fw/Port/InputSerializePort.hpp>

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 29, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 30, col 3
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 31, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 31, col 11.
                write(u''' {
''')
        write(u'''
  //! \\class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'$tester_base' on line 35, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'$tester_base')) # from line 35, col 14.
        write(u'''
  //! \\brief Auto-generated base class for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 36, col 44
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 36, col 44.
        write(u''' component test harness
  //!
  class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'$tester_base' on line 38, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'$tester_base')) # from line 38, col 9.
        write(u''' :
    public Fw::PassiveComponentBase
  {

    public:

      // ----------------------------------------------------------------------
      // Initialization
      // ----------------------------------------------------------------------

      //! Initialize object ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'$tester_base' on line 48, col 29
        if _v is not None: write(_filter(_v, rawExpr=u'$tester_base')) # from line 48, col 29.
        write(u'''
      //!
      virtual void init(
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_instance_default_zero",True) ]) # u'$emit_hpp_params([ $param_instance_default_zero ])' on line 51, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_instance_default_zero ])')) # from line 51, col 1.
        write(u'''
      );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_input_ports",True): # generated from line 54, col 1
            write(u"""    public:

      // ----------------------------------------------------------------------
      // Connectors for 'to' ports
      // Connect these output ports to the input ports under test
      // ----------------------------------------------------------------------

""")
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 62, col 3
                param_port = VFSL([locals()]+SL+[globals(), builtin],"get_param_port",False)(VFSL([locals()]+SL+[globals(), builtin],"instance",True), VFSL([locals()]+SL+[globals(), builtin],"type",True))
                write(u'''      //! Connect ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 64, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 64, col 19.
                write(u''' to to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 64, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 64, col 35.
                write(u'''[portNum]
      //!
      void connect_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 66, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 66, col 23.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True), VFSL([locals()]+SL+[globals(), builtin],"param_port",True) ]) # u'$emit_hpp_params([ $param_portNum, $param_port ])' on line 67, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_portNum, $param_port ])')) # from line 67, col 1.
                write(u'''
      );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 72, col 1
            write(u"""    public:

      // ----------------------------------------------------------------------
      // Getters for 'from' ports
      // Connect these input ports to the output ports under test
      // ----------------------------------------------------------------------

""")
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 80, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 81, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                write(u'''      //! Get the port that receives input from ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 85, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 85, col 49.
                write(u'''
      //!
      //! \\return from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 87, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 87, col 24.
                write(u'''[portNum]
      //!
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 89, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 90, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 90, col 7.
                    write(u'''::InputSerializePort* get_from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 90, col 50
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 90, col 50.
                    write(u'''(
''')
                else: # generated from line 91, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 92, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 92, col 7.
                    write(u'''::Input''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 92, col 26
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 92, col 26.
                    write(u'''Port* get_from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 92, col 48
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 92, col 48.
                    write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True) ]) # u'$emit_hpp_params([ $param_portNum ])' on line 94, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_portNum ])')) # from line 94, col 1.
                write(u'''
      );
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 96, col 5
                    write(u'''#endif
''')
                write(u'''
''')
        write(u'''    protected:

      // ----------------------------------------------------------------------
      // Construction and destruction
      // ----------------------------------------------------------------------

      //! Construct object ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'$tester_base' on line 108, col 28
        if _v is not None: write(_filter(_v, rawExpr=u'$tester_base')) # from line 108, col 28.
        write(u'''
      //!
      ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 110, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 110, col 7.
        write(u'''(
#if FW_OBJECT_NAMES == 1
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_compName",True), VFSL([locals()]+SL+[globals(), builtin],"param_maxHistorySize",True) ]) # u'$emit_hpp_params([ $param_compName, $param_maxHistorySize ])' on line 112, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_compName, $param_maxHistorySize ])')) # from line 112, col 1.
        write(u'''
#else
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_maxHistorySize",True) ]) # u'$emit_hpp_params([ $param_maxHistorySize ])' on line 114, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_maxHistorySize ])')) # from line 114, col 1.
        write(u'''
#endif
      );

      //! Destroy object ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'$tester_base' on line 118, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'$tester_base')) # from line 118, col 26.
        write(u'''
      //!
      virtual ~''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 120, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 120, col 16.
        write(u'''(void);

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 122, col 1
            write(u'''      // ----------------------------------------------------------------------
      // Test history
      // ----------------------------------------------------------------------

    protected:

      //! \\class History
      //! \\brief A history of port inputs
      //!
      template <typename T> class History {

        public:

          //! Create a History
          //!
          History(
              const U32 maxSize ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The maximum history size") # u'$doxygen_post_comment("The maximum history size")' on line 139, col 33
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The maximum history size")')) # from line 139, col 33.
            write(u'''
          ) : 
              numEntries(0), 
              maxSize(maxSize) 
          { 
            this->entries = new T[maxSize];
          }

          //! Destroy a History
          //!
          ~History() {
            delete[] this->entries;
          }

          //! Clear the history
          //!
          void clear() { this->numEntries = 0; }

          //! Push an item onto the history
          //!
          void push_back(
              T entry ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The item") # u'$doxygen_post_comment("The item")' on line 160, col 23
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The item")')) # from line 160, col 23.
            write(u'''
          ) {
            FW_ASSERT(this->numEntries < this->maxSize);
            entries[this->numEntries++] = entry;
          }

          //! Get an item at an index
          //!
          //! \\return The item at index i
          //!
          T at(
              const U32 i ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The index") # u'$doxygen_post_comment("The index")' on line 171, col 27
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The index")')) # from line 171, col 27.
            write(u'''
          ) const {
            FW_ASSERT(i < this->numEntries);
            return entries[i];
          }

          //! Get the number of entries in the history
          //!
          //! \\return The number of entries in the history
          //!
          U32 size(void) const { return this->numEntries; }

        private:

          //! The number of entries in the history
          //!
          U32 numEntries;

          //! The maximum history size
          //!
          const U32 maxSize;

          //! The entries
          //!
          T *entries;

      };

      //! Clear all history
      //!
      void clearHistory(void);

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 204, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Handler prototypes for typed from ports
      // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 211, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''      //! Handler prototype for from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 214, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 214, col 38.
                write(u'''
      //!
      virtual ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 216, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 216, col 15.
                write(u'''from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 216, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 216, col 34.
                write(u'''_handler(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_port_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True) ] + VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_hpp_port_params([ $param_portNum ] + $params)' on line 217, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_port_params([ $param_portNum ] + $params)')) # from line 217, col 1.
                write(u'''
      ) = 0;

      //! Handler base function for from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 220, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 220, col 42.
                write(u'''
      //!
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 222, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 222, col 7.
                write(u'''from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 222, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 222, col 26.
                write(u'''_handlerBase(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_port_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True) ] + VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_hpp_port_params([ $param_portNum ] + $params)' on line 223, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_port_params([ $param_portNum ] + $params)')) # from line 223, col 1.
                write(u'''
      );

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 228, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Histories for typed from ports
      // ----------------------------------------------------------------------

      //! Clear from port history
      //!
      void clearFromPortHistory(void);

      //! The total number of from port entries
      //!
      U32 fromPortHistorySize;

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 243, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''      //! Push an entry on the history for from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 245, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 245, col 49.
                write(u'''
      void pushFromPortEntry_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 246, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 246, col 30.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_port_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_hpp_port_params($params)' on line 247, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_port_params($params)')) # from line 247, col 1.
                write(u'''
      );

''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 250, col 5
                    write(u'''      //! A history entry for from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 251, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 251, col 36.
                    write(u'''
      //!
      typedef struct {
''')
                    for param_name, param_type, param_comment, param_modifier, param_enum in VFSL([locals()]+SL+[globals(), builtin],"params",True): # generated from line 254, col 7
                        write(u'''        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_type",True) # u'$param_type' on line 255, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$param_type')) # from line 255, col 9.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"param_name",True) # u'${param_name}' on line 255, col 21
                        if _v is not None: write(_filter(_v, rawExpr=u'${param_name}')) # from line 255, col 21.
                        write(u''';
''')
                    write(u'''      } FromPortEntry_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 257, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 257, col 23.
                    write(u''';

      //! The history for from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 259, col 32
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 259, col 32.
                    write(u'''
      //!
      History<FromPortEntry_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 261, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 261, col 29.
                    write(u'''> 
        *fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 262, col 26
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 262, col 26.
                    write(u''';

''')
                else: # generated from line 264, col 5
                    write(u'''      //! Size of history for from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 265, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 265, col 36.
                    write(u'''
      //!
      U32 fromPortHistorySize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 267, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 267, col 31.
                    write(u''';

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"serial_output_ports",True)) > 0: # generated from line 272, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Handler prototypes for serial from ports
      // ----------------------------------------------------------------------

''')
            for instance, sync, priority, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_output_ports",True): # generated from line 279, col 3
                write(u'''      //! Handler prototype for from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 280, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 280, col 38.
                write(u'''
      //!
      virtual void from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 282, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 282, col 25.
                write(u'''_handler(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 283, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 283, col 34.
                write(u'''
        Fw::SerializeBufferBase &Buffer ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 284, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 284, col 41.
                write(u'''
      ) = 0;

      //! Handler base class function prototype for from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 287, col 58
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 287, col 58.
                write(u'''
      //!
      void from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 289, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 289, col 17.
                write(u'''_handlerBase (
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 290, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 290, col 34.
                write(u'''
        Fw::SerializeBufferBase &Buffer ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 291, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 291, col 41.
                write(u'''
      );

''')
            write(u'''
''')
        invocation_ports = [   (VFSL([locals()]+SL+[globals(), builtin],"instance",True), VFSL([locals()]+SL+[globals(), builtin],"type",True))   for instance, type, direction, role in VFSL([locals()]+SL+[globals(), builtin],"ports",True)   if VFSL([locals()]+SL+[globals(), builtin],"direction",True) == "Input" and VFSL([locals()]+SL+[globals(), builtin],"role",True) != "Cmd"]
        if len(VFSL([locals()]+SL+[globals(), builtin],"invocation_ports",True)) > 0: # generated from line 302, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Invocation functions for to ports
      // ----------------------------------------------------------------------

''')
            for instance, type in VFSL([locals()]+SL+[globals(), builtin],"invocation_ports",True): # generated from line 309, col 3
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''      //! Invoke the to port connected to ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 311, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 311, col 43.
                write(u'''
      //!
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 313, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 314, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 314, col 7.
                    write(u'''invoke_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 314, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 314, col 31.
                    write(u'''(
          NATIVE_INT_TYPE portNum, //!< The port number
          Fw::SerializeBufferBase& Buffer
      );
''')
                else: # generated from line 318, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 319, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 319, col 7.
                    write(u'''invoke_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 319, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 319, col 31.
                    write(u'''(
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_port_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True) ] + VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]) # u'$emit_hpp_port_params([ $param_portNum ] + $port_params[$instance])' on line 320, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_port_params([ $param_portNum ] + $port_params[$instance])')) # from line 320, col 1.
                    write(u'''
      );
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_ports",True): # generated from line 326, col 1
            write(u'''    public:

      // ----------------------------------------------------------------------
      // Getters for port counts
      // ----------------------------------------------------------------------

''')
            for instance, type, direction, role in VFSL([locals()]+SL+[globals(), builtin],"ports",True): # generated from line 333, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"direction",True) == "Input": # generated from line 334, col 5
                    write(u'''      //! Get the number of to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 335, col 32
                    if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 335, col 32.
                    write(u''' ports
      //!
      //! \\return The number of to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 337, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 337, col 36.
                    write(u''' ports
      //!
      NATIVE_INT_TYPE getNum_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 339, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 339, col 33.
                    write(u'''(void) const;

''')
                if VFSL([locals()]+SL+[globals(), builtin],"direction",True) == "Output": # generated from line 342, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"role",True) == 'LogTextEvent': # generated from line 343, col 7
                        write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                    write(u'''      //! Get the number of from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 346, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 346, col 34.
                    write(u''' ports
      //!
      //! \\return The number of from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 348, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 348, col 38.
                    write(u''' ports
      //!
      NATIVE_INT_TYPE getNum_from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 350, col 35
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 350, col 35.
                    write(u'''(void) const;
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"role",True) == 'LogTextEvent': # generated from line 351, col 7
                        write(u'''#endif
''')
                    write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_input_ports",True): # generated from line 358, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Connection status for to ports
      // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 365, col 3
                write(u'''      //! Check whether port is connected
      //!
      //! Whether to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 368, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 368, col 22.
                write(u'''[portNum] is connected
      //!
      bool isConnected_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 370, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 370, col 27.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True) ]) # u'$emit_hpp_params([ $param_portNum ])' on line 371, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_portNum ])')) # from line 371, col 1.
                write(u'''
      );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 376, col 1
            write(u'''      // ----------------------------------------------------------------------
      // Functions for sending commands
      // ----------------------------------------------------------------------

    protected:
    
      // send command buffers directly - used for intentional command encoding errors
      void sendRawCmd(FwOpcodeType opcode, U32 cmdSeq, Fw::CmdArgBuffer& args); 

''')
            for mnemonic, opcode, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 386, col 3
                write(u'''      //! Send a ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'$mnemonic' on line 387, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'$mnemonic')) # from line 387, col 18.
                write(u''' command
      //!
      void sendCmd_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 389, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 389, col 20.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_instance",True), VFSL([locals()]+SL+[globals(), builtin],"param_cmdSeq",True) ] + VFSL([locals()]+SL+[globals(), builtin],"get_command_params",False)(VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True))) # u'$emit_hpp_params([ $param_instance, $param_cmdSeq ] + $get_command_params($mnemonic))' on line 390, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_instance, $param_cmdSeq ] + $get_command_params($mnemonic))')) # from line 390, col 1.
                write(u'''
      );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 395, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Command response handling
      // ----------------------------------------------------------------------

      //! Handle a command response
      //!
      virtual void cmdResponseIn(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_opCode",True), VFSL([locals()]+SL+[globals(), builtin],"param_cmdSeq",True), VFSL([locals()]+SL+[globals(), builtin],"param_response",True) ]) # u'$emit_hpp_params([ $param_opCode, $param_cmdSeq, $param_response ])' on line 405, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_opCode, $param_cmdSeq, $param_response ])')) # from line 405, col 1.
            write(u'''
      );

      //! A type representing a command response
      //!
      typedef struct {
        FwOpcodeType opCode;
        U32 cmdSeq;
        Fw::CommandResponse response;
      } CmdResponse;

      //! The command response history
      //!
      History<CmdResponse> *cmdResponseHistory;

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 421, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Event dispatch
      // ----------------------------------------------------------------------

      //! Dispatch an event
      //!
      void dispatchEvents(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_event_id",True), VFSL([locals()]+SL+[globals(), builtin],"param_timeTag",True), VFSL([locals()]+SL+[globals(), builtin],"param_log_severity",True), VFSL([locals()]+SL+[globals(), builtin],"param_args",True) ]) # u'$emit_hpp_params([ $param_event_id, $param_timeTag, $param_log_severity, $param_args ])' on line 431, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_event_id, $param_timeTag, $param_log_severity, $param_args ])')) # from line 431, col 1.
            write(u'''
      );

      //! Clear event history
      //!
      void clearEvents(void);

      //! The total number of events seen
      //!
      U32 eventsSize;

#if FW_ENABLE_TEXT_LOGGING

    protected:

      // ----------------------------------------------------------------------
      // Text events
      // ----------------------------------------------------------------------

      //! Handle a text event
      //!
      virtual void textLogIn(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_event_id",True), VFSL([locals()]+SL+[globals(), builtin],"param_timeTag",True), VFSL([locals()]+SL+[globals(), builtin],"param_text_log_severity",True), VFSL([locals()]+SL+[globals(), builtin],"param_text",True) ]) # u'$emit_hpp_params([ $param_event_id, $param_timeTag, $param_text_log_severity, $param_text ])' on line 453, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_event_id, $param_timeTag, $param_text_log_severity, $param_text ])')) # from line 453, col 1.
            write(u'''
      );

      //! A history entry for the text log
      //!
      typedef struct {
        U32 id;
        Fw::Time timeTag;
        Fw::TextLogSeverity severity;
        Fw::TextLogString text;
      } TextLogEntry;

      //! The history of text log events
      //!
      History<TextLogEntry> *textLogHistory;

      //! Print a text log history entry
      //!
      static void printTextLogHistoryEntry(
          const TextLogEntry& e,
          FILE* file
      );

      //! Print the text log history
      //!
      void printTextLogHistory(FILE *const file);

#endif

''')
        for ids, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 483, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Event: ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 487, col 17
            if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 487, col 17.
            write(u'''
      // ----------------------------------------------------------------------

      //! Handle event ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'$event_name' on line 490, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'$event_name')) # from line 490, col 24.
            write(u'''
      //!
''')
            params = VFSL([locals()]+SL+[globals(), builtin],"get_event_params",False)(VFSL([locals()]+SL+[globals(), builtin],"event_name",True))
            write(u'''      virtual void logIn_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 493, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 493, col 26.
            write(u'''_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 493, col 38
            if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 493, col 38.
            write(u'''(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_hpp_params($params)' on line 494, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params($params)')) # from line 494, col 1.
            write(u'''
      );

''')
            if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 497, col 3
                write(u'''      //! A history entry for event ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'$event_name' on line 498, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'$event_name')) # from line 498, col 37.
                write(u'''
      //!
      typedef struct {
''')
                for arg_name, arg_type, arg_comment, arg_typeinfo in VFSL([locals()]+SL+[globals(), builtin],"params",True): # generated from line 501, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"arg_typeinfo",True) == "string": # generated from line 502, col 7
                        write(u'''        Fw::LogStringArg ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 503, col 26
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 503, col 26.
                        write(u''';
''')
                    else: # generated from line 504, col 7
                        write(u'''        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 505, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 505, col 9.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 505, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 505, col 19.
                        write(u''';
''')
                write(u'''      } EventEntry_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 508, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 508, col 20.
                write(u''';

      //! The history of ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'$event_name' on line 510, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$event_name')) # from line 510, col 26.
                write(u''' events
      //!
      History<EventEntry_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 512, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 512, col 26.
                write(u'''> 
        *eventHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 513, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 513, col 23.
                write(u''';

''')
            else: # generated from line 515, col 3
                write(u'''      //! Size of history for event ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'$event_name' on line 516, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'$event_name')) # from line 516, col 37.
                write(u'''
      //!
      U32 eventsSize_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 518, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 518, col 22.
                write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 522, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Telemetry dispatch
      // ----------------------------------------------------------------------

      //! Dispatch telemetry
      //!
      void dispatchTlm(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_tlm_id",True), VFSL([locals()]+SL+[globals(), builtin],"param_const_timeTag",True), VFSL([locals()]+SL+[globals(), builtin],"param_val",True) ]) # u'$emit_hpp_params([ $param_tlm_id, $param_const_timeTag, $param_val ])' on line 532, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_tlm_id, $param_const_timeTag, $param_val ])')) # from line 532, col 1.
            write(u'''
      );

      //! Clear telemetry history
      //!
      void clearTlm(void);

      //! The total number of telemetry inputs seen
      //!
      U32 tlmSize;

''')
        for ids, name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 544, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Channel: ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 548, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 548, col 19.
            write(u'''
      // ----------------------------------------------------------------------

''')
            param_val = VFSL([locals()]+SL+[globals(), builtin],"get_param_val_Tlm",False)(VFSL([locals()]+SL+[globals(), builtin],"type",True), VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True))
            write(u'''      //! Handle channel ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 552, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 552, col 26.
            write(u'''
      //!
      virtual void tlmInput_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 554, col 29
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 554, col 29.
            write(u'''(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_const_timeTag",True), VFSL([locals()]+SL+[globals(), builtin],"param_val",True) ]) # u'$emit_hpp_params([ $param_const_timeTag, $param_val ])' on line 555, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_const_timeTag, $param_val ])')) # from line 555, col 1.
            write(u'''
      );

      //! A telemetry entry for channel ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 558, col 41
            if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 558, col 41.
            write(u'''
      //!
      typedef struct {
        Fw::Time timeTag;
        ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"get_tlm_type",False)(VFSL([locals()]+SL+[globals(), builtin],"type",True), VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True)) # u'$get_tlm_type($type, $typeinfo)' on line 562, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'$get_tlm_type($type, $typeinfo)')) # from line 562, col 9.
            write(u''' arg;
      } TlmEntry_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 563, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 563, col 18.
            write(u''';

      //! The history of ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 565, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 565, col 26.
            write(u''' values
      //!
      History<TlmEntry_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 567, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 567, col 24.
            write(u'''> 
        *tlmHistory_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 568, col 21
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 568, col 21.
            write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True) or VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 571, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Test time
      // ----------------------------------------------------------------------

      //! Set the test time for events and telemetry
      //!
      void setTestTime(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_const_timeTag",True) ]) # u'$emit_hpp_params([ $param_const_timeTag ])' on line 581, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_const_timeTag ])')) # from line 581, col 1.
            write(u'''
      );

''')
        for ids, name, type, oset, osave, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 585, col 1
            write(u'''    protected:

      // ----------------------------------------------------------------------
      // Parameter: ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 589, col 21
            if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 589, col 21.
            write(u'''
      // ----------------------------------------------------------------------

''')
            param_val = VFSL([locals()]+SL+[globals(), builtin],"get_param_val_Param",False)(VFSL([locals()]+SL+[globals(), builtin],"type",True), VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True))
            write(u'''      void paramSet_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 593, col 21
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 593, col 21.
            write(u'''(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_val",True), VFSL([locals()]+SL+[globals(), builtin],"param_valid",True) ]) # u'$emit_hpp_params([ $param_val, $param_valid ])' on line 594, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_val, $param_valid ])')) # from line 594, col 1.
            write(u'''
      );

      void paramSend_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 597, col 22
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 597, col 22.
            write(u'''(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_instance",True), VFSL([locals()]+SL+[globals(), builtin],"param_cmdSeq",True) ]) # u'$emit_hpp_params([ $param_instance, $param_cmdSeq ])' on line 598, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_instance, $param_cmdSeq ])')) # from line 598, col 1.
            write(u'''
      );

      void paramSave_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 601, col 22
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 601, col 22.
            write(u'''(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_instance",True), VFSL([locals()]+SL+[globals(), builtin],"param_cmdSeq",True) ]) # u'$emit_hpp_params([ $param_instance, $param_cmdSeq ])' on line 602, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_params([ $param_instance, $param_cmdSeq ])')) # from line 602, col 1.
            write(u'''
      );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_input_ports",True): # generated from line 606, col 1
            write(u'''    private:

      // ----------------------------------------------------------------------
      // To ports
      // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 613, col 3
                write(u'''      //! To port connected to ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 614, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 614, col 32.
                write(u'''
      //!
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 616, col 5
                    write(u'''      Fw::OutputSerializePort m_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 617, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 617, col 36.
                    write(u'''[''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"max_num",True) # u'$max_num' on line 617, col 48
                    if _v is not None: write(_filter(_v, rawExpr=u'$max_num')) # from line 617, col 48.
                    write(u'''];
''')
                else: # generated from line 618, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)] # u'$port_namespaces[$type]' on line 619, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$port_namespaces[$type]')) # from line 619, col 7.
                    write(u'''::Output''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 619, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 619, col 38.
                    write(u'''Port m_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 619, col 55
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 619, col 55.
                    write(u'''[''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"max_num",True) # u'$max_num' on line 619, col 67
                    if _v is not None: write(_filter(_v, rawExpr=u'$max_num')) # from line 619, col 67.
                    write(u'''];
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 624, col 1
            write(u'''    private:

      // ----------------------------------------------------------------------
      // From ports
      // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 631, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 632, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''      //! From port connected to ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 635, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 635, col 34.
                write(u'''
      //!
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 637, col 5
                    write(u'''      Fw::InputSerializePort m_from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 638, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 638, col 37.
                    write(u'''[''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"max_num",True) # u'$max_num' on line 638, col 49
                    if _v is not None: write(_filter(_v, rawExpr=u'$max_num')) # from line 638, col 49.
                    write(u'''];
''')
                else: # generated from line 639, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)] # u'$port_namespaces[$type]' on line 640, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$port_namespaces[$type]')) # from line 640, col 7.
                    write(u'''::Input''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 640, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 640, col 37.
                    write(u'''Port m_from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 640, col 56
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 640, col 56.
                    write(u'''[''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"max_num",True) # u'$max_num' on line 640, col 68
                    if _v is not None: write(_filter(_v, rawExpr=u'$max_num')) # from line 640, col 68.
                    write(u'''];
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 642, col 5
                    write(u'''#endif
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 648, col 1
            write(u'''    private:

      // ----------------------------------------------------------------------
      // Static functions for output ports
      // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 655, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 656, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''      //! Static function for port from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 661, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 661, col 41.
                write(u'''
      //!
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 663, col 5
                    write(u'''      static ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 664, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 664, col 14.
                    write(u'''from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 664, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 664, col 33.
                    write(u'''_static(
          Fw::PassiveComponentBase *const callComp, //!< The component instance
          const NATIVE_INT_TYPE portNum, //!< The port number
          Fw::SerializeBufferBase& Buffer //!< serialized data buffer
      );
''')
                else: # generated from line 669, col 5
                    write(u'''      static ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 670, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 670, col 14.
                    write(u'''from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 670, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 670, col 33.
                    write(u'''_static(
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_hpp_port_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_callComp",True), VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True)] + VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_hpp_port_params([ $param_callComp, $param_portNum] + $params)' on line 671, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_hpp_port_params([ $param_callComp, $param_portNum] + $params)')) # from line 671, col 1.
                    write(u'''
      );
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == 'LogTextEvent': # generated from line 674, col 5
                    write(u'''#endif
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True) or VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 680, col 1
            write(u'''    private:

      // ----------------------------------------------------------------------
      // Test time
      // ----------------------------------------------------------------------

      //! Test time stamp
      //!
      Fw::Time m_testTime;

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 692, col 1
            write(u'''    private:

      // ----------------------------------------------------------------------
      // Parameter validity flags
      // ----------------------------------------------------------------------

''')
            for ids, name, type, oset, osave, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 699, col 3
                write(u'''      //! True if parameter ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 700, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 700, col 29.
                write(u''' was successfully received
      //!
      Fw::ParamValid m_param_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 702, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 702, col 30.
                write(u'''_valid;

''')
            write(u'''    private:

      // ----------------------------------------------------------------------
      // Parameter variables
      // ----------------------------------------------------------------------

''')
            for ids, name, type, oset, osave, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 711, col 3
                write(u'''      //! Parameter ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 712, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 712, col 21.
                write(u'''
      //!
      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"get_param_type",False)(VFSL([locals()]+SL+[globals(), builtin],"type",True), VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True)) # u'$get_param_type($type, $typeinfo)' on line 714, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$get_param_type($type, $typeinfo)')) # from line 714, col 7.
                write(u''' m_param_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 714, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 714, col 49.
                write(u''';

''')
        write(u'''  };

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 720, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 721, col 3
                write(u'''} // end namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 722, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 722, col 20.
                write(u'''
''')
        write(u'''
#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_hpp= 'respond'

## END CLASS DEFINITION

if not hasattr(hpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(hpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(hpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=hpp()).run()


