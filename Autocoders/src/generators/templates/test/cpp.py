#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930753.061147
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:33 2019'
__CHEETAH_src__ = 'cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// ======================================================================
// \\title  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 2, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 2, col 12.
        write(u'''/test/ut/TesterBase.cpp
// \\author Auto-generated
// \\brief  cpp file for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 4, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 4, col 25.
        write(u''' component test harness base class
//
// \\copyright
// Copyright 2009-2016, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
//
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ======================================================================

#include <stdlib.h>
#include <string.h>
#include "TesterBase.hpp"

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 24, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 25, col 2
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 26, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 26, col 11.
                write(u''' {
''')
        write(u'''
  // ----------------------------------------------------------------------
  // Construction, initialization, and destruction
  // ----------------------------------------------------------------------

  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 34, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 34, col 3.
        write(u''' ::
    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 35, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 35, col 5.
        write(u'''(
#if FW_OBJECT_NAMES == 1
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_compName",True), VFSL([locals()]+SL+[globals(), builtin],"param_maxHistorySize",True) ]) # u'$emit_cpp_params([ $param_compName, $param_maxHistorySize ])' on line 37, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_compName, $param_maxHistorySize ])')) # from line 37, col 1.
        write(u'''
#else
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_maxHistorySize",True) ]) # u'$emit_cpp_params([ $param_maxHistorySize ])' on line 39, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_maxHistorySize ])')) # from line 39, col 1.
        write(u'''
#endif
    ) :
#if FW_OBJECT_NAMES == 1
      Fw::PassiveComponentBase(compName)
#else
      Fw::PassiveComponentBase()
#endif
  {
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 48, col 1
            write(u'''    // Initialize command history
    this->cmdResponseHistory = new History<CmdResponse>(maxHistorySize);
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 52, col 1
            write(u'''    // Initialize telemetry histories
''')
            for ids, tlm_name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 54, col 3
                write(u'''    this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 55, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 55, col 22.
                write(u''' = 
      new History<TlmEntry_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 56, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 56, col 28.
                write(u'''>(maxHistorySize);
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 59, col 1
            write(u'''    // Initialize event histories
#if FW_ENABLE_TEXT_LOGGING
    this->textLogHistory = new History<TextLogEntry>(maxHistorySize);
#endif
''')
            for ids, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 64, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"get_event_params",False)(VFSL([locals()]+SL+[globals(), builtin],"event_name",True))
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 66, col 5
                    write(u'''    this->eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 67, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 67, col 24.
                    write(u''' =
      new History<EventEntry_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 68, col 30
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 68, col 30.
                    write(u'''>(maxHistorySize);
''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 72, col 1
            write(u'''    // Initialize histories for typed user output ports
''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 74, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 76, col 5
                    write(u'''    this->fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 77, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 77, col 27.
                    write(u''' =
      new History<FromPortEntry_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 78, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 78, col 33.
                    write(u'''>(maxHistorySize);
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 82, col 1
            write(u'''    // Clear history
    this->clearHistory();
''')
        write(u'''  }

  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 88, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 88, col 3.
        write(u''' ::
    ~''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 89, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 89, col 6.
        write(u'''(void) 
  {
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 91, col 1
            write(u'''    // Destroy command history
    delete this->cmdResponseHistory;
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 95, col 1
            write(u'''    // Destroy telemetry histories
''')
            for ids, tlm_name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 97, col 3
                write(u'''    delete this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 98, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 98, col 29.
                write(u''';
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 101, col 1
            write(u'''    // Destroy event histories
#if FW_ENABLE_TEXT_LOGGING
    delete this->textLogHistory;
#endif
''')
            for ids, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 106, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"get_event_params",False)(VFSL([locals()]+SL+[globals(), builtin],"event_name",True))
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 108, col 5
                    write(u'''    delete this->eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 109, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 109, col 31.
                    write(u''';
''')
        write(u'''  }

  void ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 115, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 115, col 8.
        write(u''' ::
    init(
''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_instance",True) ]) # u'$emit_cpp_params([ $param_instance ])' on line 117, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_instance ])')) # from line 117, col 1.
        write(u'''
    )
  {
''')
        for ids, prm_name, type, oset, osave, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 120, col 1
            write(u'''    this->m_param_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 121, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 121, col 19.
            write(u'''_valid = Fw::PARAM_UNINIT;
''')
        write(u'''
    // Initialize base class

\t\tFw::PassiveComponentBase::init(instance);

''')
        for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 128, col 1
            write(u'''    // Attach input port ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 129, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 129, col 26.
            write(u'''

''')
            if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 131, col 3
                write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
            write(u'''    for (
        NATIVE_INT_TYPE _port = 0;
        _port < this->getNum_from_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 136, col 35
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 136, col 35.
            write(u'''();
        ++_port
    ) {

''')
            port_name = "from_" + VFSL([locals()]+SL+[globals(), builtin],"instance",True)
            write(u'''      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"port_name",True) # u'${port_name}' on line 141, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${port_name}')) # from line 141, col 15.
            write(u'''[_port].init();
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"port_name",True) # u'${port_name}' on line 142, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${port_name}')) # from line 142, col 15.
            write(u'''[_port].addCallComp(
          this,
          from_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 144, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 144, col 16.
            write(u'''_static
      );
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"port_name",True) # u'${port_name}' on line 146, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${port_name}')) # from line 146, col 15.
            write(u'''[_port].setPortNum(_port);

#if FW_OBJECT_NAMES == 1
      char _portName[80];
      (void) snprintf(
          _portName,
          sizeof(_portName),
          "%s_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"port_name",True) # u'${port_name}' on line 153, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${port_name}')) # from line 153, col 15.
            write(u'''[%d]",
          this->m_objName,
          _port
      );
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"port_name",True) # u'${port_name}' on line 157, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${port_name}')) # from line 157, col 15.
            write(u'''[_port].setObjName(_portName);
#endif

    }
''')
            if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 161, col 3
                write(u'''#endif
''')
            write(u'''
''')
        for instance, type, direction, role in VFSL([locals()]+SL+[globals(), builtin],"ports",True): # generated from line 166, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"direction",True) == "Input" and VFSL([locals()]+SL+[globals(), builtin],"role",True) != "Cmd": # generated from line 167, col 3
                write(u'''    // Initialize output port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 168, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 168, col 31.
                write(u'''

    for (
        NATIVE_INT_TYPE _port = 0;
        _port < this->getNum_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 172, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 172, col 33.
                write(u'''();
        ++_port
    ) {
      this->m_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 175, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 175, col 18.
                write(u'''[_port].init();

#if FW_OBJECT_NAMES == 1
      char _portName[80];
      snprintf(
          _portName,
          sizeof(_portName),
          "%s_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 182, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 182, col 18.
                write(u'''[%d]",
          this->m_objName,
          _port
      );
      this->m_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 186, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 186, col 18.
                write(u'''[_port].setObjName(_portName);
#endif

    }

''')
        write(u'''  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_ports",True): # generated from line 195, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Getters for port counts
  // ----------------------------------------------------------------------

''')
            for instance, type, direction, role in VFSL([locals()]+SL+[globals(), builtin],"ports",True): # generated from line 200, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"direction",True) == "Input": # generated from line 201, col 5
                    write(u'''  NATIVE_INT_TYPE ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 202, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 202, col 19.
                    write(u''' ::
    getNum_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 203, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 203, col 15.
                    write(u'''(void) const
  {
    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(this->m_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 205, col 63
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 205, col 63.
                    write(u''');
  }

''')
                elif VFSL([locals()]+SL+[globals(), builtin],"direction",True) == "Output": # generated from line 208, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 209, col 7
                        write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                    write(u'''  NATIVE_INT_TYPE ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 212, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 212, col 19.
                    write(u''' ::
    getNum_from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 213, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 213, col 17.
                    write(u'''(void) const
  {
    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(this->m_from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 215, col 65
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 215, col 65.
                    write(u''');
  }
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 217, col 7
                        write(u'''#endif
''')
                    write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_input_ports",True): # generated from line 224, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Connectors for to ports 
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 229, col 3
                param_port = VFSL([locals()]+SL+[globals(), builtin],"get_param_port",False)(VFSL([locals()]+SL+[globals(), builtin],"instance",True), VFSL([locals()]+SL+[globals(), builtin],"type",True))
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 231, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 231, col 8.
                write(u''' ::
    connect_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 232, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 232, col 16.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True), VFSL([locals()]+SL+[globals(), builtin],"param_port",True) ]) # u'$emit_cpp_params([ $param_portNum, $param_port ])' on line 233, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_portNum, $param_port ])')) # from line 233, col 1.
                write(u'''
    ) 
  {
    FW_ASSERT(portNum < this->getNum_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 236, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 236, col 41.
                write(u'''(),static_cast<AssertArg>(portNum));
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 237, col 5
                    write(u'''    this->m_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 238, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 238, col 16.
                    write(u'''[portNum].registerSerialPort(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 238, col 56
                    if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 238, col 56.
                    write(u''');
''')
                else: # generated from line 239, col 5
                    write(u'''    this->m_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 240, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 240, col 16.
                    write(u'''[portNum].addCallPort(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 240, col 49
                    if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 240, col 49.
                    write(u''');
''')
                write(u'''  }

''')
        write(u'''
''')
        invocation_ports = [   (VFSL([locals()]+SL+[globals(), builtin],"instance",True), VFSL([locals()]+SL+[globals(), builtin],"type",True))   for instance, type, direction, role in VFSL([locals()]+SL+[globals(), builtin],"ports",True)   if VFSL([locals()]+SL+[globals(), builtin],"direction",True) == "Input" and VFSL([locals()]+SL+[globals(), builtin],"role",True) != "Cmd" ]
        if len(VFSL([locals()]+SL+[globals(), builtin],"invocation_ports",True)) > 0: # generated from line 252, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Invocation functions for to ports
  // ----------------------------------------------------------------------

''')
            for instance, type in VFSL([locals()]+SL+[globals(), builtin],"invocation_ports",True): # generated from line 257, col 3
                serial_type = VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial"
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_return_type = VFSL([locals()]+SL+[globals(), builtin],"return_type",True)[:4] == "void"
                write(u'''  ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 261, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 261, col 3.
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 261, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 261, col 17.
                write(u''' ::
''')
                if VFSL([locals()]+SL+[globals(), builtin],"serial_type",True): # generated from line 262, col 5
                    write(u'''    invoke_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 263, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 263, col 15.
                    write(u'''(
      NATIVE_INT_TYPE portNum, //!< The port number
      Fw::SerializeBufferBase& Buffer
    )
''')
                else: # generated from line 267, col 5
                    write(u'''    invoke_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 268, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 268, col 15.
                    write(u'''(
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_port_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True) ] + VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]) # u'$emit_cpp_port_params([ $param_portNum ] + $port_params[$instance])' on line 269, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_port_params([ $param_portNum ] + $port_params[$instance])')) # from line 269, col 1.
                    write(u'''
    )
''')
                write(u'''  {
    FW_ASSERT(portNum < this->getNum_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 273, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 273, col 41.
                write(u'''(),static_cast<AssertArg>(portNum));
''')
                if VFSL([locals()]+SL+[globals(), builtin],"serial_type",True): # generated from line 274, col 5
                    write(u'''    this->m_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 275, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 275, col 16.
                    write(u'''[portNum].invokeSerial(Buffer);
''')
                else: # generated from line 276, col 5
                    write(u'''    FW_ASSERT(portNum < this->getNum_to_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 277, col 41
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 277, col 41.
                    write(u'''(),static_cast<AssertArg>(portNum));
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 278, col 7
                        write(u'''    this->m_to_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 279, col 16
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 279, col 16.
                        write(u'''[portNum].invoke(
''')
                    else: # generated from line 280, col 7
                        write(u'''    return this->m_to_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 281, col 23
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 281, col 23.
                        write(u'''[portNum].invoke(
''')
                    write(u'''        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)] # u'$port_arg_strs[$instance]' on line 283, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$port_arg_strs[$instance]')) # from line 283, col 9.
                    write(u'''
    );
''')
                write(u'''  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_input_ports",True): # generated from line 290, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Connection status for to ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 295, col 3
                write(u'''  bool ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 296, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 296, col 8.
                write(u''' ::
    isConnected_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 297, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 297, col 20.
                write(u'''(const NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(portNum < this->getNum_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 299, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 299, col 41.
                write(u'''(), static_cast<AssertArg>(portNum));
    return this->m_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 300, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 300, col 23.
                write(u'''[portNum].isConnected();
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 305, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Getters for from ports
  // ----------------------------------------------------------------------
 
''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 310, col 3
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 312, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 315, col 5
                    write(u'''  ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 316, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 316, col 3.
                    write(u'''::InputSerializePort *''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 316, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 316, col 37.
                    write(u''' ::
''')
                else: # generated from line 317, col 5
                    write(u'''  ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 318, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 318, col 3.
                    write(u'''::Input''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 318, col 22
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 318, col 22.
                    write(u'''Port *''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 318, col 35
                    if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 318, col 35.
                    write(u''' ::
''')
                write(u'''    get_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 320, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 320, col 14.
                write(u'''(const NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(portNum < this->getNum_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 322, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 322, col 43.
                write(u'''(),static_cast<AssertArg>(portNum));
    return &this->m_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 323, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 323, col 26.
                write(u'''[portNum];
  }
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 325, col 5
                    write(u'''#endif
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_from_ports",True): # generated from line 331, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Static functions for from ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 336, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_params = len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0
                args = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_return_type = VFSL([locals()]+SL+[globals(), builtin],"return_type",True)[:4] == "void"
                write(u'''  ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 342, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 342, col 3.
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 342, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 342, col 17.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 343, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 343, col 10.
                write(u'''_static(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_port_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_callComp",True), VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True)] + VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_cpp_port_params([ $param_callComp, $param_portNum] + $params)' on line 344, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_port_params([ $param_callComp, $param_portNum] + $params)')) # from line 344, col 1.
                write(u'''
    )
  {
    FW_ASSERT(callComp);
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 348, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 348, col 5.
                write(u'''* _testerBase = 
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 349, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 349, col 19.
                write(u'''*>(callComp);
''')
                if VFSL([locals()]+SL+[globals(), builtin],"void_params",True) and VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 350, col 5
                    write(u'''    _testerBase->from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 351, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 351, col 23.
                    write(u'''_handlerBase(portNum);
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"void_params",True): # generated from line 352, col 5
                    write(u'''    return _testerBase->from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 353, col 30
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 353, col 30.
                    write(u'''_handlerBase(portNum);
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 354, col 5
                    write(u'''    _testerBase->from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 355, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 355, col 23.
                    write(u'''_handlerBase(
        portNum,
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 357, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 357, col 9.
                    write(u'''
    );
''')
                else: # generated from line 359, col 5
                    write(u'''    return _testerBase->from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 360, col 30
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 360, col 30.
                    write(u'''_handlerBase(
        portNum,
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 362, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 362, col 9.
                    write(u'''
    );
''')
                write(u'''  }

''')
            for instance, sync, priority, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_output_ports",True): # generated from line 368, col 3
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 369, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 369, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 370, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 370, col 10.
                write(u'''_static(
      Fw::PassiveComponentBase *const callComp, //!< The component instance
      const NATIVE_INT_TYPE portNum, //!< The port number
      Fw::SerializeBufferBase& Buffer //!< serialized data buffer
    )
  {
    FW_ASSERT(callComp);
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 377, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 377, col 5.
                write(u'''* _testerBase = 
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 378, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 378, col 19.
                write(u'''*>(callComp);

    _testerBase->from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 380, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 380, col 23.
                write(u'''_handlerBase(
        portNum,
        Buffer
    );
  }  

  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 386, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 386, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 387, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 387, col 10.
                write(u'''_handlerBase(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 388, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 388, col 34.
                write(u'''
        Fw::SerializeBufferBase &Buffer ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 389, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 389, col 41.
                write(u'''
    )
  {
    FW_ASSERT(portNum < this->getNum_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 392, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 392, col 43.
                write(u'''(),static_cast<AssertArg>(portNum));
    this->from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 393, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 393, col 16.
                write(u'''_handler(
        portNum,
        Buffer
    );
  } 
   
''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 400, col 3
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 401, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 401, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 402, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 402, col 10.
                write(u'''_static(
        Fw::PassiveComponentBase *const component,
        const NATIVE_INT_TYPE portNum,
        const FwOpcodeType opCode,
        const U32 cmdSeq,
        const Fw::CommandResponse response
    )
  {
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 410, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 410, col 5.
                write(u'''* _testerBase =
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 411, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 411, col 19.
                write(u'''*>(component);
    _testerBase->cmdResponseIn(opCode, cmdSeq, response);
  }

  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 415, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 415, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"CmdReg_Name",True) # u'${CmdReg_Name}' on line 416, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${CmdReg_Name}')) # from line 416, col 10.
                write(u'''_static(
        Fw::PassiveComponentBase *const component,
        const NATIVE_INT_TYPE portNum,
        const FwOpcodeType opCode
    )
  {

  }

''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 426, col 3
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 427, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 427, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Tlm_Name",True) # u'${Tlm_Name}' on line 428, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${Tlm_Name}')) # from line 428, col 10.
                write(u'''_static(
        Fw::PassiveComponentBase *const component,
        NATIVE_INT_TYPE portNum,
        FwChanIdType id,
        Fw::Time &timeTag,
        Fw::TlmBuffer &val
    )
  {
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 436, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 436, col 5.
                write(u'''* _testerBase =
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 437, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 437, col 19.
                write(u'''*>(component);
    _testerBase->dispatchTlm(id, timeTag, val);
  }

''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 442, col 3
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 443, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 443, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LogEvent_Name",True) # u'${LogEvent_Name}' on line 444, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${LogEvent_Name}')) # from line 444, col 10.
                write(u'''_static(
        Fw::PassiveComponentBase *const component,
        const NATIVE_INT_TYPE portNum,
        FwEventIdType id,
        Fw::Time &timeTag,
        Fw::LogSeverity severity,
        Fw::LogBuffer &args
    )
  {
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 453, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 453, col 5.
                write(u'''* _testerBase =
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 454, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 454, col 19.
                write(u'''*>(component);
    _testerBase->dispatchEvents(id, timeTag, severity, args);
  }

''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 459, col 3
                write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 461, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 461, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LogTextEvent_Name",True) # u'${LogTextEvent_Name}' on line 462, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${LogTextEvent_Name}')) # from line 462, col 10.
                write(u'''_static(
        Fw::PassiveComponentBase *const component,
        const NATIVE_INT_TYPE portNum,
        FwEventIdType id,
        Fw::Time &timeTag,
        Fw::TextLogSeverity severity,
        Fw::TextLogString &text
    )
  {
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 471, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 471, col 5.
                write(u'''* _testerBase =
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 472, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 472, col 19.
                write(u'''*>(component);
    _testerBase->textLogIn(id,timeTag,severity,text);
  }
#endif

''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_events",True) or VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 478, col 3
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 479, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 479, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Time_Name",True) # u'${Time_Name}' on line 480, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${Time_Name}')) # from line 480, col 10.
                write(u'''_static(
        Fw::PassiveComponentBase *const component,
        const NATIVE_INT_TYPE portNum,
        Fw::Time& time
    )
  {
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 486, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 486, col 5.
                write(u'''* _testerBase =
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 487, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 487, col 19.
                write(u'''*>(component);
    time = _testerBase->m_testTime;
  }

''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 492, col 3
                write(u'''
  Fw::ParamValid ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 494, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 494, col 18.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"ParamGet_Name",True) # u'${ParamGet_Name}' on line 495, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${ParamGet_Name}')) # from line 495, col 10.
                write(u'''_static(
        Fw::PassiveComponentBase* component,
        NATIVE_INT_TYPE portNum,
        FwPrmIdType id,
        Fw::ParamBuffer &val
    )
  {
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 502, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 502, col 5.
                write(u'''* _testerBase = 
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 503, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 503, col 19.
                write(u'''*>(component);

    Fw::SerializeStatus _status;
    Fw::ParamValid _ret = Fw::PARAM_VALID;
    val.resetSer();

    const U32 idBase = _testerBase->getIdBase();
    FW_ASSERT(id >= idBase, id, idBase);

    switch (id - idBase) {
''')
                for ids, prm_name, type, oset, osave, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 513, col 5
                    for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True) : # generated from line 514, col 7
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'${id}' on line 515, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 515, col 12.
                        write(u''':
''')
                    write(u'''      {
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "ENUM": # generated from line 518, col 7
                        write(u'''        _status = val.serialize(
            static_cast<FwEnumStoreType>(_testerBase->m_param_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 520, col 63
                        if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 520, col 63.
                        write(u''')
        );
''')
                    else: # generated from line 522, col 7
                        write(u'''        _status = val.serialize(_testerBase->m_param_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 523, col 54
                        if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 523, col 54.
                        write(u''');
''')
                    write(u'''        _ret = _testerBase->m_param_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 525, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 525, col 37.
                    write(u'''_valid;
        FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_status)
        );
      }
        break;
''')
                write(u'''      default:
        FW_ASSERT(id);
        break;
    }

    return _ret;
  }

  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 541, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 541, col 8.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"ParamSet_Name",True) # u'${ParamSet_Name}' on line 542, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${ParamSet_Name}')) # from line 542, col 10.
                write(u'''_static(
        Fw::PassiveComponentBase* component,
        NATIVE_INT_TYPE portNum,
        FwPrmIdType id,
        Fw::ParamBuffer &val
    )
  {
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 549, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 549, col 5.
                write(u'''* _testerBase =
      static_cast<''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 550, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 550, col 19.
                write(u"""*>(component);

    Fw::SerializeStatus _status;
    val.resetDeser();

    // This is exercised completely in autocode,
    // so just verify that it works. If it doesn't
    // it probably is an autocoder error.

    const U32 idBase = _testerBase->getIdBase();
    FW_ASSERT(id >= idBase, id, idBase);

    switch (id - idBase) {
""")
                for ids, prmname, type, oset, osave, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 563, col 5
                    for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 564, col 7
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'${id}' on line 565, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 565, col 12.
                        write(u''':
''')
                    write(u'''      {
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 568, col 7
                        write(u'''        FwEnumStoreType ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 569, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 569, col 25.
                        write(u'''Val;
        _status = val.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 570, col 35
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 570, col 35.
                        write(u'''Val);
        FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_status)
        );
        FW_ASSERT(
            ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 576, col 13
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 576, col 13.
                        write(u'''Val ==
            static_cast<FwEnumStoreType>(_testerBase->m_param_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 577, col 63
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 577, col 63.
                        write(u''')
        );
''')
                    elif VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 579, col 7
                        write(u'''        Fw::ParamString ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 580, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 580, col 25.
                        write(u'''Val;
        _status = val.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 581, col 35
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 581, col 35.
                        write(u'''Val);
        FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,static_cast<AssertArg>(_status)
        );
        FW_ASSERT(
            ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 586, col 13
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 586, col 13.
                        write(u'''Val == 
            _testerBase->m_param_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 587, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 587, col 34.
                        write(u'''
        );
''')
                    else: # generated from line 589, col 7
                        write(u'''        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 590, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 590, col 9.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 590, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 590, col 17.
                        write(u'''Val;
        _status = val.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 591, col 35
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 591, col 35.
                        write(u'''Val);
        FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_status)
        );
        FW_ASSERT(
            ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 597, col 13
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 597, col 13.
                        write(u'''Val == 
            _testerBase->m_param_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 598, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 598, col 34.
                        write(u'''
        );
''')
                    write(u'''        break;
      }

''')
                write(u'''      default: {
        FW_ASSERT(id);
        break;
      }

    }
  }

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 615, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Histories for typed from ports
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 620, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 620, col 8.
            write(u''' ::
    clearFromPortHistory(void)
  {
    this->fromPortHistorySize = 0;
''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 624, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 626, col 5
                    write(u'''    this->fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 627, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 627, col 27.
                    write(u'''->clear();
''')
                else: # generated from line 628, col 5
                    write(u'''    this->fromPortHistorySize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 629, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 629, col 31.
                    write(u''' = 0;
''')
            write(u'''  }

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 634, col 3
                write(u'''  // ---------------------------------------------------------------------- 
  // From port: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 636, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 636, col 17.
                write(u'''
  // ---------------------------------------------------------------------- 

''')
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 640, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 640, col 8.
                write(u''' ::
    pushFromPortEntry_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 641, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 641, col 23.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_port_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_cpp_port_params($params)' on line 642, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_port_params($params)')) # from line 642, col 1.
                write(u'''
    )
  {
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 645, col 5
                    write(u'''    FromPortEntry_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 646, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 646, col 19.
                    write(u''' _e = {
      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)] # u'$port_arg_strs[$instance]' on line 647, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$port_arg_strs[$instance]')) # from line 647, col 7.
                    write(u'''
    };
    this->fromPortHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 649, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 649, col 27.
                    write(u'''->push_back(_e);
''')
                else: # generated from line 650, col 5
                    write(u'''    ++this->fromPortHistorySize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 651, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 651, col 33.
                    write(u''';
''')
                write(u'''    ++this->fromPortHistorySize;
  }

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 658, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Handler base functions for from ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True): # generated from line 663, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_params = len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0
                args = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_return_type = VFSL([locals()]+SL+[globals(), builtin],"return_type",True)[:4] == "void"
                write(u'''  ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 669, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 669, col 3.
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 669, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 669, col 17.
                write(u''' ::
    from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 670, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 670, col 10.
                write(u'''_handlerBase(
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 671, col 5
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True), VFSL([locals()]+SL+[globals(), builtin],"param_Buffer",True) ]) # u'$emit_cpp_params([ $param_portNum, $param_Buffer ])' on line 672, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_portNum, $param_Buffer ])')) # from line 672, col 1.
                    write(u'''
''')
                else: # generated from line 673, col 5
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_port_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_portNum",True) ] + VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]) # u'$emit_cpp_port_params([ $param_portNum ] + $port_params[$instance])' on line 674, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_port_params([ $param_portNum ] + $port_params[$instance])')) # from line 674, col 1.
                    write(u'''
''')
                write(u'''    )
  {
    FW_ASSERT(portNum < this->getNum_from_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 678, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 678, col 43.
                write(u'''(),static_cast<AssertArg>(portNum));
''')
                if VFSL([locals()]+SL+[globals(), builtin],"void_params",True) and VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 679, col 5
                    write(u'''    this->from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 680, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 680, col 16.
                    write(u'''_handler(portNum);
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"void_params",True): # generated from line 681, col 5
                    write(u'''    return this->from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 682, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 682, col 23.
                    write(u'''_handler(portNum);
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 683, col 5
                    write(u'''    this->from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 684, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 684, col 16.
                    write(u'''_handler(
        portNum,
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 686, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 686, col 9.
                    write(u'''
    );
''')
                else: # generated from line 688, col 5
                    write(u'''    return this->from_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 689, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 689, col 23.
                    write(u'''_handler(
        portNum,
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 691, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 691, col 9.
                    write(u'''
    );
''')
                write(u'''  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 698, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Command response handling
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 703, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 703, col 8.
            write(u''' ::
    cmdResponseIn(
        const FwOpcodeType opCode,
        const U32 seq,
        const Fw::CommandResponse response
    )
  {
    CmdResponse e = { opCode, seq, response };
    this->cmdResponseHistory->push_back(e);
  }

''')
            for mnemonic, opcodes, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 714, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"command_params",True)[VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True)]
                write(u'''  // ---------------------------------------------------------------------- 
  // Command: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'$mnemonic' on line 717, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'$mnemonic')) # from line 717, col 15.
                write(u'''
  // ---------------------------------------------------------------------- 

  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 720, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 720, col 8.
                write(u''' ::
    sendCmd_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 721, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 721, col 13.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_instance",True), VFSL([locals()]+SL+[globals(), builtin],"param_cmdSeq",True) ] + VFSL([locals()]+SL+[globals(), builtin],"get_command_params",False)(VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True))) # u'$emit_cpp_params([ $param_instance, $param_cmdSeq ] + $get_command_params($mnemonic))' on line 722, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_instance, $param_cmdSeq ] + $get_command_params($mnemonic))')) # from line 722, col 1.
                write(u'''
    )
  {

    // Serialize arguments

    Fw::CmdArgBuffer buff;
''')
                args = VFSL([locals()]+SL+[globals(), builtin],"command_args",True)[VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True)]
                if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)): # generated from line 730, col 5
                    write(u'''    Fw::SerializeStatus _status;
''')
                for arg_name, arg_type, comment, is_enum in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 733, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"is_enum",True) == "enum": # generated from line 734, col 7
                        write(u'''    _status = buff.serialize((FwEnumStoreType) ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 735, col 48
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 735, col 48.
                        write(u''');
''')
                    else: # generated from line 736, col 7
                        write(u'''    _status = buff.serialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 737, col 30
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 737, col 30.
                        write(u''');
''')
                    write(u'''    FW_ASSERT(_status == Fw::FW_SERIALIZE_OK,static_cast<AssertArg>(_status));
''')
                write(u'''
    // Call output command port
    
    FwOpcodeType _opcode;
    const U32 idBase = this->getIdBase();
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"opcodes",True)) == 1: # generated from line 746, col 5
                    write(u'''    _opcode = ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 747, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 747, col 15.
                    write(u'''::OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic.upper",True) # u'${mnemonic.upper}' on line 747, col 41
                    if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper}')) # from line 747, col 41.
                    write(u''' + idBase;
''')
                else: # generated from line 748, col 5
                    write(u'''    switch (instance) {
''')
                    inst = 0
                    for opcode in VFSL([locals()]+SL+[globals(), builtin],"opcodes",True): # generated from line 751, col 7
                        write(u'''       case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 752, col 13
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 752, col 13.
                        write(u''':
          _opcode = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 753, col 21
                        if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 753, col 21.
                        write(u'''::OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic.upper",True) # u'${mnemonic.upper}' on line 753, col 47
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper}')) # from line 753, col 47.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 753, col 65
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 753, col 65.
                        write(u''' + idBase;
          break;
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                    write(u'''       default:
          FW_ASSERT(0,instance);
          break;
    }
''')
                write(u'''
    if (this->m_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 763, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 763, col 20.
                write(u'''[0].isConnected()) {
      this->m_to_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 764, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 764, col 18.
                write(u'''[0].invoke(
          _opcode,
          cmdSeq,
          buff
      );
    }
    else {
      printf("Test Command Output port not connected!\\n");
    }

  }

''')
            write(u'''  
  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 778, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 778, col 8.
            write(u''' ::
    sendRawCmd(FwOpcodeType opcode, U32 cmdSeq, Fw::CmdArgBuffer& args) {
       
    const U32 idBase = this->getIdBase();   
    FwOpcodeType _opcode = opcode + idBase;
    if (this->m_to_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 783, col 20
            if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 783, col 20.
            write(u'''[0].isConnected()) {
      this->m_to_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 784, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 784, col 18.
            write(u'''[0].invoke(
          _opcode,
          cmdSeq,
          args
      );
    }
    else {
      printf("Test Command Output port not connected!\\n");
    }
        
  }
  
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 797, col 1
            write(u'''  // ----------------------------------------------------------------------
  // History 
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 802, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 802, col 8.
            write(u''' ::
    clearHistory()
  {
''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 805, col 3
                write(u'''    this->cmdResponseHistory->clear();
''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 808, col 3
                write(u'''    this->clearTlm();
''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 811, col 3
                write(u'''    this->textLogHistory->clear();
    this->clearEvents();
''')
            if len(VFSL([locals()]+SL+[globals(), builtin],"typed_user_output_ports",True)) > 0: # generated from line 815, col 3
                write(u'''    this->clearFromPortHistory();
''')
            write(u'''  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True) or VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 821, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 826, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 826, col 8.
            write(u''' ::
    setTestTime(const Fw::Time& time)
  {
    this->m_testTime = time;
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 833, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Telemetry dispatch
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 838, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 838, col 8.
            write(u''' ::
    dispatchTlm(
        const FwChanIdType id,
        const Fw::Time &timeTag,
        Fw::TlmBuffer &val
    )
  {

    val.resetDeser();

    const U32 idBase = this->getIdBase();
    FW_ASSERT(id >= idBase, id, idBase);

    switch (id - idBase) {

''')
            for ids, tlm_name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 853, col 3
                inst = 0
                for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 855, col 7
                    if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 856, col 10
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 857, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 857, col 12.
                        write(u'''::CHANNELID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name.upper",True) # u'${tlm_name.upper}' on line 857, col 41
                        if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name.upper}')) # from line 857, col 41.
                        write(u''':
''')
                    else: # generated from line 858, col 10
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 859, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 859, col 12.
                        write(u'''::CHANNELID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name.upper",True) # u'${tlm_name.upper}' on line 859, col 41
                        if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name.upper}')) # from line 859, col 41.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 859, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 859, col 59.
                        write(u''':
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                write(u'''      {
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 864, col 5
                    write(u'''        Fw::TlmString arg;
        const Fw::SerializeStatus _status = val.deserialize(arg);
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 867, col 5
                    write(u'''        FwEnumStoreType ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 868, col 25
                    if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 868, col 25.
                    write(u'''arg;
        const Fw::SerializeStatus _status = val.deserialize(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 869, col 61
                    if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 869, col 61.
                    write(u'''arg);
''')
                else: # generated from line 870, col 5
                    write(u'''        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 871, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 871, col 9.
                    write(u''' arg;
        const Fw::SerializeStatus _status = val.deserialize(arg);
''')
                write(u'''        if (_status != Fw::FW_SERIALIZE_OK) {
          printf("Error deserializing ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 875, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 875, col 39.
                write(u''': %d\\n", _status);
          return;
        }
''')
                if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 878, col 5
                    write(u'''        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 879, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 879, col 9.
                    write(u'''::''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 879, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 879, col 28.
                    write(u''' arg = 
          static_cast<''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 880, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 880, col 23.
                    write(u'''::''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 880, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 880, col 42.
                    write(u'''>(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 880, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 880, col 51.
                    write(u'''arg);
''')
                write(u'''        this->tlmInput_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 882, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 882, col 24.
                write(u'''(timeTag, arg);
        break;
      }

''')
            write(u'''      default: {
        FW_ASSERT(0, id);
        break;
      }

    }

  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 896, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 896, col 8.
            write(u''' ::
    clearTlm(void)
  {
    this->tlmSize = 0;
''')
            for ids, tlm_name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 900, col 3
                write(u'''    this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 901, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 901, col 22.
                write(u'''->clear();
''')
            write(u'''  }

''')
            for ids, tlm_name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 905, col 3
                write(u'''  // ---------------------------------------------------------------------- 
  // Channel: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'$tlm_name' on line 907, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'$tlm_name')) # from line 907, col 15.
                write(u'''
  // ---------------------------------------------------------------------- 

''')
                param_val = VFSL([locals()]+SL+[globals(), builtin],"get_param_val_Tlm",False)(VFSL([locals()]+SL+[globals(), builtin],"type",True), VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True))
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 911, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 911, col 8.
                write(u''' ::
    tlmInput_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 912, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 912, col 14.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_const_timeTag",True), VFSL([locals()]+SL+[globals(), builtin],"param_val",True) ]) # u'$emit_cpp_params([ $param_const_timeTag, $param_val ])' on line 913, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_const_timeTag, $param_val ])')) # from line 913, col 1.
                write(u'''
    )
  {
    TlmEntry_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 916, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 916, col 14.
                write(u''' e = { timeTag, val };
    this->tlmHistory_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlm_name",True) # u'${tlm_name}' on line 917, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${tlm_name}')) # from line 917, col 22.
                write(u'''->push_back(e);
    ++this->tlmSize;
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 923, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Event dispatch
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 928, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 928, col 8.
            write(u''' ::
    dispatchEvents(
        const FwEventIdType id,
        Fw::Time &timeTag,
        const Fw::LogSeverity severity,
        Fw::LogBuffer &args
    )
  {

    args.resetDeser();

    const U32 idBase = this->getIdBase();
    FW_ASSERT(id >= idBase, id, idBase);
    switch (id - idBase) {

''')
            for ids, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 943, col 3
                inst = 0
                for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 945, col 5
                    if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 946, col 7
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 947, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 947, col 12.
                        write(u'''::EVENTID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"event_name.upper",True) # u'${event_name.upper}' on line 947, col 39
                        if _v is not None: write(_filter(_v, rawExpr=u'${event_name.upper}')) # from line 947, col 39.
                        write(u''': 
''')
                    else: # generated from line 948, col 7
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 949, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 949, col 12.
                        write(u'''::EVENTID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"event_name.upper",True) # u'${event_name.upper}' on line 949, col 39
                        if _v is not None: write(_filter(_v, rawExpr=u'${event_name.upper}')) # from line 949, col 39.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 949, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 949, col 59.
                        write(u''': 
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                write(u'''      {

''')
                args = VFSL([locals()]+SL+[globals(), builtin],"event_args",True)[VFSL([locals()]+SL+[globals(), builtin],"event_name",True)]
                if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)): # generated from line 956, col 5
                    write(u'''        Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
#if FW_AMPCS_COMPATIBLE
        // Deserialize the number of arguments.
        U8 _numArgs;
        _status = args.deserialize(_numArgs);
        FW_ASSERT(
          _status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_status)
        );
        // verify they match expected.
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"severity",True) == "FATAL": # generated from line 967, col 1
                        write(u'''        FW_ASSERT(_numArgs == ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$len($args)' on line 968, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u'$len($args)')) # from line 968, col 31.
                        write(u'''+1,_numArgs,''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$len($args)' on line 968, col 54
                        if _v is not None: write(_filter(_v, rawExpr=u'$len($args)')) # from line 968, col 54.
                        write(u'''+1);
        // For FATAL, there is a stack size of 4 and a dummy entry.
        U8 stackArgLen;
        _status = args.deserialize(stackArgLen);
        FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_status)
        );
        FW_ASSERT(4 == stackArgLen,stackArgLen);
\t\tU32 dummyStackArg;        
        _status = args.deserialize(dummyStackArg);
        FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_status)
        );
        FW_ASSERT(0 == dummyStackArg,dummyStackArg);
''')
                    else       : # generated from line 984, col 1
                        write(u'''        FW_ASSERT(_numArgs == ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$len($args)' on line 985, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u'$len($args)')) # from line 985, col 31.
                        write(u''',_numArgs,''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$len($args)' on line 985, col 52
                        if _v is not None: write(_filter(_v, rawExpr=u'$len($args)')) # from line 985, col 52.
                        write(u''');
''')
                    write(u'''        
#endif    
''')
                else: # generated from line 989, col 5
                    write(u'''#if FW_AMPCS_COMPATIBLE
        // For AMPCS, decode zero arguments
        Fw::SerializeStatus _zero_status = Fw::FW_SERIALIZE_OK;
        U8 _noArgs;
        _zero_status = args.deserialize(_noArgs);
        FW_ASSERT(
            _zero_status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_zero_status)
        );
#endif    
''')
                for arg_name, type, comment, size, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 1001, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 1002, col 7
                        write(u'''#if FW_AMPCS_COMPATIBLE
        {
          // Deserialize the argument size
          U8 _argSize;
          _status = args.deserialize(_argSize);
          FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_status)
          );
          FW_ASSERT(_argSize == sizeof(FwEnumStoreType),_argSize,sizeof(FwEnumStoreType));
        }
#endif      
''')
                        type = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) + "::" + VFSL([locals()]+SL+[globals(), builtin],"type",True)
                        write(u'''        FwEnumStoreType ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1016, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1016, col 25.
                        write(u'''Int;
        _status = args.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1017, col 36
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1017, col 36.
                        write(u'''Int);
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1018, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1018, col 9.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1018, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1018, col 17.
                        write(u''' = static_cast<''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1018, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1018, col 43.
                        write(u'''>(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1018, col 52
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1018, col 52.
                        write(u'''Int);
''')
                    elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "string": # generated from line 1019, col 7
                        write(u'''        Fw::LogStringArg ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1020, col 26
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1020, col 26.
                        write(u''';
        _status = args.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1021, col 36
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1021, col 36.
                        write(u''');
''')
                    else: # generated from line 1022, col 7
                        write(u'''        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1023, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1023, col 9.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1023, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1023, col 17.
                        write(u''';
#if FW_AMPCS_COMPATIBLE
        {
          // Deserialize the argument size
          U8 _argSize;
          _status = args.deserialize(_argSize);
          FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_status)
          );
          FW_ASSERT(_argSize == sizeof(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1033, col 40
                        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1033, col 40.
                        write(u'''),_argSize,sizeof(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1033, col 65
                        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1033, col 65.
                        write(u'''));
        }
#endif      
        _status = args.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1036, col 36
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1036, col 36.
                        write(u''');
''')
                    write(u'''        FW_ASSERT(
            _status == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(_status)
        );

''')
                write(u'''        this->logIn_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 1044, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 1044, col 21.
                write(u'''_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 1044, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 1044, col 33.
                write(u'''(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_args_str",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$event_args_str($args)' on line 1044, col 47
                if _v is not None: write(_filter(_v, rawExpr=u'$event_args_str($args)')) # from line 1044, col 47.
                write(u''');

        break;

      }

''')
            write(u'''      default: {
        FW_ASSERT(0, id);
        break;
      }

    }

  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 1060, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 1060, col 8.
            write(u''' ::
    clearEvents(void)
  {
    this->eventsSize = 0;
''')
            for ids, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 1064, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"event_params",True)[VFSL([locals()]+SL+[globals(), builtin],"event_name",True)]
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 1066, col 5
                    write(u'''    this->eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 1067, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 1067, col 24.
                    write(u'''->clear();
''')
                else: # generated from line 1068, col 5
                    write(u'''    this->eventsSize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 1069, col 22
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 1069, col 22.
                    write(u''' = 0;
''')
            write(u'''  }

#if FW_ENABLE_TEXT_LOGGING

  // ----------------------------------------------------------------------
  // Text events 
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 1080, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 1080, col 8.
            write(u''' ::
    textLogIn(
        const U32 id,
        Fw::Time &timeTag,
        const Fw::TextLogSeverity severity,
        const Fw::TextLogString &text
    )
  {
    TextLogEntry e = { id, timeTag, severity, text };
    textLogHistory->push_back(e);
  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 1092, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 1092, col 8.
            write(u''' ::
    printTextLogHistoryEntry(
        const TextLogEntry& e,
        FILE* file
    )
  {
    const char *severityString = "UNKNOWN";
    switch (e.severity) {
      case Fw::LOG_FATAL:
        severityString = "FATAL";
        break;
      case Fw::LOG_WARNING_HI:
        severityString = "WARNING_HI";
        break;
      case Fw::LOG_WARNING_LO:
        severityString = "WARNING_LO";
        break;
      case Fw::LOG_COMMAND:
        severityString = "COMMAND";
        break;
      case Fw::LOG_ACTIVITY_HI:
        severityString = "ACTIVITY_HI";
        break;
      case Fw::LOG_ACTIVITY_LO:
        severityString = "ACTIVITY_LO";
        break;
      case Fw::LOG_DIAGNOSTIC:
       severityString = "DIAGNOSTIC";
        break;
      default:
        severityString = "SEVERITY ERROR";
        break;
    }

    fprintf(
        file,
        "EVENT: (%d) (%d:%d,%d) %s: %s\\n",
        e.id,
        const_cast<TextLogEntry&>(e).timeTag.getTimeBase(),
        const_cast<TextLogEntry&>(e).timeTag.getSeconds(),
        const_cast<TextLogEntry&>(e).timeTag.getUSeconds(),
        severityString,
        e.text.toChar()
    );

  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 1139, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 1139, col 8.
            write(u''' ::
    printTextLogHistory(FILE *file) 
  {
    for (U32 i = 0; i < this->textLogHistory->size(); ++i) {
      this->printTextLogHistoryEntry(
          this->textLogHistory->at(i), 
          file
      );
    }
  }

#endif

''')
            for ids, event_name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 1152, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"get_event_params",False)(VFSL([locals()]+SL+[globals(), builtin],"event_name",True))
                write(u'''  // ----------------------------------------------------------------------
  // Event: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'$event_name' on line 1155, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'$event_name')) # from line 1155, col 13.
                write(u''' 
  // ----------------------------------------------------------------------

  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 1158, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 1158, col 8.
                write(u''' ::
    logIn_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 1159, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 1159, col 11.
                write(u'''_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 1159, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 1159, col 23.
                write(u'''(
''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)(VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_cpp_params($params)' on line 1160, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params($params)')) # from line 1160, col 1.
                write(u'''
    )
  {
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) > 0: # generated from line 1163, col 5
                    write(u'''    EventEntry_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 1164, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 1164, col 16.
                    write(u''' e = {
      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_args_str",False)(VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$event_args_str($params)' on line 1165, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'$event_args_str($params)')) # from line 1165, col 7.
                    write(u'''
    };
    eventHistory_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 1167, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 1167, col 18.
                    write(u'''->push_back(e);
''')
                else: # generated from line 1168, col 5
                    write(u'''    ++this->eventsSize_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"event_name",True) # u'${event_name}' on line 1169, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'${event_name}')) # from line 1169, col 24.
                    write(u''';
''')
                write(u'''    ++this->eventsSize;
  }

''')
        for ids, prm_name, type, oset, osave, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 1176, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Parameter ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'$prm_name' on line 1178, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$prm_name')) # from line 1178, col 16.
            write(u''' 
  // ----------------------------------------------------------------------

''')
            param_val = VFSL([locals()]+SL+[globals(), builtin],"get_param_val_Param",False)(VFSL([locals()]+SL+[globals(), builtin],"type",True), VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True))
            write(u'''  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 1182, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 1182, col 8.
            write(u''' ::
    paramSet_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 1183, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 1183, col 14.
            write(u'''(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_cpp_params",False)([ VFSL([locals()]+SL+[globals(), builtin],"param_val",True), VFSL([locals()]+SL+[globals(), builtin],"param_valid",True) ]) # u'$emit_cpp_params([ $param_val, $param_valid ])' on line 1184, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_cpp_params([ $param_val, $param_valid ])')) # from line 1184, col 1.
            write(u'''
    )
  {
    this->m_param_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 1187, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 1187, col 19.
            write(u''' = val;
    this->m_param_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 1188, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 1188, col 19.
            write(u'''_valid = valid;
  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 1191, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 1191, col 8.
            write(u''' ::
    paramSend_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 1192, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 1192, col 15.
            write(u'''(
        NATIVE_INT_TYPE instance, 
        U32 cmdSeq
    )
  {

    // Build command for parameter set

    Fw::CmdArgBuffer args;
''')
            if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 1201, col 3
                write(u'''    FW_ASSERT(
        args.serialize(
            static_cast<FwEnumStoreType>(this->m_param_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 1204, col 56
                if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 1204, col 56.
                write(u''')
        ) == Fw::FW_SERIALIZE_OK
    );
''')
            else: # generated from line 1207, col 3
                write(u'''    FW_ASSERT(
        args.serialize(
            this->m_param_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 1210, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 1210, col 27.
                write(u'''
        ) == Fw::FW_SERIALIZE_OK
    );
''')
            write(u'''    const U32 idBase = this->getIdBase();
    FwOpcodeType _prmOpcode;
''')
            if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 1216, col 3
                write(u'''    _prmOpcode =  ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 1217, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 1217, col 19.
                write(u'''::OPCODE_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name.upper",True) # u'${prm_name.upper}' on line 1217, col 45
                if _v is not None: write(_filter(_v, rawExpr=u'${prm_name.upper}')) # from line 1217, col 45.
                write(u'''_SET + idBase;
''')
            else: # generated from line 1218, col 3
                inst = 0
                write(u'''    switch (instance) {
''')
                for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 1221, col 5
                    write(u'''      case ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 1222, col 12
                    if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 1222, col 12.
                    write(u''':
         _prmOpcode =  ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 1223, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 1223, col 24.
                    write(u'''::OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name.upper",True) # u'${prm_name.upper}' on line 1223, col 50
                    if _v is not None: write(_filter(_v, rawExpr=u'${prm_name.upper}')) # from line 1223, col 50.
                    write(u'''_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 1223, col 68
                    if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 1223, col 68.
                    write(u'''_SET + idBase;
         break;
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                write(u'''      default:
         FW_ASSERT(0,instance);
         break;
    }
''')
            write(u'''    if (not this->m_to_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 1232, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 1232, col 24.
            write(u'''[0].isConnected()) {
      printf("Test Command Output port not connected!\\n");
    }
    else {
      this->m_to_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 1236, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 1236, col 18.
            write(u'''[0].invoke(
          _prmOpcode,
          cmdSeq,
          args
      );
    }

  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"tester_base",True) # u'${tester_base}' on line 1245, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${tester_base}')) # from line 1245, col 8.
            write(u''' ::
    paramSave_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name",True) # u'${prm_name}' on line 1246, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${prm_name}')) # from line 1246, col 15.
            write(u''' (
        NATIVE_INT_TYPE instance, 
        U32 cmdSeq
    )
    
  {
    Fw::CmdArgBuffer args;
    FwOpcodeType _prmOpcode;
    const U32 idBase = this->getIdBase();
''')
            if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 1255, col 5
                write(u'''    _prmOpcode = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 1256, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 1256, col 18.
                write(u'''::OPCODE_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name.upper",True) # u'${prm_name.upper}' on line 1256, col 44
                if _v is not None: write(_filter(_v, rawExpr=u'${prm_name.upper}')) # from line 1256, col 44.
                write(u'''_SAVE + idBase;
''')
            else: # generated from line 1257, col 5
                inst = 0
                write(u'''     switch (instance) {
''')
                for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 1260, col 7
                    write(u'''        case ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 1261, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 1261, col 14.
                    write(u''':
          _prmOpcode = ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"component_base",True) # u'${component_base}' on line 1262, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'${component_base}')) # from line 1262, col 24.
                    write(u'''::OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prm_name.upper",True) # u'${prm_name.upper}' on line 1262, col 50
                    if _v is not None: write(_filter(_v, rawExpr=u'${prm_name.upper}')) # from line 1262, col 50.
                    write(u'''_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 1262, col 68
                    if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 1262, col 68.
                    write(u'''_SAVE + idBase;
          break;
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                write(u'''        default:
          FW_ASSERT(0,instance);
          break;
    } 
''')
            write(u'''    if (not this->m_to_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 1271, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 1271, col 24.
            write(u'''[0].isConnected()) {
      printf("Test Command Output port not connected!\\n");
    }
    else {
      this->m_to_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 1275, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 1275, col 18.
            write(u'''[0].invoke(
          _prmOpcode, 
          cmdSeq, 
          args
      );
    }
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 1284, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 1285, col 2
                write(u'''} // end namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 1286, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 1286, col 20.
                write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=cpp()).run()


