#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930769.326565
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:49 2019'
__CHEETAH_src__ = 'HtmlDocPage.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class HtmlDocPage(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(HtmlDocPage, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<!DOCTYPE html>
<html>
<head>
<title>''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 4, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 4, col 8.
        write(u''' Component Dictionary</title>
</head>
<body>

<style>
table, th, td {
    border: 1px solid black;
    border-collapse: collapse;
}
th, td {
    padding: 5px;
}
th {
    text-align: left;
}
html {
    font-family: Arial, sans-serif ;
    font-size: 90% ;
}
</style>

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True): # generated from line 25, col 1
            write(u'''
<h1><b>Commands</b></h1>



<table>
\t<thead>
\t\t<tr style = "border-right: 2px solid black; border-left: 2px solid black; border-top: 2px solid black;">
\t\t\t<th rowspan = "2">Mnemonic</th>
\t\t\t<th rowspan = "2">ID</th>
\t\t\t<th rowspan = "2">Description</th>
\t\t\t<th rowspan = "1" colspan = "3">Arguments</th>
\t\t</tr>
\t\t<tr style = "border-right: 2px solid black; ">
\t\t\t<th>Argument</th>
\t\t\t<th>Type</th>
\t\t\t<th>Description</th>
\t\t<tr>
\t</thead>
\t<tbody>
\t
''')
            for mnemonic, opcode, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 47, col 1
                args = VFSL([locals()]+SL+[globals(), builtin],"command_args",True)[VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True)]
                args_length = len(VFSL([locals()]+SL+[globals(), builtin],"args",True)) + 1
                write(u'''\t\t<tr style = "border: 2px solid black;">
\t\t\t<td rowspan="''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"args_length",True) # u'$args_length' on line 51, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$args_length')) # from line 51, col 17.
                write(u'''">''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 51, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 51, col 31.
                write(u'''</td>
\t\t\t<td rowspan="''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"args_length",True) # u'$args_length' on line 52, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$args_length')) # from line 52, col 17.
                write(u'''">''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"opcode",True) # u'${opcode}' on line 52, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${opcode}')) # from line 52, col 31.
                write(u'''</td>
\t\t\t<td rowspan="''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"args_length",True) # u'$args_length' on line 53, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$args_length')) # from line 53, col 17.
                write(u'''">''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'${comment}' on line 53, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${comment}')) # from line 53, col 31.
                write(u'''</td>
''')
                if VFSL([locals()]+SL+[globals(), builtin],"args_length",True) > 1: # generated from line 54, col 6
                    args_index = 1
                    for arg_name, arg_type, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 56, col 7
                        arg_style = "border-right: 2px solid black;"
                        if VFSL([locals()]+SL+[globals(), builtin],"args_index",True) == 1: # generated from line 58, col 8
                            arg_style += "border-top: 2px solid black;"
                        if VFSL([locals()]+SL+[globals(), builtin],"args_index",True) + 1 == VFSL([locals()]+SL+[globals(), builtin],"args_length",True): # generated from line 61, col 6
                            arg_style += "border-bottom: 2px solid black;"
                        write(u'''\t\t\t\t\t<tr style = "''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_style",True) # u'$arg_style' on line 64, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_style')) # from line 64, col 19.
                        write(u'''">\t\t\t\t\t
\t\t\t\t\t\t<td>''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 65, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 65, col 11.
                        write(u'''</td>
\t\t\t\t\t\t<td>''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 66, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 66, col 11.
                        write(u'''</td>
\t\t\t\t\t\t<td>''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 67, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 67, col 11.
                        write(u'''</td>
\t\t\t\t\t</tr>
''')
                        args_index += 1
                else: # generated from line 71, col 4
                    write(u'''\t\t\t\t<td></td>
\t\t\t\t<td></td>
\t\t\t\t<td></td>
''')
                write(u'''\t\t</tr>
''')
            write(u'''\t</tbody>
</table>   


''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 84, col 1
            write(u'''<h1><b>Telemetry</b></h1>
<table>
  <tr>
     <th>Channel Name</th>
     <th>ID</th>
     <th>Type</th>
     <th>Description</th>
 </tr>

''')
            for id, tlmname, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 94, col 1
                write(u''' <tr>
    <td>''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'$tlmname' on line 96, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$tlmname')) # from line 96, col 9.
                write(u'''</td>
    <td>''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'$id' on line 97, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$id')) # from line 97, col 9.
                write(u'''</td>
    <td>''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 98, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 98, col 9.
                write(u'''</td>
    <td>''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 99, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 99, col 9.
                write(u'''</td>
 </tr>
''')
        write(u'''</table>

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 105, col 1
            write(u'''<h1><b>Events</b></h1>




<table>
\t<thead>
\t\t<tr style = "border-right: 2px solid black; border-left: 2px solid black; border-top: 2px solid black;">
\t\t\t<th rowspan = "2">Event Name</th>
\t\t\t<th rowspan = "2">ID</th>
\t\t\t<th rowspan = "2">Description</th>
\t\t\t<th rowspan = "1" colspan = "4">Arguments</th>
\t\t</tr>
\t\t<tr style = "border-right: 2px solid black; ">
\t\t\t<th>Argument</th>
\t\t\t<th>Type</th>
\t\t\t<th>Size</th>
\t\t\t<th>Description</th>
\t\t<tr>
\t</thead>
\t<tbody>
\t
''')
            for id, eventname, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 128, col 1
                args = VFSL([locals()]+SL+[globals(), builtin],"event_args",True)[VFSL([locals()]+SL+[globals(), builtin],"eventname",True)]
                args_length = len(VFSL([locals()]+SL+[globals(), builtin],"args",True)) + 1
                write(u'''\t\t<tr style = "border: 2px solid black;">
\t\t\t<td rowspan="''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"args_length",True) # u'$args_length' on line 132, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$args_length')) # from line 132, col 17.
                write(u'''">''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"eventname",True) # u'${eventname}' on line 132, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${eventname}')) # from line 132, col 31.
                write(u'''</td>
\t\t\t<td rowspan="''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"args_length",True) # u'$args_length' on line 133, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$args_length')) # from line 133, col 17.
                write(u'''">''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'${id}' on line 133, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 133, col 31.
                write(u'''</td>
\t\t\t<td rowspan="''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"args_length",True) # u'$args_length' on line 134, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'$args_length')) # from line 134, col 17.
                write(u'''">''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'${comment}' on line 134, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${comment}')) # from line 134, col 31.
                write(u'''</td>
''')
                if VFSL([locals()]+SL+[globals(), builtin],"args_length",True) > 1: # generated from line 135, col 6
                    args_index = 1
                    for arg_name, arg_type, comment, size, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 137, col 7
                        arg_style = "border-right: 2px solid black;"
                        if VFSL([locals()]+SL+[globals(), builtin],"args_index",True) == 1: # generated from line 139, col 8
                            arg_style += "border-top: 2px solid black;"
                        if VFSL([locals()]+SL+[globals(), builtin],"args_index",True) + 1 == VFSL([locals()]+SL+[globals(), builtin],"args_length",True): # generated from line 142, col 6
                            arg_style += "border-bottom: 2px solid black;"
                        write(u'''\t\t\t\t\t<tr style = "''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_style",True) # u'$arg_style' on line 145, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_style')) # from line 145, col 19.
                        write(u'''">\t\t\t\t\t
\t\t\t\t\t\t<td>''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 146, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 146, col 11.
                        write(u'''</td>
\t\t\t\t\t\t<td>''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 147, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 147, col 11.
                        write(u'''</td>
\t\t\t\t\t\t<td>''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'$size' on line 148, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'$size')) # from line 148, col 11.
                        write(u'''</td>
\t\t\t\t\t\t<td>''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 149, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 149, col 11.
                        write(u'''</td>
\t\t\t\t\t</tr>
''')
                        args_index += 1
                else: # generated from line 153, col 4
                    write(u'''\t\t\t\t<td></td>
\t\t\t\t<td></td>
\t\t\t\t<td></td>
\t\t\t\t<td></td>
''')
                write(u'''\t\t</tr>
''')
            write(u'''\t</tbody>
</table> 



''')
        write(u'''</body>
</html>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_HtmlDocPage= 'respond'

## END CLASS DEFINITION

if not hasattr(HtmlDocPage, '_initCheetahAttributes'):
    templateAPIClass = getattr(HtmlDocPage, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(HtmlDocPage)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=HtmlDocPage()).run()


