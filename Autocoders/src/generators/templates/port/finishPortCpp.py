#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930754.9588
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:34 2019'
__CHEETAH_src__ = 'finishPortCpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class finishPortCpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(finishPortCpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
Output''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 7.
        write(u'''Port::Output''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 26.
        write(u'''Port(void) :
            Fw::OutputPortBase(),
    m_port(0) {
}

void Output''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 7, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 7, col 12.
        write(u'''Port::init(void) {
    Fw::OutputPortBase::init();
}

void Output''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 11, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 11, col 12.
        write(u'''Port::addCallPort(Input''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 11, col 42
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 11, col 42.
        write(u'''Port* callPort) {
    FW_ASSERT(callPort);
    
    this->m_port = callPort;
    this->m_connObj = callPort;
#if FW_PORT_SERIALIZATION == 1
    this->m_serPort = 0;
#endif
}

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 21, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 21, col 1.
        write(u'''Output''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 21, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 21, col 21.
        write(u'''Port::invoke(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_proto_string",True) # u'${args_proto_string}' on line 21, col 41
        if _v is not None: write(_filter(_v, rawExpr=u'${args_proto_string}')) # from line 21, col 41.
        write(u''') {
#if FW_PORT_TRACING == 1
    this->trace();
#endif

#if FW_PORT_SERIALIZATION            
    FW_ASSERT(this->m_port||this->m_serPort);
#else
    FW_ASSERT(this->m_port);
#endif

''')
        if VFSL([locals()]+SL+[globals(), builtin],"ret_flag",True): # generated from line 32, col 1
            write(u'''    return this->m_port->invoke(''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"args_string",True) # u'${args_string}' on line 33, col 33
            if _v is not None: write(_filter(_v, rawExpr=u'${args_string}')) # from line 33, col 33.
            write(u''');
''')
        else: # generated from line 34, col 1
            write(u'''    if (this->m_port) {
        this->m_port->invoke(''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"args_string",True) # u'${args_string}' on line 36, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'${args_string}')) # from line 36, col 30.
            write(u''');
#if FW_PORT_SERIALIZATION            
    } else if (this->m_serPort) {
''')
            if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)) > 0: # generated from line 39, col 2
                write(u'''        Fw::SerializeStatus status;
''')
            write(u'''        ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 42, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 42, col 9.
            write(u'''PortBuffer _buffer;
''')
            num = 0
            for arg in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 44, col 2
                if VFSL([locals()]+SL+[globals(), builtin],"enum_marker",True)[VFSL([locals()]+SL+[globals(), builtin],"num",True)] == 'ENUM': # generated from line 45, col 3
                    write(u'''        status = _buffer.serialize(static_cast<NATIVE_INT_TYPE>(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 46, col 65
                    if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 46, col 65.
                    write(u'''));
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"pointer_marker",True)[VFSL([locals()]+SL+[globals(), builtin],"num",True)] == True: # generated from line 47, col 3
                    write(u'''        status = _buffer.serialize(static_cast<void*>(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 48, col 55
                    if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 48, col 55.
                    write(u'''));
''')
                else: # generated from line 49, col 3
                    write(u'''        status = _buffer.serialize(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 50, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 50, col 36.
                    write(u''');
''')
                num = VFSL([locals()]+SL+[globals(), builtin],"num",True) + 1
                write(u'''        FW_ASSERT(Fw::FW_SERIALIZE_OK == status,static_cast<AssertArg>(status));

''')
            write(u'''        this->m_serPort->invokeSerial(_buffer);
    }
#else
    }    
#endif
''')
            #  no return value            
        write(u'''
} // end Output''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 63, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 63, col 16.
        write(u'''Port::invoke(...)

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 65, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 66, col 2
                write(u'''} // end namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 67, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 67, col 20.
                write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_finishPortCpp= 'respond'

## END CLASS DEFINITION

if not hasattr(finishPortCpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(finishPortCpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(finishPortCpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=finishPortCpp()).run()


