#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930755.401463
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:35 2019'
__CHEETAH_src__ = 'namespacePortCpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class namespacePortCpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(namespacePortCpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 1, col 1
            for n in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 2, col 2
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"n",True) # u'${n}' on line 3, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${n}')) # from line 3, col 11.
                write(u''' {
''')
        write(u'''
''')
        for (argname,type,modifier,size,comment) in VFSL([locals()]+SL+[globals(), builtin],"arg_list",True): # generated from line 7, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 8, col 1
                write(u'''
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 10, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 10, col 5.
                write(u'''String::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 10, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 10, col 23.
                write(u'''String(const char* src): StringBase() {
        this->copyBuff(src,this->getCapacity());
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 14, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 14, col 5.
                write(u'''String::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 14, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 14, col 23.
                write(u'''String(const Fw::StringBase& src): StringBase() {
        this->copyBuff(src.toChar(),this->getCapacity());
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 18, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 18, col 5.
                write(u'''String::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 18, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 18, col 23.
                write(u'''String(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 18, col 46
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 18, col 46.
                write(u'''String& src): StringBase() {
        this->copyBuff(src.toChar(),this->getCapacity());
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 22, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 22, col 5.
                write(u'''String::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 22, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 22, col 23.
                write(u'''String(void): StringBase() {
        this->m_buf[0] = 0;
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 26, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 26, col 5.
                write(u'''String::~''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 26, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 26, col 24.
                write(u'''String(void) {
    }

    NATIVE_UINT_TYPE ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 29, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 29, col 22.
                write(u'''String::length(void) const {
        return (NATIVE_UINT_TYPE)strnlen(this->m_buf,sizeof(this->m_buf));
    }

    const char* ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 33, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 33, col 17.
                write(u'''String::toChar(void) const {
        return this->m_buf;
    }

    void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 37, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 37, col 10.
                write(u'''String::copyBuff(const char* buff, NATIVE_UINT_TYPE size) {
        FW_ASSERT(buff);
        // check for self copy
        if (buff != this->m_buf) {
            (void)strncpy(this->m_buf,buff,size);
            // NULL terminate
            this->terminate(sizeof(this->m_buf));
        }
    }
    
    Fw::SerializeStatus ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 47, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 47, col 25.
                write(u'''String::serialize(Fw::SerializeBufferBase& buffer) const {
        NATIVE_UINT_TYPE strSize = strnlen(this->m_buf,sizeof(this->m_buf));
        // serialize string as buffer
        return buffer.serialize((U8*)this->m_buf,strSize);
    }
    
    Fw::SerializeStatus ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 53, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 53, col 25.
                write(u'''String::deserialize(Fw::SerializeBufferBase& buffer) {
        NATIVE_UINT_TYPE maxSize = sizeof(this->m_buf);
        // deserialize string
        Fw::SerializeStatus stat = buffer.deserialize((U8*)this->m_buf,maxSize);
        // make sure it is null-terminated
        this->terminate(maxSize);

        return stat;
    }
    
    NATIVE_UINT_TYPE ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 63, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 63, col 22.
                write(u'''String::getCapacity(void) const {
        return sizeof(this->m_buf);
    }
    
    const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 67, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 67, col 11.
                write(u'''String& ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 67, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 67, col 29.
                write(u'''String::operator=(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 67, col 63
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 67, col 63.
                write(u'''String& other) {
        this->copyBuff(other.m_buf,this->getCapacity());
        return *this;
    }

    void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 72, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 72, col 10.
                write(u'''String::terminate(NATIVE_UINT_TYPE size) {
        // null terminate the string
        this->m_buf[size < sizeof(this->m_buf)?size:sizeof(this->m_buf)-1] = 0;
    }

''')
            if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "buffer": # generated from line 78, col 1
                write(u'''
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 80, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 80, col 5.
                write(u'''Buffer::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 80, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 80, col 23.
                write(u'''Buffer(const U8 *args, NATIVE_UINT_TYPE size) {
        Fw::SerializeBufferBase::setBuff(args,size);
    }
    
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 84, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 84, col 5.
                write(u'''Buffer::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 84, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 84, col 23.
                write(u'''Buffer() : Fw::SerializeBufferBase() {
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 87, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 87, col 5.
                write(u'''Buffer::~''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 87, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 87, col 24.
                write(u'''Buffer() {
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 90, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 90, col 5.
                write(u'''Buffer::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 90, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 90, col 23.
                write(u'''Buffer(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 90, col 46
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 90, col 46.
                write(u'''Buffer& other) : Fw::SerializeBufferBase() {
        Fw::SerializeBufferBase::setBuff(other.m_data,other.getBuffLength());
    }

    const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 94, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 94, col 11.
                write(u'''Buffer& ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 94, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 94, col 29.
                write(u'''Buffer::operator=(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 94, col 63
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 94, col 63.
                write(u'''Buffer& other) {
        Fw::SerializeBufferBase::setBuff(other.m_data,other.getBuffLength());
        return other;
    }

    NATIVE_UINT_TYPE ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 99, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 99, col 22.
                write(u'''Buffer::getBuffCapacity(void) const {
        return sizeof(this->m_data);
    }

    const U8* ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 103, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 103, col 15.
                write(u'''Buffer::getBuffAddr(void) const {
        return this->m_data;
    }

    U8* ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'${argname}' on line 107, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${argname}')) # from line 107, col 9.
                write(u'''Buffer::getBuffAddr(void) {
        return this->m_data;
    }    
    
''')
        write(u'''
    namespace {

        class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 116, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 116, col 15.
        write(u'''PortBuffer : public Fw::SerializeBufferBase {

            public:
                NATIVE_UINT_TYPE getBuffCapacity(void) const {
                    return sizeof(m_buff);
                }

                U8* getBuffAddr(void) {
                    return m_buff;
                }

                const U8* getBuffAddr(void) const {
                    return m_buff;
                }

        private:

            U8 m_buff[Input''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 133, col 28
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 133, col 28.
        write(u'''Port::SERIALIZED_SIZE];

        };

    }
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_namespacePortCpp= 'respond'

## END CLASS DEFINITION

if not hasattr(namespacePortCpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(namespacePortCpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(namespacePortCpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=namespacePortCpp()).run()


