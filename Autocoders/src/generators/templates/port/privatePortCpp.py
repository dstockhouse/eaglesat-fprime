#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930756.75958
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:36 2019'
__CHEETAH_src__ = 'privatePortCpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class privatePortCpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(privatePortCpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''#if FW_PORT_SERIALIZATION == 1    
    void Input''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 15.
        write(u'''Port::invokeSerial(Fw::SerializeBufferBase &buffer) {
''')
        if VFSL([locals()]+SL+[globals(), builtin],"ret_flag",True) == False: # generated from line 3, col 1
            if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)) > 0: # generated from line 4, col 1
                write(u'''        Fw::SerializeStatus _status;
''')
            write(u'''#if FW_PORT_TRACING == 1
        this->trace();
#endif
        FW_ASSERT(this->m_comp);
        FW_ASSERT(this->m_func);

''')
            num = 0
            for arg in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 14, col 1
                if VFSL([locals()]+SL+[globals(), builtin],"enum_marker",True)[VFSL([locals()]+SL+[globals(), builtin],"num",True)] == 'ENUM': # generated from line 15, col 1
                    #  Generate enum deserialize here...
                    if VFSL([locals()]+SL+[globals(), builtin],"pointer_marker",True)[VFSL([locals()]+SL+[globals(), builtin],"num",True)] == True: # generated from line 17, col 1
                        #  With pointer modifier...
                        write(u'''        FwEnumStoreType *''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 19, col 26
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 19, col 26.
                        write(u''';
        void* ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 20, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 20, col 15.
                        write(u'''PtrTemp;
        _status = buffer.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 21, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 21, col 38.
                        write(u'''PtrTemp);
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 22, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 22, col 9.
                        write(u''' = static_cast<''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"argtype",True) # u'$argtype' on line 22, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u'$argtype')) # from line 22, col 31.
                        write(u'''>(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 22, col 41
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 22, col 41.
                        write(u'''PtrTemp);
''')
                    else: # generated from line 23, col 1
                        write(u'''        FwEnumStoreType ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 24, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 24, col 25.
                        write(u'''_val;
        _status = buffer.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 25, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 25, col 38.
                        write(u'''_val);
''')
                    write(u'''        FW_ASSERT(Fw::FW_SERIALIZE_OK == _status,static_cast<AssertArg>(_status));
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[1] # u'$arg[1]' on line 28, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$arg[1]')) # from line 28, col 9.
                    write(u''' ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 28, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 28, col 17.
                    write(u''' = static_cast<''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[1] # u'$arg[1]' on line 28, col 39
                    if _v is not None: write(_filter(_v, rawExpr=u'$arg[1]')) # from line 28, col 39.
                    write(u'''>(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 28, col 48
                    if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 28, col 48.
                    write(u'''_val);
''')
                else: # generated from line 29, col 1
                    #  Generate all other deserialize here...
                    if VFSL([locals()]+SL+[globals(), builtin],"arg",True)[1] == "string": # generated from line 31, col 1
                        argtype = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] + "String"
                    elif VFSL([locals()]+SL+[globals(), builtin],"arg",True)[1] == "buffer": # generated from line 33, col 1
                        argtype = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] + "Buffer"
                    else: # generated from line 35, col 1
                        argtype = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[1]
                    write(u'''
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"pointer_marker",True)[VFSL([locals()]+SL+[globals(), builtin],"num",True)] == True: # generated from line 39, col 1
                        #  With pointer modifier...
                        write(u'''
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"argtype",True) # u'$argtype' on line 42, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$argtype')) # from line 42, col 9.
                        write(u''' *''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 42, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 42, col 19.
                        write(u''';
        void* ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 43, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 43, col 15.
                        write(u'''PtrTemp;
        _status = buffer.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 44, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 44, col 38.
                        write(u'''PtrTemp);
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 45, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 45, col 9.
                        write(u''' = static_cast<''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"argtype",True) # u'$argtype' on line 45, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u'$argtype')) # from line 45, col 31.
                        write(u'''*>(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'${arg[0]}' on line 45, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg[0]}')) # from line 45, col 42.
                        write(u'''PtrTemp);
''')
                    else: # generated from line 46, col 1
                        #  Without any pointer modifier...
                        write(u'''        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"argtype",True) # u'$argtype' on line 48, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$argtype')) # from line 48, col 9.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 48, col 18
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 48, col 18.
                        write(u''';
        _status = buffer.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg",True)[0] # u'$arg[0]' on line 49, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg[0]')) # from line 49, col 38.
                        write(u''');
''')
                    write(u'''        FW_ASSERT(Fw::FW_SERIALIZE_OK == _status,static_cast<AssertArg>(_status));
''')
                num = VFSL([locals()]+SL+[globals(), builtin],"num",True) + 1
            write(u'''
''')
            if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)) > 0: # generated from line 56, col 1
                write(u'''        this->m_func(this->m_comp, this->m_portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"args_string",True) # u'${args_string}' on line 57, col 53
                if _v is not None: write(_filter(_v, rawExpr=u'${args_string}')) # from line 57, col 53.
                write(u''');
''')
            else: # generated from line 58, col 1
                write(u'''        this->m_func(this->m_comp, this->m_portNum);
''')
        else: # generated from line 61, col 1
            #  For return type the invokeSerial is not used so just throw an assert here...
            write(u'''        FW_ASSERT(0);
''')
        write(u'''    }
#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_privatePortCpp= 'respond'

## END CLASS DEFINITION

if not hasattr(privatePortCpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(privatePortCpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(privatePortCpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=privatePortCpp()).run()


