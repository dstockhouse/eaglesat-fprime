#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930763.319119
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:43 2019'
__CHEETAH_src__ = 'publicSerialCpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class publicSerialCpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(publicSerialCpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// public methods

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 3, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 3, col 1.
        write(u'''::''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 3, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 3, col 10.
        write(u'''(void): Serializable() {

}

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 7, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 7, col 1.
        write(u'''::''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 7, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 7, col 10.
        write(u'''(const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 7, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 7, col 24.
        write(u'''& src) : Serializable() {
    this->set(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_mstring",True) # u'${args_mstring}' on line 8, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${args_mstring}')) # from line 8, col 15.
        write(u''');
}

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 11, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 11, col 1.
        write(u'''::''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 11, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 11, col 10.
        write(u'''(const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 11, col 24
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 11, col 24.
        write(u'''* src) : Serializable() {
    FW_ASSERT(src);
    this->set(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_mstring_ptr",True) # u'${args_mstring_ptr}' on line 13, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${args_mstring_ptr}')) # from line 13, col 15.
        write(u''');
}

''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 16, col 1
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 16, col 1.
        write(u'''::''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 16, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 16, col 10.
        write(u'''(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_proto_string",True) # u'${args_proto_string}' on line 16, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'${args_proto_string}')) # from line 16, col 18.
        write(u''') : Serializable() {
    this->set(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_string",True) # u'${args_string}' on line 17, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${args_string}')) # from line 17, col 15.
        write(u''');
}

const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 20, col 7
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 20, col 7.
        write(u'''& ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 20, col 16
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 20, col 16.
        write(u'''::operator=(const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 20, col 41
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 20, col 41.
        write(u'''& src) {
    this->set(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_mstring",True) # u'${args_mstring}' on line 21, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'${args_mstring}')) # from line 21, col 15.
        write(u''');
    return src;
}

bool ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 25, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 25, col 6.
        write(u'''::operator==(const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 25, col 32
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 25, col 32.
        write(u'''& src) const {
    return (
''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 27, col 1
            write(u'''        (src.m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'$member' on line 28, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$member')) # from line 28, col 16.
            write(u''' == this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'$member' on line 28, col 35
            if _v is not None: write(_filter(_v, rawExpr=u'$member')) # from line 28, col 35.
            write(u''') &&
''')
        write(u'''        true);
}

void ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 33, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 33, col 6.
        write(u'''::set(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_proto_string",True) # u'${args_proto_string}' on line 33, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${args_proto_string}')) # from line 33, col 19.
        write(u''') {
''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 34, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) == None or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "string": # generated from line 35, col 1
                write(u'''    this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 36, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 36, col 13.
                write(u''' = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 36, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 36, col 25.
                write(u''';
''')
            else: # generated from line 37, col 1
                write(u'''    for (NATIVE_INT_TYPE _mem = 0; _mem < FW_MIN(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 38, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 38, col 50.
                write(u'''Size,''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'${size}' on line 38, col 64
                if _v is not None: write(_filter(_v, rawExpr=u'${size}')) # from line 38, col 64.
                write(u'''); _mem++) {
        this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 39, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 39, col 17.
                write(u'''[_mem] = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 39, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 39, col 35.
                write(u'''[_mem];
    }
''')
        write(u'''}

''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 45, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) == None: # generated from line 46, col 1
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 47, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 47, col 1.
                write(u''' ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 47, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 47, col 9.
                write(u'''::get''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 47, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 47, col 21.
                write(u'''(void) {
    return this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 48, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 48, col 20.
                write(u''';
''')
            elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'string' or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'extern': # generated from line 49, col 1
                write(u'''const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 50, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 50, col 7.
                write(u'''& ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 50, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 50, col 16.
                write(u'''::get''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 50, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 50, col 28.
                write(u'''(void) {
    return this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 51, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 51, col 20.
                write(u''';
''')
            else: # generated from line 52, col 1
                write(u'''const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 53, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 53, col 7.
                write(u'''* ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 53, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 53, col 16.
                write(u'''::get''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 53, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 53, col 28.
                write(u'''(NATIVE_INT_TYPE& size) {
    size = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'${size}' on line 54, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${size}')) # from line 54, col 12.
                write(u''';
    return this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 55, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 55, col 20.
                write(u''';
''')
            write(u'''}

''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 60, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) == None: # generated from line 61, col 1
                write(u'''void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 62, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 62, col 6.
                write(u'''::set''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 62, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 62, col 18.
                write(u'''(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 62, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 62, col 28.
                write(u''' val) {
    this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 63, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 63, col 13.
                write(u''' = val;
}
''')
            elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'string' or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'extern': # generated from line 65, col 1
                write(u'''void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 66, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 66, col 6.
                write(u'''::set''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 66, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 66, col 18.
                write(u'''(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 66, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 66, col 34.
                write(u'''& val) {
    this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 67, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 67, col 13.
                write(u''' = val;
}
''')
            else: # generated from line 69, col 1
                write(u'''void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 70, col 6
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 70, col 6.
                write(u'''::set''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 70, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 70, col 18.
                write(u'''(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 70, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 70, col 34.
                write(u'''* val, NATIVE_INT_TYPE size) {
    for (NATIVE_INT_TYPE _mem = 0; _mem < (size < ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'${size}' on line 71, col 51
                if _v is not None: write(_filter(_v, rawExpr=u'${size}')) # from line 71, col 51.
                write(u''')?size:''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'${size}' on line 71, col 65
                if _v is not None: write(_filter(_v, rawExpr=u'${size}')) # from line 71, col 65.
                write(u'''; _mem++) {
        this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 72, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 72, col 17.
                write(u'''[_mem] = val[_mem];
    }
}
''')
        write(u'''Fw::SerializeStatus ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 77, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 77, col 21.
        write(u'''::serialize(Fw::SerializeBufferBase& buffer) const {
    Fw::SerializeStatus stat;

#if FW_SERIALIZATION_TYPE_ID    
    // serialize type ID
    stat = buffer.serialize((U32)''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 82, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 82, col 34.
        write(u'''::TYPE_ID);
#endif    

''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 85, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) == None or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "string": # generated from line 86, col 1
                if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 87, col 1
                    write(u'''    stat = buffer.serialize((FwEnumStoreType)this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 88, col 54
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 88, col 54.
                    write(u''');
''')
                else: # generated from line 89, col 1
                    write(u'''    stat = buffer.serialize(this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 90, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 90, col 37.
                    write(u''');
''')
                write(u'''    if (stat != Fw::FW_SERIALIZE_OK) {
        return stat;
    }
''')
            else: # generated from line 95, col 1
                write(u'''    for (NATIVE_INT_TYPE _mem = 0; _mem < ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'${size}' on line 96, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'${size}')) # from line 96, col 43.
                write(u'''; _mem++) {
        stat = buffer.serialize(this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 97, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 97, col 41.
                write(u'''[_mem]);
        if (stat != Fw::FW_SERIALIZE_OK) {
            return stat;
        }
    }   
''')
        write(u'''    return stat;
}

Fw::SerializeStatus ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 107, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 107, col 21.
        write(u'''::deserialize(Fw::SerializeBufferBase& buffer) {
    Fw::SerializeStatus stat;

#if FW_SERIALIZATION_TYPE_ID    
    U32 typeId;

    stat = buffer.deserialize(typeId);
    if (stat != Fw::FW_SERIALIZE_OK) {
        return stat;
    }

    if (typeId != ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 118, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 118, col 19.
        write(u'''::TYPE_ID) {
        return Fw::FW_DESERIALIZE_TYPE_MISMATCH;
    }
#endif    

''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 123, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) == None or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "string": # generated from line 124, col 1
                if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 125, col 1
                    write(u'''    FwEnumStoreType int''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 126, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 126, col 24.
                    write(u''';
    stat = buffer.deserialize(int''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 127, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 127, col 34.
                    write(u''');
    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 128, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 128, col 13.
                    write(u''' = static_cast<''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 128, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 128, col 37.
                    write(u'''>(int''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 128, col 47
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 128, col 47.
                    write(u''');
''')
                else: # generated from line 129, col 1
                    write(u'''    stat = buffer.deserialize(this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 130, col 39
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 130, col 39.
                    write(u''');
''')
                write(u'''    if (stat != Fw::FW_SERIALIZE_OK) {
        return stat;
    }
''')
            else: # generated from line 135, col 1
                write(u'''    for (NATIVE_INT_TYPE _mem = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'${size}' on line 136, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'${size}')) # from line 136, col 33.
                write(u'''-1; _mem >= 0; _mem--) {
        stat = buffer.deserialize(this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 137, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 137, col 43.
                write(u'''[_mem]);
        if (stat != Fw::FW_SERIALIZE_OK) {
            return stat;
        }
    }   
''')
        write(u'''    return stat;
}

#if FW_SERIALIZABLE_TO_STRING  || BUILD_UT

void ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 149, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 149, col 6.
        write(u'''::toString(Fw::StringBase& text) const {
    
    static const char * formatString = 
       "("
''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True)[0:-1]: # generated from line 153, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) != None and typeinfo != "string": # generated from line 154, col 1
                write(u'''       "''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'$member' on line 155, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$member')) # from line 155, col 9.
                write(u''' = "
''')
                for elem in range(0,int(VFSL([locals()]+SL+[globals(), builtin],"size",True))-1): # generated from line 156, col 1
                    write(u'''       "[''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"format",True) # u'$format' on line 157, col 10
                    if _v is not None: write(_filter(_v, rawExpr=u'$format')) # from line 157, col 10.
                    write(u''']"
''')
                write(u'''       "[''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"format",True) # u'$format' on line 159, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'$format')) # from line 159, col 10.
                write(u'''] "
''')
            else: # generated from line 160, col 1
                write(u'''       "''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'$member' on line 161, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$member')) # from line 161, col 9.
                write(u''' = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"format",True) # u'$format' on line 161, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'$format')) # from line 161, col 19.
                write(u''', "
''')
        if VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1][2] != None and VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1][5] != "string": # generated from line 164, col 1
            write(u'''       "''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1][0] # u'$members[-1][0]' on line 165, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'$members[-1][0]')) # from line 165, col 9.
            write(u''' = "
''')
            for elem in range(0,int(VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1][2])-1): # generated from line 166, col 1
                write(u'''       "[''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1][3] # u'$members[-1][3]' on line 167, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'$members[-1][3]')) # from line 167, col 10.
                write(u''']"
''')
            write(u'''       "[''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1][3] # u'$members[-1][3]' on line 169, col 10
            if _v is not None: write(_filter(_v, rawExpr=u'$members[-1][3]')) # from line 169, col 10.
            write(u'''] "
''')
        else: # generated from line 170, col 1
            write(u'''       "''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1][0] # u'$members[-1][0]' on line 171, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'$members[-1][0]')) # from line 171, col 9.
            write(u''' = ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1][3] # u'$members[-1][3]' on line 171, col 27
            if _v is not None: write(_filter(_v, rawExpr=u'$members[-1][3]')) # from line 171, col 27.
            write(u'''"
''')
        write(u'''       ")";
       
    // declare strings to hold any serializable toString() arguments

''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 177, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "extern": # generated from line 178, col 1
                write(u'''
    Fw::EightyCharString ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 180, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 180, col 26.
                write(u'''Str;
    this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 181, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 181, col 13.
                write(u'''.toString(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 181, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 181, col 32.
                write(u'''Str); 
''')
        write(u'''       
    char outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE];
    (void)snprintf(outputString,FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE,formatString
''')
        for (member,type,size,format,comment,typeinfo) in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 187, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) != None and VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) != "string": # generated from line 188, col 1
                for elem in range(0,int(VFSL([locals()]+SL+[globals(), builtin],"size",True))): # generated from line 189, col 1
                    if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "bool": # generated from line 190, col 1
                        write(u'''       ,this->m_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 191, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 191, col 17.
                        write(u'''[''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"elem",True) # u'$elem' on line 191, col 27
                        if _v is not None: write(_filter(_v, rawExpr=u'$elem')) # from line 191, col 27.
                        write(u''']?"T":"F"
''')
                    elif VFSL([locals()]+SL+[globals(), builtin],"type",True) == "enum": # generated from line 192, col 1
                        write(u'''       ,(NATIVE_INT_TYPE)this->m_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 193, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 193, col 34.
                        write(u'''[''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"elem",True) # u'$elem' on line 193, col 44
                        if _v is not None: write(_filter(_v, rawExpr=u'$elem')) # from line 193, col 44.
                        write(u''']
''')
                    else: # generated from line 194, col 1
                        write(u'''       ,this->m_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 195, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 195, col 17.
                        write(u'''[''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"elem",True) # u'$elem' on line 195, col 27
                        if _v is not None: write(_filter(_v, rawExpr=u'$elem')) # from line 195, col 27.
                        write(u''']
''')
                    #  for each element of the array
                #  not array
            else: # generated from line 198, col 1
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "bool": # generated from line 199, col 1
                    write(u'''       ,this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 200, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 200, col 17.
                    write(u'''?"T":"F"
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"type",True) == "enum": # generated from line 201, col 1
                    write(u'''       ,(NATIVE_INT_TYPE)this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 202, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 202, col 34.
                    write(u'''
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "string": # generated from line 203, col 1
                    write(u'''       ,this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 204, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 204, col 17.
                    write(u'''.toChar()
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "extern": # generated from line 205, col 1
                    write(u'''       ,''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 206, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 206, col 9.
                    write(u'''Str.toChar()
''')
                else: # generated from line 207, col 1
                    write(u'''       ,this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'$member' on line 208, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'$member')) # from line 208, col 17.
                    write(u'''
''')
                #  not array
            #  each member
        write(u'''    );
    outputString[FW_SERIALIZABLE_TO_STRING_BUFFER_SIZE-1] = 0; // NULL terminate
    
    text = outputString;           
}

#endif

#ifdef BUILD_UT
    std::ostream& operator<<(std::ostream& os, const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 221, col 54
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 221, col 54.
        write(u'''& obj) {
        Fw::EightyCharString str;
        obj.toString(str);
        os << str.toChar();
        return os;
    }
#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_publicSerialCpp= 'respond'

## END CLASS DEFINITION

if not hasattr(publicSerialCpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(publicSerialCpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(publicSerialCpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=publicSerialCpp()).run()


