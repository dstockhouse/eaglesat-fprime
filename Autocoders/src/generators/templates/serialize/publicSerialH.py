#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930762.044894
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:42 2019'
__CHEETAH_src__ = 'publicSerialH.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class publicSerialH(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(publicSerialH, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''public:

    enum {
        SERIALIZED_SIZE =
''')
        for tname,type,size,format,comment,typeinfo in VFSL([locals()]+SL+[globals(), builtin],"members",True)[0:-1]: # generated from line 5, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'string' or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'extern': # generated from line 6, col 1
                write(u'''        ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 7, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 7, col 9.
                write(u'''::SERIALIZED_SIZE +
''')
            elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'enum': # generated from line 8, col 1
                write(u'''        sizeof(FwEnumStoreType) +                
''')
            elif VFSL([locals()]+SL+[globals(), builtin],"size",True) == None: # generated from line 10, col 1
                write(u'''        sizeof(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 11, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 11, col 16.
                write(u''') +
''')
            else: # generated from line 12, col 1
                write(u'''        sizeof(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 13, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 13, col 16.
                write(u''')*''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'${size}' on line 13, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${size}')) # from line 13, col 25.
                write(u''' +
''')
        (tname,type,size,format,comment,typeinfo) = VFSL([locals()]+SL+[globals(), builtin],"members",True)[-1]
        if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'string' or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'extern': # generated from line 17, col 1
            write(u'''        ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 18, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 18, col 9.
            write(u'''::SERIALIZED_SIZE 
''')
        elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'enum': # generated from line 19, col 1
            write(u'''        sizeof(FwEnumStoreType)                
''')
        elif VFSL([locals()]+SL+[globals(), builtin],"size",True) == None: # generated from line 21, col 1
            write(u'''        sizeof(''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 22, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 22, col 16.
            write(u''')
''')
        else: # generated from line 23, col 1
            write(u'''        sizeof(''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 24, col 16
            if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 24, col 16.
            write(u''')*''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'$size' on line 24, col 23
            if _v is not None: write(_filter(_v, rawExpr=u'$size')) # from line 24, col 23.
            write(u'''
''')
        write(u'''    }; //!< serializable size of ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 26, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 26, col 34.
        write(u'''

    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 28, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 28, col 5.
        write(u'''(void); //!< Default constructor
    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 29, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 29, col 5.
        write(u'''(const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 29, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 29, col 19.
        write(u'''* src); //!< pointer copy constructor
    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 30, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 30, col 5.
        write(u'''(const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 30, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 30, col 19.
        write(u'''& src); //!< reference copy constructor
    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 31, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 31, col 5.
        write(u'''(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_proto",True) # u'$args_proto' on line 31, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$args_proto')) # from line 31, col 13.
        write(u'''); //!< constructor with arguments
    const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 32, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 32, col 11.
        write(u'''& operator=(const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 32, col 36
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 32, col 36.
        write(u'''& src); //!< equal operator
    bool operator==(const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 33, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 33, col 27.
        write(u'''& src) const; //!< equality operator
#ifdef BUILD_UT
    // to support GoogleTest framework in unit tests
    friend std::ostream& operator<<(std::ostream& os, const ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 36, col 61
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 36, col 61.
        write(u'''& obj);
#endif

    void set(''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"args_proto",True) # u'$args_proto' on line 39, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'$args_proto')) # from line 39, col 14.
        write(u'''); //!< set values
    
''')
        for name,type,size,format,comment,typeinfo in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 41, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) == None: # generated from line 42, col 1
                write(u'''    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 43, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 43, col 5.
                write(u''' get''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 43, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 43, col 16.
                write(u'''(void); //!< get member ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 43, col 47
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 43, col 47.
                write(u'''
''')
            elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'string' or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'extern': # generated from line 44, col 1
                write(u'''    const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 45, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 45, col 11.
                write(u'''& get''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 45, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 45, col 23.
                write(u'''(void); //!< get member ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 45, col 54
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 45, col 54.
                write(u'''
''')
            else: # generated from line 46, col 1
                write(u'''    const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 47, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 47, col 11.
                write(u'''* get''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 47, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 47, col 23.
                write(u'''(NATIVE_INT_TYPE& size); //!< get member ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 47, col 71
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 47, col 71.
                write(u'''
''')
        write(u'''
''')
        for name,type,size,format,comment,typeinfo in VFSL([locals()]+SL+[globals(), builtin],"members",True): # generated from line 51, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"size",True) == None: # generated from line 52, col 1
                write(u'''    void set''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 53, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 53, col 13.
                write(u'''(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 53, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 53, col 21.
                write(u''' val); //!< set member ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 53, col 51
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 53, col 51.
                write(u'''
''')
            elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'string' or VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == 'extern': # generated from line 54, col 1
                write(u'''    void set''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 55, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 55, col 13.
                write(u'''(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 55, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 55, col 27.
                write(u'''& val); //!< set member ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 55, col 58
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 55, col 58.
                write(u'''
''')
            else: # generated from line 56, col 1
                write(u'''    void set''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 57, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 57, col 13.
                write(u'''(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 57, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 57, col 27.
                write(u'''* val, NATIVE_INT_TYPE size); //!< set member ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 57, col 80
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 57, col 80.
                write(u'''    
''')
        write(u'''

    Fw::SerializeStatus serialize(Fw::SerializeBufferBase& buffer) const; //!< serialization function
    Fw::SerializeStatus deserialize(Fw::SerializeBufferBase& buffer); //!< deserialization function
#if FW_SERIALIZABLE_TO_STRING || BUILD_UT
    void toString(Fw::StringBase& text) const; //!< generate text from serializable
#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_publicSerialH= 'respond'

## END CLASS DEFINITION

if not hasattr(publicSerialH, '_initCheetahAttributes'):
    templateAPIClass = getattr(publicSerialH, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(publicSerialH)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=publicSerialH()).run()


