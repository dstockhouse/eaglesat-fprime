#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930760.750316
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:40 2019'
__CHEETAH_src__ = 'namespaceSerialCpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class namespaceSerialCpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(namespaceSerialCpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 1, col 1
            for n in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 2, col 2
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"n",True) # u'${n}' on line 3, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${n}')) # from line 3, col 11.
                write(u''' {
''')
        for (memname,type,size,format,comment) in VFSL([locals()]+SL+[globals(), builtin],"mem_list",True): # generated from line 6, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 7, col 1
                write(u'''
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 9, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 9, col 5.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 9, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 9, col 14.
                write(u'''String::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 9, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 9, col 32.
                write(u'''String(const char* src): StringBase() {
        this->copyBuff(src,this->getCapacity());
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 13, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 13, col 5.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 13, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 13, col 14.
                write(u'''String::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 13, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 13, col 32.
                write(u'''String(const Fw::StringBase& src): StringBase() {
        this->copyBuff(src.toChar(),this->getCapacity());
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 17, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 17, col 5.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 17, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 17, col 14.
                write(u'''String::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 17, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 17, col 32.
                write(u'''String(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 17, col 55
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 17, col 55.
                write(u'''String& src): StringBase() {
        this->copyBuff(src.toChar(),this->getCapacity());
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 21, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 21, col 5.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 21, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 21, col 14.
                write(u'''String::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 21, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 21, col 32.
                write(u'''String(void): StringBase() {
        this->m_buf[0] = 0;
    }

    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 25, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 25, col 5.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 25, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 25, col 14.
                write(u'''String::~''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 25, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 25, col 33.
                write(u'''String(void) {
    }
    
    bool ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 28, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 28, col 10.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 28, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 28, col 19.
                write(u'''String::operator==(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 28, col 54
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 28, col 54.
                write(u'''String& src) const {
        return (0 == strncmp(this->m_buf,src.m_buf,sizeof(this->m_buf)));    
    }

    NATIVE_UINT_TYPE ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 32, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 32, col 22.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 32, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 32, col 31.
                write(u'''String::length(void) const {
        return (NATIVE_UINT_TYPE)strnlen(this->m_buf,sizeof(this->m_buf));
    }

    const char* ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 36, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 36, col 17.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 36, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 36, col 26.
                write(u'''String::toChar(void) const {
        return this->m_buf;
    }

    void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 40, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 40, col 10.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 40, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 40, col 19.
                write(u'''String::copyBuff(const char* buff, NATIVE_UINT_TYPE size) {
        FW_ASSERT(buff);
        // check for self copy
        if (buff != this->m_buf) {
            (void)strncpy(this->m_buf,buff,size);
            // NULL terminate
            this->terminate(sizeof(this->m_buf));
        }
    }
    
    Fw::SerializeStatus ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 50, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 50, col 25.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 50, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 50, col 34.
                write(u'''String::serialize(Fw::SerializeBufferBase& buffer) const {
        NATIVE_UINT_TYPE strSize = strnlen(this->m_buf,sizeof(this->m_buf));
        // serialize string
        return buffer.serialize((U8*)this->m_buf,strSize);
    }
    
    Fw::SerializeStatus ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 56, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 56, col 25.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 56, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 56, col 34.
                write(u'''String::deserialize(Fw::SerializeBufferBase& buffer) {
        NATIVE_UINT_TYPE maxSize = sizeof(this->m_buf);
        // deserialize string
        Fw::SerializeStatus stat = buffer.deserialize((U8*)this->m_buf,maxSize);
        // make sure it is null-terminated
        this->terminate(maxSize);

        return stat;
    }
    
    NATIVE_UINT_TYPE ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 66, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 66, col 22.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 66, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 66, col 31.
                write(u'''String::getCapacity(void) const {
        return sizeof(this->m_buf);
    }
    
    void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 70, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 70, col 10.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 70, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 70, col 19.
                write(u'''String::terminate(NATIVE_UINT_TYPE size) {
        // null terminate the string
        this->m_buf[size < sizeof(this->m_buf)?size:sizeof(this->m_buf)-1] = 0;
    }
    
    const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 75, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 75, col 11.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 75, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 75, col 20.
                write(u'''String& ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 75, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 75, col 38.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 75, col 47
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 75, col 47.
                write(u'''String::operator=(const ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 75, col 81
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 75, col 81.
                write(u'''::''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"memname",True) # u'${memname}' on line 75, col 90
                if _v is not None: write(_filter(_v, rawExpr=u'${memname}')) # from line 75, col 90.
                write(u'''String& other) {
        this->copyBuff(other.m_buf,this->getCapacity());
        return *this;
    }
    
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_namespaceSerialCpp= 'respond'

## END CLASS DEFINITION

if not hasattr(namespaceSerialCpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(namespaceSerialCpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(namespaceSerialCpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=namespaceSerialCpp()).run()


