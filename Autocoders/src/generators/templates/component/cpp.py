#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930751.648539
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:31 2019'
__CHEETAH_src__ = 'cpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class cpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(cpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// ====================================================================== 
// \\title  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 12.
        write(u'''ComponentAc.hpp
// \\author Auto-generated
// \\brief  cpp file for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 4, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 4, col 25.
        write(u''' component base class
//
// \\copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
// 
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ====================================================================== 

#include <stdio.h>
#include <Fw/Cfg/Config.hpp>
#include <''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"comp_include_path",True) # u'${comp_include_path}' on line 22, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${comp_include_path}')) # from line 22, col 12.
        write(u'''/''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"include_name",True) # u'${include_name}' on line 22, col 33
        if _v is not None: write(_filter(_v, rawExpr=u'${include_name}')) # from line 22, col 33.
        write(u'''ComponentAc.hpp>
#include <Fw/Types/Assert.hpp>
#if FW_ENABLE_TEXT_LOGGING
#include <Fw/Types/EightyCharString.hpp>
#endif

''')
        class_name = VFSL([locals()]+SL+[globals(), builtin],"name",True) + "ComponentBase"
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 30, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 31, col 2
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 32, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 32, col 11.
                write(u''' {
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) != "passive": # generated from line 36, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Anonymous namespace to prevent name collisions
  // ----------------------------------------------------------------------

  namespace {

    typedef enum {
      ''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"name",True),"upper",False)() # u'${name.upper()}' on line 44, col 7
            if _v is not None: write(_filter(_v, rawExpr=u'${name.upper()}')) # from line 44, col 7.
            write(u'''_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
''')
            for msg_type in VFSL([locals()]+SL+[globals(), builtin],"msg_types",True)[0:-1]: # generated from line 45, col 3
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"msg_type",True) # u'${msg_type}' on line 46, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${msg_type}')) # from line 46, col 7.
                write(u''',
''')
            if len(VFSL([locals()]+SL+[globals(), builtin],"msg_types",True)) > 0: # generated from line 48, col 3
                write(u'''      ''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"msg_types",True)[-1],"upper",False)() # u'$msg_types[-1].upper()' on line 49, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$msg_types[-1].upper()')) # from line 49, col 7.
                write(u'''
''')
            write(u'''    } MsgTypeEnum;

    // Get the max size by doing a union of the input port serialization sizes.

    typedef union {
''')
            num = 1
            used = False
            for type in VFSL([locals()]+SL+[globals(), builtin],"port_input_types",True): # generated from line 58, col 3
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                write(u'''      BYTE port''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"num",True) # u'${num}' on line 60, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${num}')) # from line 60, col 16.
                write(u'''[''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 60, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 60, col 23.
                write(u'''::Input''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 60, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 60, col 42.
                write(u'''Port::SERIALIZED_SIZE];
''')
                num = VFSL([locals()]+SL+[globals(), builtin],"num",True) + 1
                used = True
            if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True): # generated from line 64, col 3
                used = True
                write(u'''      BYTE cmdPort[Fw::InputCmdPort::SERIALIZED_SIZE];
''')
            if VFSL([locals()]+SL+[globals(), builtin],"has_internal_interfaces",True): # generated from line 68, col 3
                used = True
                for iname, ipriority, full in VFSL([locals()]+SL+[globals(), builtin],"internal_interfaces",True): # generated from line 70, col 5
                    write(u'''      // Size of ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"iname",True) # u'$iname' on line 71, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'$iname')) # from line 71, col 18.
                    write(u''' argument list
      BYTE ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"iname",True) # u'${iname}' on line 72, col 12
                    if _v is not None: write(_filter(_v, rawExpr=u'${iname}')) # from line 72, col 12.
                    write(u'''IntIfSize[
''')
                    for argname, type, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"internal_interface_args",True)[VFSL([locals()]+SL+[globals(), builtin],"iname",True)]: # generated from line 73, col 7
                        if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == None: # generated from line 74, col 9
                            write(u'''        sizeof(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 75, col 16
                            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 75, col 16.
                            write(u''') +
''')
                        elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 76, col 9
                            write(u'''        sizeof(FwEnumStoreType) +
''')
                        else: # generated from line 78, col 9
                            write(u'''        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 79, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 79, col 9.
                            write(u'''::SERIALIZED_SIZE +
''')
                    write(u'''        0
      ];
''')
            if VFSL([locals()]+SL+[globals(), builtin],"used",True) == False: # generated from line 86, col 3
                write(u'''      // Minimum size for no async input types
      BYTE NOSIZE;
''')
            write(u'''    } BuffUnion;

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component

    class ComponentIpcSerializableBuffer : 
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Max. message size = size of data + message id + port
          SERIALIZATION_SIZE =
            sizeof(BuffUnion) +
            sizeof(NATIVE_INT_TYPE) +
            sizeof(NATIVE_INT_TYPE)
        };

        NATIVE_UINT_TYPE getBuffCapacity(void) const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr(void) {
          return m_buff;
        }

        const U8* getBuffAddr(void) const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };

  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_input_ports",True): # generated from line 130, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Getters for numbers of input ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 135, col 3
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 137, col 5
                    write(u'''  Fw::InputSerializePort *''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 138, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 138, col 27.
                    write(u''' ::
''')
                else: # generated from line 139, col 5
                    write(u'''  ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 140, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 140, col 3.
                    write(u'''::Input''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 140, col 20
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 140, col 20.
                    write(u'''Port *''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 140, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 140, col 33.
                    write(u''' ::
''')
                write(u'''    get_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 142, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 142, col 9.
                write(u'''_InputPort(NATIVE_INT_TYPE portNum)
  {
    FW_ASSERT(portNum < this->getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 144, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 144, col 38.
                write(u'''_InputPorts(),static_cast<AssertArg>(portNum));
    return &this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 145, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 145, col 21.
                write(u'''_InputPort[portNum];
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 150, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Typed connectors for output ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 155, col 3
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 157, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 160, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 160, col 8.
                write(u''' ::
    set_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 161, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 161, col 9.
                write(u'''_OutputPort(
        NATIVE_INT_TYPE portNum,
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 163, col 5
                    write(u'''        Fw::InputSerializePort* port
''')
                else: # generated from line 165, col 5
                    write(u'''        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 166, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 166, col 9.
                    write(u'''::Input''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 166, col 26
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 166, col 26.
                    write(u'''Port* port
''')
                write(u'''    )
  {
    FW_ASSERT(portNum < this->getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 170, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 170, col 38.
                write(u'''_OutputPorts(),static_cast<AssertArg>(portNum));
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 171, col 5
                    write(u'''    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 172, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 172, col 13.
                    write(u'''_OutputPort[portNum].registerSerialPort(port);
''')
                else: # generated from line 173, col 5
                    write(u'''    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 174, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 174, col 13.
                    write(u'''_OutputPort[portNum].addCallPort(port);
''')
                write(u'''  }
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 177, col 5
                    write(u'''#endif
''')
                write(u'''
''')
            write(u'''  // ----------------------------------------------------------------------
  // Serialization connectors for output ports
  // ----------------------------------------------------------------------

#if FW_PORT_SERIALIZATION

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 188, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 189, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 192, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 192, col 8.
                write(u''' ::
    set_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 193, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 193, col 9.
                write(u'''_OutputPort(
        NATIVE_INT_TYPE portNum,
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 195, col 5
                    write(u'''        Fw::InputPortBase *port
''')
                else: # generated from line 197, col 5
                    write(u'''        Fw::InputSerializePort *port
''')
                write(u'''    )
  {
    FW_ASSERT(portNum < this->getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 202, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 202, col 38.
                write(u'''_OutputPorts(),static_cast<AssertArg>(portNum));
    return this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 203, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 203, col 20.
                write(u'''_OutputPort[portNum].registerSerialPort(port);
  }
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 205, col 5
                    write(u'''#endif
''')
                write(u'''
''')
            write(u'''#endif

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 213, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Command registration
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 218, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 218, col 8.
            write(u''' ::
    regCommands(void)
  {
    FW_ASSERT(this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"CmdReg_Name",True) # u'${CmdReg_Name}' on line 221, col 23
            if _v is not None: write(_filter(_v, rawExpr=u'${CmdReg_Name}')) # from line 221, col 23.
            write(u'''_OutputPort[0].isConnected());
''')
            for mnemonic, opcodes, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 222, col 3
                if len(VFSL([locals()]+SL+[globals(), builtin],"opcodes",True)) == 1: # generated from line 223, col 5
                    write(u'''    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"CmdReg_Name",True) # u'${CmdReg_Name}' on line 224, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${CmdReg_Name}')) # from line 224, col 13.
                    write(u'''_OutputPort[0].invoke(
        this->getIdBase() + OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic.upper",True) # u'${mnemonic.upper}' on line 225, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper}')) # from line 225, col 36.
                    write(u'''
    );
''')
                else: # generated from line 227, col 5
                    inst = 0
                    write(u'''    switch (this->getInstance()) {
''')
                    for opcode in VFSL([locals()]+SL+[globals(), builtin],"opcodes",True): # generated from line 230, col 7
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 231, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 231, col 12.
                        write(u''':
          this->m_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"CmdReg_Name",True) # u'${CmdReg_Name}' on line 232, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'${CmdReg_Name}')) # from line 232, col 19.
                        write(u'''_OutputPort[0].invoke(
              this->getIdBase() + OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic.upper",True) # u'${mnemonic.upper}' on line 233, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper}')) # from line 233, col 42.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 233, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 233, col 60.
                        write(u'''
          );
          break;
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                    write(u'''      default:
          FW_ASSERT(0,this->getInstance());
          break;
    }
''')
            for ids, prmname, type, osets, osaves, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 244, col 3
                if len(VFSL([locals()]+SL+[globals(), builtin],"osets",True)) == 1: # generated from line 245, col 5
                    write(u'''    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"CmdReg_Name",True) # u'${CmdReg_Name}' on line 246, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${CmdReg_Name}')) # from line 246, col 13.
                    write(u'''_OutputPort[0].invoke(
        this->getIdBase() + OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 247, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 247, col 36.
                    write(u'''_SET
    );
''')
                else: # generated from line 249, col 5
                    inst = 0
                    write(u'''    switch (this->getInstance()) {
''')
                    for opcode in VFSL([locals()]+SL+[globals(), builtin],"osets",True): # generated from line 252, col 7
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 253, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 253, col 12.
                        write(u''':
          this->m_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"CmdReg_Name",True) # u'${CmdReg_Name}' on line 254, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'${CmdReg_Name}')) # from line 254, col 19.
                        write(u'''_OutputPort[0].invoke(
              this->getIdBase() + OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 255, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 255, col 42.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 255, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 255, col 59.
                        write(u'''_SET
          );
          break;
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                    write(u'''      default:
          FW_ASSERT(0,this->getInstance());
          break;
    }    
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"osaves",True)) == 1: # generated from line 265, col 5
                    write(u'''    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"CmdReg_Name",True) # u'${CmdReg_Name}' on line 266, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${CmdReg_Name}')) # from line 266, col 13.
                    write(u'''_OutputPort[0].invoke(
        this->getIdBase() + OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 267, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 267, col 36.
                    write(u'''_SAVE
    );
''')
                else: # generated from line 269, col 5
                    inst = 0
                    write(u'''    switch (this->getInstance()) {
''')
                    for opcode in VFSL([locals()]+SL+[globals(), builtin],"osaves",True): # generated from line 272, col 7
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 273, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 273, col 12.
                        write(u''':
          this->m_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"CmdReg_Name",True) # u'${CmdReg_Name}' on line 274, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'${CmdReg_Name}')) # from line 274, col 19.
                        write(u'''_OutputPort[0].invoke(
              this->getIdBase() + OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 275, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 275, col 42.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 275, col 59
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 275, col 59.
                        write(u'''_SAVE
          );
          break;
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                    write(u'''      default:
          FW_ASSERT(0,this->getInstance());
          break;
    }    
''')
            write(u'''  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 289, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Parameter loading
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 294, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 294, col 8.
            write(u'''::loadParameters(void) {

    Fw::ParamBuffer buff;
    Fw::SerializeStatus stat = Fw::FW_SERIALIZE_OK;
    FW_ASSERT(this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"ParamGet_Name",True) # u'${ParamGet_Name}' on line 298, col 23
            if _v is not None: write(_filter(_v, rawExpr=u'${ParamGet_Name}')) # from line 298, col 23.
            write(u'''_OutputPort[0].isConnected());

    FwPrmIdType _id; 
''')
            for ids, prmname, type, osets, osaves, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 301, col 3
                write(u'''    // choose parameter ID to get
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 303, col 5
                    write(u'''    _id = this->getIdBase() + PARAMID_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 304, col 39
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 304, col 39.
                    write(u''';
''')
                else: # generated from line 305, col 5
                    write(u'''       switch (this->getInstance()) {
''')
                    inst = 0
                    for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 308, col 8
                        write(u'''          case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 309, col 16
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 309, col 16.
                        write(u''':
             _id = this->getIdBase() + PARAMID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 310, col 48
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 310, col 48.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 310, col 65
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 310, col 65.
                        write(u''';
             break;
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                    write(u'''          default:
             // Silence compiler warning
             _id = (FwPrmIdType) 0;
             FW_ASSERT(0,this->getInstance());
             break;
       }
''')
                write(u'''    // Get parameter ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 321, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 321, col 22.
                write(u'''
    this->m_param_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 322, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 322, col 19.
                write(u'''_valid =
      this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"ParamGet_Name",True) # u'${ParamGet_Name}' on line 323, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${ParamGet_Name}')) # from line 323, col 15.
                write(u'''_OutputPort[0].invoke(
          _id,
          buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    if (this->m_param_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 331, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 331, col 23.
                write(u'''_valid == Fw::PARAM_VALID) {
''')
                if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 332, col 5
                    write(u'''      FwEnumStoreType ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 333, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 333, col 23.
                    write(u'''Val;
      stat = buff.deserialize(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 334, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 334, col 31.
                    write(u'''Val);
      this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 335, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 335, col 15.
                    write(u''' = static_cast<''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 335, col 40
                    if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 335, col 40.
                    write(u'''>(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 335, col 47
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 335, col 47.
                    write(u'''Val);
''')
                else: # generated from line 336, col 5
                    write(u'''      stat = buff.deserialize(this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 337, col 39
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 337, col 39.
                    write(u''');
''')
                write(u'''      // If there was a deserialization issue, mark it invalid.
      if (stat != Fw::FW_SERIALIZE_OK) {
''')
                if VFSL([locals()]+SL+[globals(), builtin],"default",True) == None: # generated from line 341, col 5
                    write(u'''        this->m_param_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 342, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 342, col 23.
                    write(u'''_valid = Fw::PARAM_INVALID;
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 343, col 5
                    write(u'''        this->m_param_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 344, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 344, col 23.
                    write(u'''_valid = Fw::PARAM_DEFAULT;
        // set default value
        this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 346, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 346, col 17.
                    write(u''' = "''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"default",True) # u'${default}' on line 346, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${default}')) # from line 346, col 31.
                    write(u'''";
''')
                else: # generated from line 347, col 5
                    write(u'''        this->m_param_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 348, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 348, col 23.
                    write(u'''_valid = Fw::PARAM_DEFAULT;
        // set default value
        this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 350, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 350, col 17.
                    write(u''' = ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"default",True) # u'${default}' on line 350, col 30
                    if _v is not None: write(_filter(_v, rawExpr=u'${default}')) # from line 350, col 30.
                    write(u''';
''')
                write(u'''      }
    }
    else {
''')
                if VFSL([locals()]+SL+[globals(), builtin],"default",True) == None: # generated from line 355, col 5
                    write(u'''      // No default
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 357, col 5
                    write(u'''      // set default value
      this->m_param_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 359, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 359, col 21.
                    write(u'''_valid = Fw::PARAM_DEFAULT;
      this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 360, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 360, col 15.
                    write(u''' = "''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"default",True) # u'${default}' on line 360, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${default}')) # from line 360, col 29.
                    write(u'''";
''')
                else: # generated from line 361, col 5
                    write(u'''      // set default value
      this->m_param_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 363, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 363, col 21.
                    write(u'''_valid = Fw::PARAM_DEFAULT;
      this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 364, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 364, col 15.
                    write(u''' = ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"default",True) # u'${default}' on line 364, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'${default}')) # from line 364, col 28.
                    write(u''';
''')
                write(u'''    }

    this->m_paramLock.unLock();

''')
            write(u'''    // Call notifier
    this->parametersLoaded();
  }

''')
        write(u'''  // ----------------------------------------------------------------------
  // Component construction, initialization, and destruction
  // ----------------------------------------------------------------------

  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 380, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 380, col 3.
        write(u''' ::
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "passive": # generated from line 381, col 1
            write(u'''#if FW_OBJECT_NAMES == 1
    ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 383, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 383, col 5.
            write(u'''(const char* compName) :
      Fw::PassiveComponentBase(compName)
#else
    ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 386, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 386, col 5.
            write(u'''() :
      Fw::PassiveComponentBase()
#endif
  {

''')
        elif VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "queued": # generated from line 391, col 1
            write(u'''#if FW_OBJECT_NAMES == 1
    ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 393, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 393, col 5.
            write(u'''(const char* compName) :
      Fw::QueuedComponentBase(compName)
#else
    ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 396, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 396, col 5.
            write(u'''() :
      Fw::QueuedComponentBase()
#endif
  {

''')
        else: # generated from line 401, col 1
            write(u'''#if FW_OBJECT_NAMES == 1
    ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 403, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 403, col 5.
            write(u'''(const char* compName) :
      Fw::ActiveComponentBase(compName)
#else
    ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 406, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 406, col 5.
            write(u'''() :
      Fw::ActiveComponentBase()
#endif
  {
''')
        write(u'''
''')
        for ids, tlmname, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 412, col 3
            if VFSL([locals()]+SL+[globals(), builtin],"update",True) != None and VFSL([locals()]+SL+[globals(), builtin],"update",True) != "always": # generated from line 413, col 5
                write(u'''    // Initialize telemetry channel ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'$tlmname' on line 414, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'$tlmname')) # from line 414, col 37.
                write(u'''
    this->m_first_update_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'${tlmname}' on line 415, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${tlmname}')) # from line 415, col 26.
                write(u''' = true;
''')
                if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == None: # generated from line 416, col 7
                    write(u'''    this->m_last_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'${tlmname}' on line 417, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${tlmname}')) # from line 417, col 18.
                    write(u''' = 0;
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 418, col 7
                    write(u'''    this->m_last_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'${tlmname}' on line 419, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${tlmname}')) # from line 419, col 18.
                    write(u''' = static_cast<''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 419, col 43
                    if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 419, col 43.
                    write(u'''>(0);
''')
        write(u'''  
''')
        for ids, eventname, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 424, col 3
            if VFSL([locals()]+SL+[globals(), builtin],"throttle",True) != None: # generated from line 425, col 5
                write(u'''    this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"eventname",True) # u'${eventname}' on line 426, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${eventname}')) # from line 426, col 13.
                write(u'''Throttle = 0;
''')
        write(u'''  
''')
        for ids, prmname, type, osets, osaves, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 430, col 3
            write(u'''    this->m_param_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 431, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 431, col 19.
            write(u'''_valid = Fw::PARAM_UNINIT;
''')
        write(u'''  }

  void ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 435, col 8
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 435, col 8.
        write(u''' ::
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "passive": # generated from line 436, col 1
            write(u'''    init(NATIVE_INT_TYPE instance)
''')
        elif VFSL([locals()]+SL+[globals(), builtin],"needs_msg_size",True): # generated from line 438, col 1
            write(u'''    init(
        NATIVE_INT_TYPE queueDepth,
        NATIVE_INT_TYPE msgSize,
        NATIVE_INT_TYPE instance
    )
''')
        else: # generated from line 444, col 1
            write(u'''    init(
        NATIVE_INT_TYPE queueDepth,
        NATIVE_INT_TYPE instance
    )
''')
        write(u'''  {

    // Initialize base class
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "passive": # generated from line 453, col 1
            write(u'''    Fw::PassiveComponentBase::init(instance);
''')
        elif VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "queued": # generated from line 455, col 1
            write(u'''    Fw::QueuedComponentBase::init(instance);
''')
        elif VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "active": # generated from line 457, col 1
            write(u'''    Fw::ActiveComponentBase::init(instance);
''')
        write(u'''
''')
        for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 461, col 1
            write(u'''    // Connect input port ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 462, col 27
            if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 462, col 27.
            write(u'''
    for (
        NATIVE_INT_TYPE port = 0;
        port < this->getNum_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 465, col 29
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 465, col 29.
            write(u'''_InputPorts();
        port++
    ) {

      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 469, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 469, col 15.
            write(u'''_InputPort[port].init();
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 470, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 470, col 15.
            write(u'''_InputPort[port].addCallComp(
          this,
          m_p_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 472, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 472, col 15.
            write(u'''_in
      );
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 474, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 474, col 15.
            write(u'''_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      char portName[80];
      (void) snprintf(
          portName,
          sizeof(portName),
          "%s_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 481, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 481, col 15.
            write(u'''_InputPort[%d]",
          this->m_objName,
          port
      );
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 485, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 485, col 15.
            write(u'''_InputPort[port].setObjName(portName);
#endif

    }

''')
        for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 491, col 1
            write(u'''    // Initialize output port ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 492, col 31
            if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 492, col 31.
            write(u'''
''')
            if VFSL([locals()]+SL+[globals(), builtin],"role",True) == 'LogTextEvent': # generated from line 493, col 3
                write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
            write(u'''    for (
        NATIVE_INT_TYPE port = 0;
        port < this->getNum_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 498, col 29
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 498, col 29.
            write(u'''_OutputPorts();
        port++
    ) {
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 501, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 501, col 15.
            write(u'''_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      char portName[80];
      (void) snprintf(
          portName,
          sizeof(portName),
          "%s_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 508, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 508, col 15.
            write(u'''_OutputPort[%d]",
          this->m_objName,
          port
      );
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 512, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 512, col 15.
            write(u'''_OutputPort[port].setObjName(portName);
#endif

    }
''')
            if VFSL([locals()]+SL+[globals(), builtin],"role",True) == 'LogTextEvent': # generated from line 516, col 3
                write(u'''#endif
''')
            write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) != "passive": # generated from line 521, col 1
            if VFSL([locals()]+SL+[globals(), builtin],"needs_msg_size",True): # generated from line 522, col 3
                write(u'''    // Passed-in size added to port number and message type enumeration sizes.
    // NATIVE_INT_TYPE cast because of compiler warning.
    this->m_msgSize = FW_MAX(msgSize +
        static_cast<NATIVE_INT_TYPE>(sizeof(NATIVE_INT_TYPE)) +
        static_cast<NATIVE_INT_TYPE>(sizeof(I32)),
        static_cast<NATIVE_INT_TYPE>(ComponentIpcSerializableBuffer::SERIALIZATION_SIZE));
        
    Os::Queue::QueueStatus qStat =
    this->createQueue(queueDepth,this->m_msgSize);
''')
            else: # generated from line 532, col 3
                write(u'''    Os::Queue::QueueStatus qStat =
    this->createQueue(
        queueDepth,
        ComponentIpcSerializableBuffer::SERIALIZATION_SIZE
    );
''')
            write(u'''    FW_ASSERT(
        Os::Queue::QUEUE_OK == qStat,
        static_cast<AssertArg>(qStat)
    );
''')
        write(u'''
  }

  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 547, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 547, col 3.
        write(u'''::
    ~''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 548, col 6
        if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 548, col 6.
        write(u'''() {

  }

  // ----------------------------------------------------------------------
  // Invocation functions for output ports
  // ----------------------------------------------------------------------

''')
        for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"invocation_functions",True): # generated from line 556, col 1
            params = VFSL([locals()]+SL+[globals(), builtin],"port_param_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
            args = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
            return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
            void_params = VFSL([locals()]+SL+[globals(), builtin],"params",True) == "void"
            void_return = VFSL([locals()]+SL+[globals(), builtin],"return_type",True)[:4] == "void"
            write(u'''  ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 562, col 3
            if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 562, col 3.
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 562, col 17
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 562, col 17.
            write(u''' ::
''')
            if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 563, col 3
                write(u'''    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 564, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 564, col 5.
                write(u'''_out(
        NATIVE_INT_TYPE portNum,
        Fw::SerializeBufferBase &Buffer
    )
  {
    FW_ASSERT(portNum < this->getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 569, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 569, col 38.
                write(u'''_OutputPorts(),static_cast<AssertArg>(portNum));
    this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 570, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 570, col 13.
                write(u'''_OutputPort[portNum].invokeSerial(Buffer);
  }
''')
            else: # generated from line 572, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"void_params",True): # generated from line 573, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 574, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 574, col 5.
                    write(u'''_out(NATIVE_INT_TYPE portNum)
  {
''')
                else: # generated from line 576, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 577, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 577, col 5.
                    write(u'''_out(
        NATIVE_INT_TYPE portNum,
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"params",True) # u'$params' on line 579, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$params')) # from line 579, col 9.
                    write(u'''
    )
  {
''')
                write(u'''    FW_ASSERT(portNum < this->getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 583, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 583, col 38.
                write(u'''_OutputPorts(),static_cast<AssertArg>(portNum));
''')
                if VFSL([locals()]+SL+[globals(), builtin],"void_return",True): # generated from line 584, col 5
                    write(u'''    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 585, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 585, col 13.
                    write(u'''_OutputPort[portNum].invoke(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 585, col 52
                    if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 585, col 52.
                    write(u''');
''')
                else: # generated from line 586, col 5
                    write(u'''    return this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 587, col 20
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 587, col 20.
                    write(u'''_OutputPort[portNum].invoke(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 587, col 59
                    if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 587, col 59.
                    write(u''');
''')
                write(u'''  }
''')
            write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_ports",True): # generated from line 593, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Getters for numbers of ports
  // ----------------------------------------------------------------------

''')
            for instance, type, direction, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"ports_all",True): # generated from line 598, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 599, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''  NATIVE_INT_TYPE ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 602, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 602, col 19.
                write(u''' ::
    getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 603, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 603, col 12.
                write(u'''_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"direction",True) # u'${direction}' on line 603, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'${direction}')) # from line 603, col 24.
                write(u'''Ports(void)
  {
    return (NATIVE_INT_TYPE) FW_NUM_ARRAY_ELEMENTS(
        this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 606, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 606, col 17.
                write(u'''_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"direction",True) # u'${direction}' on line 606, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'${direction}')) # from line 606, col 29.
                write(u'''Port
    );
  }
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 609, col 5
                    write(u'''#endif
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 615, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Port connection status queries
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 620, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 621, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''  bool ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 624, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 624, col 8.
                write(u''' ::
    isConnected_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 625, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 625, col 17.
                write(u'''_OutputPort(NATIVE_INT_TYPE portNum)
  {
     FW_ASSERT(
        portNum < this->getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 628, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 628, col 32.
                write(u'''_OutputPorts(),
        static_cast<AssertArg>(portNum)
     );
     return this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 631, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 631, col 21.
                write(u'''_OutputPort[portNum].isConnected();
  }
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 633, col 5
                    write(u'''#endif
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 639, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Calls for messages received on command input ports
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 644, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 644, col 8.
            write(u''' ::
    m_p_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Cmd_Name",True) # u'${Cmd_Name}' on line 645, col 9
            if _v is not None: write(_filter(_v, rawExpr=u'${Cmd_Name}')) # from line 645, col 9.
            write(u'''_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer &args
    )
  {

    // Select base class function based on opcode
    FW_ASSERT(callComp);
    ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 656, col 5
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 656, col 5.
            write(u'''* compPtr =
      (''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 657, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 657, col 8.
            write(u'''*) callComp;

    const U32 idBase = callComp->getIdBase();
    FW_ASSERT(opCode >= idBase, opCode, idBase);
    switch (opCode - idBase) {

''')
            for mnemonic, opcodes, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 663, col 3
                if len(VFSL([locals()]+SL+[globals(), builtin],"opcodes",True)) == 1: # generated from line 664, col 5
                    write(u'''      case OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic.upper",True) # u'${mnemonic.upper}' on line 665, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper}')) # from line 665, col 19.
                    write(u''': /*!< ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 665, col 43
                    if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 665, col 43.
                    write(u''' */
''')
                else: # generated from line 666, col 5
                    inst = 0
                    for opcode in VFSL([locals()]+SL+[globals(), builtin],"opcodes",True): # generated from line 668, col 7
                        write(u'''      case OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic.upper",True) # u'${mnemonic.upper}' on line 669, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper}')) # from line 669, col 19.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 669, col 37
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 669, col 37.
                        write(u''': /*!< ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 669, col 51
                        if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 669, col 51.
                        write(u''' */
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                write(u'''        compPtr->''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 673, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 673, col 18.
                write(u'''_cmdHandlerBase(
            opCode,
            cmdSeq,
            args
        );
        break;
        
''')
            for ids, prmname, type, osets, osaves, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 681, col 3
                if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 682, col 5
                    write(u'''      case OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 683, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 683, col 19.
                    write(u'''_SET: 
''')
                else: # generated from line 684, col 5
                    inst = 0
                    for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 686, col 7
                        write(u'''      case OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 687, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 687, col 19.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 687, col 36
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 687, col 36.
                        write(u'''_SET: 
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                write(u'''      {
        Fw::CommandResponse _cstat = compPtr->paramSet_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 692, col 56
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 692, col 56.
                write(u'''(args);
        compPtr->cmdResponse_out(
            opCode,
            cmdSeq,
            _cstat
        );
        break;
      }
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 700, col 5
                    write(u'''      case OPCODE_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 701, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 701, col 19.
                    write(u'''_SAVE: 
''')
                else: # generated from line 702, col 5
                    inst = 0
                    for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 704, col 7
                        write(u'''      case OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 705, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 705, col 19.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 705, col 36
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 705, col 36.
                        write(u'''_SAVE: 
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                write(u'''      {
        Fw::CommandResponse _cstat = compPtr->paramSave_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 710, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 710, col 57.
                write(u'''();
        compPtr->cmdResponse_out(
            opCode,
            cmdSeq,
            _cstat
        );
        break;
      }
''')
            write(u'''      default: {
        compPtr->cmdResponse_out(
            opCode,cmdSeq,
            Fw::COMMAND_INVALID_OPCODE
        );
        break;
      }

    }

  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 731, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 731, col 8.
            write(u''' ::
    cmdResponse_out(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CommandResponse response
    )
  {
    FW_ASSERT(this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 738, col 23
            if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 738, col 23.
            write(u'''_OutputPort[0].isConnected());
    this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 739, col 13
            if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 739, col 13.
            write(u'''_OutputPort[0].invoke(opCode,cmdSeq,response);
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True): # generated from line 743, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Base class command functions
  // ----------------------------------------------------------------------

''')
            for mnemonic, opcodes, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 748, col 3
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 749, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 749, col 8.
                write(u''' ::
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 750, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 750, col 5.
                write(u'''_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer &args
    )
  {

''')
                if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == 'guarded' or VFSL([locals()]+SL+[globals(), builtin],"sync",True) == 'sync': # generated from line 757, col 5
                    args = VFSL([locals()]+SL+[globals(), builtin],"command_args",True)[VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True)]
                    if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)): # generated from line 759, col 7
                        write(u'''    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

''')
                        for arg_name, arg_type, comment, is_enum in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 766, col 9
                            write(u'''    ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 767, col 5
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 767, col 5.
                            write(u''' ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 767, col 15
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 767, col 15.
                            write(u''';
''')
                            if VFSL([locals()]+SL+[globals(), builtin],"is_enum",True) == "enum": # generated from line 768, col 11
                                write(u'''    FwEnumStoreType ''')
                                _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 769, col 21
                                if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 769, col 21.
                                write(u'''Int;
    _status = args.deserialize(''')
                                _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 770, col 32
                                if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 770, col 32.
                                write(u'''Int);
    ''')
                                _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 771, col 5
                                if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 771, col 5.
                                write(u''' = (''')
                                _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'${arg_type}' on line 771, col 18
                                if _v is not None: write(_filter(_v, rawExpr=u'${arg_type}')) # from line 771, col 18.
                                write(u''')''')
                                _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 771, col 30
                                if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 771, col 30.
                                write(u'''Int;
''')
                            else: # generated from line 772, col 11
                                write(u'''    _status = args.deserialize(''')
                                _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 773, col 32
                                if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 773, col 32.
                                write(u''');
''')
                            write(u'''    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 776, col 19
                            if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 776, col 19.
                            write(u'''_OutputPort[0].isConnected()) {
        this->m_''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 777, col 17
                            if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 777, col 17.
                            write(u'''_OutputPort[0].invoke(
            opCode,
            cmdSeq,Fw::COMMAND_FORMAT_ERROR
        );
      }
      return;
    }

''')
                    write(u'''#if FW_CMD_CHECK_RESIDUAL      
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 791, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 791, col 19.
                    write(u'''_OutputPort[0].isConnected()) {
        this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 792, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 792, col 17.
                    write(u'''_OutputPort[0].invoke(
            opCode,
            cmdSeq,Fw::COMMAND_FORMAT_ERROR
        );
      }
      return;
    }
#endif    
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == 'guarded': # generated from line 800, col 7
                        write(u'''    this->lock();
''')
                    if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)) == 0: # generated from line 803, col 7
                        write(u'''    this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 804, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 804, col 11.
                        write(u'''_cmdHandler(opCode,cmdSeq);
''')
                    else: # generated from line 805, col 7
                        write(u'''    this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 806, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 806, col 11.
                        write(u'''_cmdHandler(
        opCode,
        cmdSeq,
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"command_args_str",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$command_args_str($args)' on line 809, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$command_args_str($args)')) # from line 809, col 9.
                        write(u'''
    );
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == 'guarded': # generated from line 812, col 7
                        write(u'''    this->unLock();
''')
                    write(u'''
''')
                if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == 'async': # generated from line 817, col 5
                    write(u'''    // Call pre-message hook
    this->''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 819, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 819, col 11.
                    write(u'''_preMsgHook(opCode,cmdSeq);

    // Defer deserializing arguments to the message dispatcher
    // to avoid deserializing and reserializing just for IPC
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize for IPC
''')
                    if len(VFSL([locals()]+SL+[globals(), builtin],"opcodes",True)) == 1: # generated from line 827, col 5
                        write(u'''    _status = msg.serialize((NATIVE_INT_TYPE)CMD_''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True),"upper",False)() # u'${mnemonic.upper()}' on line 828, col 50
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper()}')) # from line 828, col 50.
                        write(u''');
''')
                    else: # generated from line 829, col 5
                        write(u'''    switch (this->getInstance()) {
''')
                        inst = 0
                        for opcode in VFSL([locals()]+SL+[globals(), builtin],"opcodes",True): # generated from line 832, col 8
                            write(u'''        case ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 833, col 14
                            if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 833, col 14.
                            write(u''':
            _status = msg.serialize((NATIVE_INT_TYPE)CMD_''')
                            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True),"upper",False)() # u'${mnemonic.upper()}' on line 834, col 58
                            if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper()}')) # from line 834, col 58.
                            write(u'''_''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 834, col 78
                            if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 834, col 78.
                            write(u''');
            break;
''')
                            inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                        write(u'''        default:
           // Silence compiler warning
           _status = (Fw::SerializeStatus) 0;
           FW_ASSERT(0,this->getInstance());
           break;
    };
''')
                    write(u'''    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
        );

    // Fake port number to make message dequeue work
    NATIVE_INT_TYPE port = 0;
    _status = msg.serialize(port);
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

    _status = msg.serialize(opCode);
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

    _status = msg.serialize(cmdSeq);
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

    _status = msg.serialize(args);
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );
    
    // send message
    Os::Queue::QueueBlocking _block = 
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"full",True) == 'block': # generated from line 878, col 7
                        write(u'''      Os::Queue::QUEUE_BLOCKING;
''')
                    else : # generated from line 880, col 7
                        write(u'''      Os::Queue::QUEUE_NONBLOCKING;
''')
                    write(u'''    Os::Queue::QueueStatus qStatus =
      this->m_queue.send(msg, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"priority",True) # u'${priority}' on line 884, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${priority}')) # from line 884, col 31.
                    write(u''',_block);
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"full",True) == 'drop': # generated from line 885, col 7
                        write(u'''    if (qStatus == Os::Queue::QUEUE_FULL) {
        this->incNumMsgDropped();
        return;
    }
''')
                    write(u'''    FW_ASSERT(
        qStatus == Os::Queue::QUEUE_OK,
        static_cast<AssertArg>(qStatus)
    );    

''')
                write(u'''  }

''')
                if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "async": # generated from line 899, col 5
                    write(u'''  void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 900, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 900, col 8.
                    write(u'''::
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 901, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 901, col 5.
                    write(u'''_preMsgHook(
        FwOpcodeType opCode,
        U32 cmdSeq
    )
  {
    // Defaults to no-op; can be overridden
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 912, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Telemetry write functions
  // ----------------------------------------------------------------------

''')
            for ids, tlmname, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 917, col 3
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 918, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 918, col 8.
                write(u''' ::
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 919, col 5
                    write(u'''    tlmWrite_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'${tlmname}' on line 920, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${tlmname}')) # from line 920, col 14.
                    write(u'''(Fw::TlmString& arg)
''')
                else: # generated from line 921, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 922, col 7
                        write(u'''    tlmWrite_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'${tlmname}' on line 923, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u'${tlmname}')) # from line 923, col 14.
                        write(u'''(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 923, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 923, col 25.
                        write(u''' arg)
''')
                    else: # generated from line 924, col 7
                        if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "user": # generated from line 925, col 9
                            write(u'''    tlmWrite_''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'${tlmname}' on line 926, col 14
                            if _v is not None: write(_filter(_v, rawExpr=u'${tlmname}')) # from line 926, col 14.
                            write(u'''(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 926, col 25
                            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 926, col 25.
                            write(u'''& arg)
''')
                        else: # generated from line 927, col 9
                            write(u'''    tlmWrite_''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'${tlmname}' on line 928, col 14
                            if _v is not None: write(_filter(_v, rawExpr=u'${tlmname}')) # from line 928, col 14.
                            write(u'''(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 928, col 25
                            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 928, col 25.
                            write(u''' arg)
''')
                write(u'''  {

''')
                if VFSL([locals()]+SL+[globals(), builtin],"update",True) == "on_change": # generated from line 934, col 5
                    write(u'''    // Check to see if it is the first time
    if (not this->m_first_update_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'$tlmname' on line 936, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'$tlmname')) # from line 936, col 34.
                    write(u""") {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_""")
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'$tlmname' on line 938, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$tlmname')) # from line 938, col 31.
                    write(u''') {
        return;
      } else {
        this->m_last_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'$tlmname' on line 941, col 22
                    if _v is not None: write(_filter(_v, rawExpr=u'$tlmname')) # from line 941, col 22.
                    write(u''' = arg;
      }
    }
    else {
      this->m_first_update_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'$tlmname' on line 945, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$tlmname')) # from line 945, col 28.
                    write(u''' = false;
      this->m_last_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname",True) # u'$tlmname' on line 946, col 20
                    if _v is not None: write(_filter(_v, rawExpr=u'$tlmname')) # from line 946, col 20.
                    write(u''' = arg;
    }

''')
                write(u'''    if (this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Tlm_Name",True) # u'${Tlm_Name}' on line 950, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${Tlm_Name}')) # from line 950, col 17.
                write(u'''_OutputPort[0].isConnected()) {
      Fw::Time _tlmTime;
      if (this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Time_Name",True) # u'${Time_Name}' on line 952, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${Time_Name}')) # from line 952, col 19.
                write(u'''_OutputPort[0].isConnected()) {
         this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Time_Name",True) # u'${Time_Name}' on line 953, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${Time_Name}')) # from line 953, col 18.
                write(u'''_OutputPort[0].invoke( _tlmTime);
      }
      Fw::TlmBuffer _tlmBuff;
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 956, col 5
                    write(u'''      arg.setMaxSerialize(''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'$size' on line 957, col 27
                    if _v is not None: write(_filter(_v, rawExpr=u'$size')) # from line 957, col 27.
                    write(u''');
''')
                if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 959, col 5
                    write(u'''      Fw::SerializeStatus _stat = _tlmBuff.serialize((FwEnumStoreType)arg);
''')
                else: # generated from line 961, col 5
                    write(u'''      Fw::SerializeStatus _stat = _tlmBuff.serialize(arg);
''')
                write(u'''      FW_ASSERT(
          _stat == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_stat)
      );
      
      FwChanIdType _id;
      
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 971, col 5
                    write(u'''      _id = this->getIdBase() + CHANNELID_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname.upper",True) # u'${tlmname.upper}' on line 972, col 43
                    if _v is not None: write(_filter(_v, rawExpr=u'${tlmname.upper}')) # from line 972, col 43.
                    write(u''';
''')
                else: # generated from line 973, col 5
                    inst = 0
                    write(u'''      switch (this->getInstance()) {
''')
                    for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 976, col 7
                        write(u'''          case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 977, col 16
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 977, col 16.
                        write(u''':
            _id = this->getIdBase() + CHANNELID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"tlmname.upper",True) # u'${tlmname.upper}' on line 978, col 49
                        if _v is not None: write(_filter(_v, rawExpr=u'${tlmname.upper}')) # from line 978, col 49.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 978, col 66
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 978, col 66.
                        write(u''';
            break;
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                    write(u'''          default:
            // Silence compiler warning
            _id = (FwChanIdType) 0;  
            FW_ASSERT(0,this->getInstance());
            break;
      }
''')
                write(u'''      
      this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Tlm_Name",True) # u'${Tlm_Name}' on line 990, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${Tlm_Name}')) # from line 990, col 15.
                write(u'''_OutputPort[0].invoke(
          _id,
          _tlmTime,
          _tlmBuff
      );
    }

  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True) or VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 1001, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1006, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1006, col 12.
            write(u''' ::
    getTime(void) 
  {
    if (this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Time_Name",True) # u'${Time_Name}' on line 1009, col 17
            if _v is not None: write(_filter(_v, rawExpr=u'${Time_Name}')) # from line 1009, col 17.
            write(u'''_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"Time_Name",True) # u'${Time_Name}' on line 1011, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'${Time_Name}')) # from line 1011, col 15.
            write(u'''_OutputPort[0].invoke(_time);
      return _time;
    } else {
      return Fw::Time(TB_NONE,0,0);
    }
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 1019, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Parameter update hook
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1024, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1024, col 8.
            write(u''' ::
    parameterUpdated(FwPrmIdType id)
  {
    // Do nothing by default
  }

  // ----------------------------------------------------------------------
  // Parameter load hook
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1034, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1034, col 8.
            write(u''' ::
    parametersLoaded()
  {
    // Do nothing by default
  }

  // ----------------------------------------------------------------------
  // Protected parameter get functions
  // ----------------------------------------------------------------------

''')
            for ids, prmname, type, osets, osaves, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 1044, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 1045, col 5
                    write(u'''  Fw::ParamString ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1046, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1046, col 19.
                    write(u''' ::
    paramGet_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1047, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1047, col 14.
                    write(u'''(Fw::ParamValid& valid)
  {
    Fw::ParamString _local;
''')
                elif typeinfo == "enum": # generated from line 1050, col 5
                    write(u'''  ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1051, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1051, col 3.
                    write(u'''::''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1051, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1051, col 18.
                    write(u''' ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1051, col 26
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1051, col 26.
                    write(u''' ::
    paramGet_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1052, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1052, col 14.
                    write(u'''(Fw::ParamValid& valid)
  {
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1054, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1054, col 5.
                    write(u'''::''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1054, col 20
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1054, col 20.
                    write(u''' _local;
''')
                else: # generated from line 1055, col 5
                    write(u'''  ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1056, col 3
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1056, col 3.
                    write(u''' ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1056, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1056, col 11.
                    write(u''' ::
    paramGet_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1057, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1057, col 14.
                    write(u'''(Fw::ParamValid& valid)
  {
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1059, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1059, col 5.
                    write(u''' _local;
''')
                write(u'''    this->m_paramLock.lock();
    valid = this->m_param_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1062, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1062, col 27.
                write(u'''_valid;
    _local = this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1063, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1063, col 22.
                write(u''';
    this->m_paramLock.unLock();
    return _local;
  }

''')
            write(u'''  // ----------------------------------------------------------------------
  // Private parameter get function
  // ----------------------------------------------------------------------

  Fw::ParamValid ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1073, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1073, col 18.
            write(u''' ::
    getParam(
      FwPrmIdType id, 
      Fw::ParamBuffer& buff
    ) 
  {
    if (this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"ParamGet_Name",True) # u'${ParamGet_Name}' on line 1079, col 17
            if _v is not None: write(_filter(_v, rawExpr=u'${ParamGet_Name}')) # from line 1079, col 17.
            write(u'''_OutputPort[0].isConnected()) {
      return this->m_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"ParamGet_Name",True) # u'${ParamGet_Name}' on line 1080, col 22
            if _v is not None: write(_filter(_v, rawExpr=u'${ParamGet_Name}')) # from line 1080, col 22.
            write(u'''_OutputPort[0].invoke(id,buff);
    } else {
      return Fw::PARAM_INVALID;
    }

  }

  // ----------------------------------------------------------------------
  // Parameter set functions
  // ----------------------------------------------------------------------

''')
            for ids, prmname, type, osets, osaves, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 1091, col 3
                write(u'''  Fw::CommandResponse ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1092, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1092, col 23.
                write(u''' ::
    paramSet_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1093, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1093, col 14.
                write(u'''(Fw::SerializeBufferBase &val)
  {

''')
                if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 1096, col 5
                    write(u'''    FwEnumStoreType _local_val;
    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::COMMAND_VALIDATION_ERROR;
    }

    this->m_paramLock.lock();
    // Assign the value only if successfully deserialized
    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1105, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1105, col 13.
                    write(u''' = static_cast<''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 1105, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 1105, col 38.
                    write(u'''>(_local_val);
''')
                else: # generated from line 1106, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 1107, col 7
                        write(u'''    Fw::ParamString _local_val;
''')
                    else: # generated from line 1109, col 7
                        write(u'''    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 1110, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 1110, col 5.
                        write(u''' _local_val;
''')
                    write(u'''    Fw::SerializeStatus _stat = val.deserialize(_local_val);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::COMMAND_VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1119, col 13
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1119, col 13.
                    write(u''' = _local_val;
''')
                write(u'''    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 1124, col 36
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 1124, col 36.
                write(u''');
    return Fw::COMMAND_OK;

  }

  // ----------------------------------------------------------------------
  // Parameter save functions
  // ----------------------------------------------------------------------

  Fw::CommandResponse ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1133, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1133, col 23.
                write(u''' ::
    paramSave_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1134, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1134, col 15.
                write(u'''(void)
  {

    if (this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"ParamSet_Name",True) # u'${ParamSet_Name}' on line 1137, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${ParamSet_Name}')) # from line 1137, col 17.
                write(u'''_OutputPort[0].isConnected()) {
      Fw::ParamBuffer saveBuff;
      this->m_paramLock.lock();

''')
                if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 1141, col 5
                    write(u'''      Fw::SerializeStatus stat =
        saveBuff.serialize(static_cast<FwEnumStoreType>(m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1143, col 59
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1143, col 59.
                    write(u'''));
''')
                else: # generated from line 1144, col 5
                    write(u'''      Fw::SerializeStatus stat =
        saveBuff.serialize(m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname",True) # u'${prmname}' on line 1146, col 30
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname}')) # from line 1146, col 30.
                    write(u''');
''')
                write(u'''      this->m_paramLock.unLock();
      if (stat != Fw::FW_SERIALIZE_OK) {
        return Fw::COMMAND_VALIDATION_ERROR;
      }

      FwPrmIdType id = 0;
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 1154, col 5
                    write(u'''      id = this->getIdBase() + PARAMID_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 1155, col 40
                    if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 1155, col 40.
                    write(u''';
''')
                else: # generated from line 1156, col 5
                    write(u'''      switch (this->getInstance()) {
''')
                    inst = 0
                    for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 1159, col 7
                        write(u'''         case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 1160, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 1160, col 15.
                        write(u''':
            id = this->getIdBase() + PARAMID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"prmname.upper",True) # u'${prmname.upper}' on line 1161, col 46
                        if _v is not None: write(_filter(_v, rawExpr=u'${prmname.upper}')) # from line 1161, col 46.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 1161, col 63
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 1161, col 63.
                        write(u''';
            break;
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                    write(u'''         default:
            FW_ASSERT(0,this->getInstance());
            break;
      }
''')
                write(u'''      // Save the parameter
      this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"ParamSet_Name",True) # u'${ParamSet_Name}' on line 1171, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${ParamSet_Name}')) # from line 1171, col 15.
                write(u'''_OutputPort[0].invoke(
          id,
          saveBuff
      );
      return Fw::COMMAND_OK;

    }

    return Fw::COMMAND_EXECUTION_ERROR;

  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 1185, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Event handling functions
  // ----------------------------------------------------------------------

''')
            for ids, eventname, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 1190, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"event_param_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"eventname",True)]
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1192, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1192, col 8.
                write(u''' ::
    log_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 1193, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 1193, col 9.
                write(u'''_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"eventname",True) # u'${eventname}' on line 1193, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${eventname}')) # from line 1193, col 21.
                write(u'''(
        ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"params",True) # u'$params' on line 1194, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$params')) # from line 1194, col 9.
                write(u'''
    )
  {
  
''')
                if VFSL([locals()]+SL+[globals(), builtin],"throttle",True) != None: # generated from line 1198, col 5
                    write(u'''    // check throttle value
    if (this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"eventname",True) # u'${eventname}' on line 1200, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${eventname}')) # from line 1200, col 17.
                    write(u'''Throttle >= EVENTID_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"eventname.upper",True) # u'${eventname.upper}' on line 1200, col 49
                    if _v is not None: write(_filter(_v, rawExpr=u'${eventname.upper}')) # from line 1200, col 49.
                    write(u'''_THROTTLE) {
        return;
    } else {
        this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"eventname",True) # u'${eventname}' on line 1203, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${eventname}')) # from line 1203, col 17.
                    write(u'''Throttle++;
    }
''')
                write(u'''
    // Get the time
    Fw::Time _logTime;
    if (this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Time_Name",True) # u'${Time_Name}' on line 1209, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${Time_Name}')) # from line 1209, col 17.
                write(u'''_OutputPort[0].isConnected()) {
       this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"Time_Name",True) # u'${Time_Name}' on line 1210, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'${Time_Name}')) # from line 1210, col 16.
                write(u'''_OutputPort[0].invoke( _logTime);
    }
    
    FwEventIdType _id = static_cast<FwEventIdType>(0);
    
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 1215, col 5
                    write(u'''    _id = this->getIdBase() + EVENTID_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"eventname.upper",True) # u'${eventname.upper}' on line 1216, col 39
                    if _v is not None: write(_filter(_v, rawExpr=u'${eventname.upper}')) # from line 1216, col 39.
                    write(u''';
''')
                else: # generated from line 1217, col 5
                    write(u'''    switch (this->getInstance()) {
''')
                    inst = 0
                    for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 1220, col 7
                        write(u'''      case ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 1221, col 12
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 1221, col 12.
                        write(u''':
        _id = this->getIdBase() + EVENTID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"eventname.upper",True) # u'${eventname.upper}' on line 1222, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'${eventname.upper}')) # from line 1222, col 43.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 1222, col 62
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 1222, col 62.
                        write(u''';
        break;
''')
                        inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                    write(u'''      default:
        FW_ASSERT(0,this->getInstance());
        break;
    };
''')
                write(u'''
    // Emit the event on the log port
    if (this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LogEvent_Name",True) # u'${LogEvent_Name}' on line 1233, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${LogEvent_Name}')) # from line 1233, col 17.
                write(u'''_OutputPort[0].isConnected()) {

      Fw::LogBuffer _logBuff;
''')
                args = VFSL([locals()]+SL+[globals(), builtin],"event_args",True)[VFSL([locals()]+SL+[globals(), builtin],"eventname",True)]
                if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)): # generated from line 1237, col 5
                    write(u'''      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"severity",True) == "FATAL": # generated from line 1241, col 1
                        write(u'''      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$len($args)' on line 1243, col 52
                        if _v is not None: write(_filter(_v, rawExpr=u'$len($args)')) # from line 1243, col 52.
                        write(u'''+1));
      FW_ASSERT(
          _status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_status)
      );
      // For FATAL, add stack size of 4 and a dummy entry. No support for stacks yet.
      _status = _logBuff.serialize(static_cast<U8>(4));
      FW_ASSERT(
          _status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_status)
      );
      _status = _logBuff.serialize(static_cast<U32>(0));
      FW_ASSERT(
          _status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_status)
      );
''')
                    else: # generated from line 1259, col 1
                        write(u'''      // Serialize the number of arguments
      _status = _logBuff.serialize(static_cast<U8>(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"len",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$len($args)' on line 1261, col 52
                        if _v is not None: write(_filter(_v, rawExpr=u'$len($args)')) # from line 1261, col 52.
                        write(u'''));
      FW_ASSERT(
          _status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_status)
      );
''')
                    write(u'''#endif
''')
                else: # generated from line 1268, col 5
                    write(u'''#if FW_AMPCS_COMPATIBLE
      // for AMPCS, need to encode zero arguments
      Fw::SerializeStatus _zero_status = Fw::FW_SERIALIZE_OK;
      _zero_status = _logBuff.serialize(static_cast<U8>(0));
      FW_ASSERT(
          _zero_status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_zero_status)
      );
#endif
''')
                write(u'''
''')
                for arg_name, arg_type, comment, size, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 1280, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 1281, col 7
                        write(u'''#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(static_cast<U8>(sizeof(FwEnumStoreType)));
      FW_ASSERT(
          _status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_status)
      );
#endif

      _status = _logBuff.serialize(
          static_cast<FwEnumStoreType>(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1292, col 40
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1292, col 40.
                        write(u''')
      );
''')
                    else: # generated from line 1294, col 7
                        if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "string": # generated from line 1295, col 9
                            write(u'''      ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1296, col 7
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1296, col 7.
                            write(u'''.setMaxSerialize(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"size",True) # u'${size}' on line 1296, col 35
                            if _v is not None: write(_filter(_v, rawExpr=u'${size}')) # from line 1296, col 35.
                            write(u''');
''')
                        else: # generated from line 1297, col 9
                            write(u'''#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serialize(
          static_cast<U8>(sizeof(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1301, col 34
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1301, col 34.
                            write(u'''))
      );
      FW_ASSERT(
          _status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_status)
      );
#endif

''')
                        write(u'''      _status = _logBuff.serialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1310, col 36
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1310, col 36.
                        write(u''');
''')
                    write(u'''      FW_ASSERT(
          _status == Fw::FW_SERIALIZE_OK,
          static_cast<AssertArg>(_status)
      );

''')
                write(u'''
      this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LogEvent_Name",True) # u'${LogEvent_Name}' on line 1319, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${LogEvent_Name}')) # from line 1319, col 15.
                write(u'''_OutputPort[0].invoke(
          _id,
          _logTime,Fw::LOG_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 1321, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 1321, col 28.
                write(u''',
          _logBuff
      );

    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LogTextEvent_Name",True) # u'${LogTextEvent_Name}' on line 1329, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${LogTextEvent_Name}')) # from line 1329, col 17.
                write(u'''_OutputPort[0].isConnected()) {

#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"format_string",True) # u'${format_string}' on line 1333, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${format_string}')) # from line 1333, col 19.
                write(u'''";
#else
      const char* _formatString =
        "%s: ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"format_string",True) # u'${format_string}' on line 1336, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${format_string}')) # from line 1336, col 14.
                write(u'''";
#endif

      char _textBuffer[FW_LOG_TEXT_BUFFER_SIZE];

''')
                for arg_name, arg_type, comment, size, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 1341, col 5
                    if not (VFSL([locals()]+SL+[globals(), builtin],"is_primitive_type",False)(VFSL([locals()]+SL+[globals(), builtin],"arg_type",True)) or (VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum") or (VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "string")): # generated from line 1342, col 7
                        write(u'''      Fw::EightyCharString ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1343, col 28
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1343, col 28.
                        write(u'''Str;
      ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1344, col 7
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1344, col 7.
                        write(u'''.toString(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1344, col 28
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1344, col 28.
                        write(u'''Str);
''')
                write(u'''      (void) snprintf(
          _textBuffer,
          FW_LOG_TEXT_BUFFER_SIZE,
          _formatString,
#if FW_OBJECT_NAMES == 1
          this->m_objName,
#endif
          "''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"eventname",True) # u'${eventname}' on line 1354, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${eventname}')) # from line 1354, col 12.
                write(u''' "
''')
                for arg_name, arg_type, comment, size, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 1355, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"is_primitive_type",False)(VFSL([locals()]+SL+[globals(), builtin],"arg_type",True)) or (VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum"): # generated from line 1356, col 7
                        write(u'''        , ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1357, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1357, col 11.
                        write(u'''
''')
                    elif VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "string": # generated from line 1358, col 7
                        write(u'''        , ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1359, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1359, col 11.
                        write(u'''.toChar()
''')
                    else: # generated from line 1360, col 7
                        write(u'''        , ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1361, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1361, col 11.
                        write(u'''Str.toChar()
''')
                write(u'''      );

      // Null terminate
      _textBuffer[FW_LOG_TEXT_BUFFER_SIZE-1] = 0;
      Fw::TextLogString _logString = _textBuffer;
      this->m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"LogTextEvent_Name",True) # u'${LogTextEvent_Name}' on line 1369, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${LogTextEvent_Name}')) # from line 1369, col 15.
                write(u'''_OutputPort[0].invoke(
          _id,
          _logTime,Fw::TEXT_LOG_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 1371, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 1371, col 33.
                write(u''',
          _logString
      );

    }
#endif

  }
  
''')
                if VFSL([locals()]+SL+[globals(), builtin],"throttle",True) != None: # generated from line 1380, col 3
                    write(u'''    void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1381, col 10
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1381, col 10.
                    write(u'''::log_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 1381, col 29
                    if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 1381, col 29.
                    write(u'''_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"eventname",True) # u'${eventname}' on line 1381, col 41
                    if _v is not None: write(_filter(_v, rawExpr=u'${eventname}')) # from line 1381, col 41.
                    write(u'''_ThrottleClear(void) {
        // reset throttle counter
        this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"eventname",True) # u'${eventname}' on line 1383, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'${eventname}')) # from line 1383, col 17.
                    write(u'''Throttle = 0;
    }
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_internal_interfaces",True): # generated from line 1389, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Invocation functions for interfaces
  // ----------------------------------------------------------------------

''')
            for ifname, priority, full in VFSL([locals()]+SL+[globals(), builtin],"internal_interfaces",True): # generated from line 1394, col 3
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1395, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1395, col 8.
                write(u'''::
''')
                if VFN(VFSL([locals()]+SL+[globals(), builtin],"internal_interface_param_strs",True),"has_key",False)(VFSL([locals()]+SL+[globals(), builtin],"ifname",True)): # generated from line 1396, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"ifname",True) # u'${ifname}' on line 1397, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${ifname}')) # from line 1397, col 5.
                    write(u'''_internalInterfaceInvoke(
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"internal_interface_param_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"ifname",True)] # u'$internal_interface_param_strs[$ifname]' on line 1398, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$internal_interface_param_strs[$ifname]')) # from line 1398, col 9.
                    write(u'''
    )
''')
                else: # generated from line 1400, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"ifname",True) # u'${ifname}' on line 1401, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${ifname}')) # from line 1401, col 5.
                    write(u'''_internalInterfaceInvoke(void)
''')
                write(u'''  {

    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize the message ID
    _status = msg.serialize(static_cast<NATIVE_INT_TYPE>(INT_IF_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"ifname.upper",True) # u'${ifname.upper}' on line 1409, col 65
                if _v is not None: write(_filter(_v, rawExpr=u'${ifname.upper}')) # from line 1409, col 65.
                write(u'''));
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

    // Fake port number to make message dequeue work
    _status = msg.serialize(static_cast<NATIVE_INT_TYPE>(0));
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

''')
                for argname, argtype, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"internal_interface_args",True)[VFSL([locals()]+SL+[globals(), builtin],"ifname",True)]: # generated from line 1422, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 1423, col 7
                        write(u'''    _status = msg.serialize(static_cast<FwEnumStoreType>(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'$argname' on line 1424, col 58
                        if _v is not None: write(_filter(_v, rawExpr=u'$argname')) # from line 1424, col 58.
                        write(u'''));
''')
                    else: # generated from line 1425, col 7
                        write(u'''    _status = msg.serialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"argname",True) # u'$argname' on line 1426, col 29
                        if _v is not None: write(_filter(_v, rawExpr=u'$argname')) # from line 1426, col 29.
                        write(u''');
''')
                    write(u'''    FW_ASSERT(_status == Fw::FW_SERIALIZE_OK, static_cast<AssertArg>(_status));
''')
                write(u'''    
    // send message
    Os::Queue::QueueBlocking _block = 
''')
                if VFSL([locals()]+SL+[globals(), builtin],"full",True) == 'block': # generated from line 1433, col 7
                    write(u'''      Os::Queue::QUEUE_BLOCKING;
''')
                else : # generated from line 1435, col 7
                    write(u'''      Os::Queue::QUEUE_NONBLOCKING;
''')
                write(u'''    Os::Queue::QueueStatus qStatus =
      this->m_queue.send(msg, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"priority",True) # u'${priority}' on line 1439, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${priority}')) # from line 1439, col 31.
                write(u''',_block);
''')
                if VFSL([locals()]+SL+[globals(), builtin],"full",True) == 'drop': # generated from line 1440, col 7
                    write(u'''    if (qStatus == Os::Queue::QUEUE_FULL) {
        this->incNumMsgDropped();
        return;
    }
''')
                write(u'''    FW_ASSERT(
        qStatus == Os::Queue::QUEUE_OK,
        static_cast<AssertArg>(qStatus)
    );    

  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_guarded_ports",True): # generated from line 1455, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Mutex functions for guarded ports
  // ----------------------------------------------------------------------

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1460, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1460, col 8.
            write(u''' ::
    lock(void)
  {
    this->m_guardedPortMutex.lock();
  }

  void ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1466, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1466, col 8.
            write(u''' ::
    unLock(void)
  {
    this->m_guardedPortMutex.unLock();
  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_serializable_ports",True): # generated from line 1473, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Call for messages received on serial input ports
  // ----------------------------------------------------------------------

#if FW_PORT_SERIALIZATION
''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 1479, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 1480, col 5
                    write(u'''    
  void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1482, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1482, col 8.
                    write(u''' ::
    m_p_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1483, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1483, col 9.
                    write(u'''_in(
        Fw::PassiveComponentBase* callComp,
        NATIVE_INT_TYPE portNum,
        Fw::SerializeBufferBase& buffer) {

    FW_ASSERT(callComp);
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1489, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1489, col 5.
                    write(u'''* compPtr = (''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1489, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1489, col 31.
                    write(u'''*) callComp; 
    compPtr->''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1490, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1490, col 14.
                    write(u'''_handlerBase(portNum,buffer);       
  }
''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 1494, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 1495, col 5
                    write(u'''    
  void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1497, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1497, col 8.
                    write(u''' ::
    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1498, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1498, col 5.
                    write(u'''_handlerBase(
        NATIVE_INT_TYPE portNum, 
        Fw::SerializeBufferBase& buffer) {
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "guarded": # generated from line 1501, col 7
                        write(u'''     // lock call
    this->lock();
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "guarded" or VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "sync": # generated from line 1505, col 7
                        write(u'''    this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1506, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1506, col 11.
                        write(u'''_handler(portNum,buffer);
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "guarded": # generated from line 1508, col 7
                        write(u'''    this->unLock();
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "async": # generated from line 1511, col 7
                        write(u'''    // declare buffer for 
    U8 msgBuff[this->m_msgSize];
    Fw::ExternalSerializeBuffer msgSerBuff(msgBuff,this->m_msgSize);

    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // serialize message ID
    _status = msgSerBuff.serialize(
        static_cast<NATIVE_INT_TYPE>(''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 1520, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 1520, col 38.
                        write(u'''_''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"type",True),"upper",False)() # u'${type.upper()}' on line 1520, col 58
                        if _v is not None: write(_filter(_v, rawExpr=u'${type.upper()}')) # from line 1520, col 58.
                        write(u''')
    );
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

    // serialize port number
    _status = msgSerBuff.serialize(portNum);
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );
    
    // serialize buffer
    _status = msgSerBuff.serialize(buffer);
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );
    
    // send message
    Os::Queue::QueueBlocking _block = 
''')
                        if VFSL([locals()]+SL+[globals(), builtin],"full",True) == 'block': # generated from line 1543, col 7
                            write(u'''      Os::Queue::QUEUE_BLOCKING;
''')
                        else : # generated from line 1545, col 7
                            write(u'''      Os::Queue::QUEUE_NONBLOCKING;
''')
                        write(u'''    Os::Queue::QueueStatus qStatus =
      this->m_queue.send(msgSerBuff, ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"priority",True) # u'${priority}' on line 1549, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'${priority}')) # from line 1549, col 38.
                        write(u''',_block);
''')
                        if VFSL([locals()]+SL+[globals(), builtin],"full",True) == 'drop': # generated from line 1550, col 7
                            write(u'''    if (qStatus == Os::Queue::QUEUE_FULL) {
        this->incNumMsgDropped();
        return;
    }
''')
                        write(u'''    FW_ASSERT(
        qStatus == Os::Queue::QUEUE_OK,
        static_cast<AssertArg>(qStatus)
    );
         
''')
                    write(u'''  }
''')
            write(u'''#endif

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"message_calls_typed",True)) > 0: # generated from line 1568, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Calls for invocations received on typed input ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"message_calls_typed",True): # generated from line 1573, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_param_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_params = VFSL([locals()]+SL+[globals(), builtin],"params",True) == "void"
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_return_type = VFSL([locals()]+SL+[globals(), builtin],"return_type",True)[:4] == "void"
                args = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''  ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 1579, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 1579, col 3.
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1579, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1579, col 17.
                write(u''' ::
    m_p_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1580, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1580, col 9.
                write(u'''_in(
        Fw::PassiveComponentBase* callComp,
''')
                if VFSL([locals()]+SL+[globals(), builtin],"void_params",True): # generated from line 1582, col 5
                    write(u'''        NATIVE_INT_TYPE portNum
''')
                else: # generated from line 1584, col 5
                    write(u'''        NATIVE_INT_TYPE portNum,
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"params",True) # u'$params' on line 1586, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$params')) # from line 1586, col 9.
                    write(u'''
''')
                write(u'''    )
  {
    FW_ASSERT(callComp);
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1591, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1591, col 5.
                write(u'''* compPtr =
      (''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1592, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1592, col 8.
                write(u'''*) callComp;
''')
                if VFSL([locals()]+SL+[globals(), builtin],"void_params",True) and VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 1593, col 5
                    write(u'''    compPtr->''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1594, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1594, col 14.
                    write(u'''_handlerBase(portNum);
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"void_params",True): # generated from line 1595, col 5
                    write(u'''    return compPtr->''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1596, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1596, col 21.
                    write(u'''_handlerBase(portNum);
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 1597, col 5
                    write(u'''    compPtr->''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1598, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1598, col 14.
                    write(u'''_handlerBase(portNum, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 1598, col 47
                    if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 1598, col 47.
                    write(u''');
''')
                else: # generated from line 1599, col 5
                    write(u'''    return compPtr->''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1600, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1600, col 21.
                    write(u'''_handlerBase(portNum, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 1600, col 54
                    if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 1600, col 54.
                    write(u''');
''')
                write(u'''  }

''')
            write(u'''  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"message_calls_typed",True): # generated from line 1609, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_param_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_params = VFSL([locals()]+SL+[globals(), builtin],"params",True) == "void"
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                void_return_type = VFSL([locals()]+SL+[globals(), builtin],"return_type",True)[:4] == "void"
                args = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''  ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 1615, col 3
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 1615, col 3.
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1615, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1615, col 17.
                write(u''' ::
''')
                if VFSL([locals()]+SL+[globals(), builtin],"void_params",True): # generated from line 1616, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1617, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1617, col 5.
                    write(u'''_handlerBase(NATIVE_INT_TYPE portNum)
''')
                else: # generated from line 1618, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1619, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1619, col 5.
                    write(u'''_handlerBase(
        NATIVE_INT_TYPE portNum,
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"params",True) # u'$params' on line 1621, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$params')) # from line 1621, col 9.
                    write(u'''
    )
''')
                write(u'''  {

    // Make sure port number is valid
    FW_ASSERT(portNum < this->getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1627, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1627, col 38.
                write(u'''_InputPorts(),static_cast<AssertArg>(portNum));
''')
                if not VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 1628, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 1629, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 1629, col 5.
                    write(u''' retVal;
''')
                write(u'''
''')
                if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "async": # generated from line 1632, col 5
                    write(u'''    // Call pre-message hook
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"void_params",True): # generated from line 1634, col 7
                        write(u'''    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1635, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1635, col 5.
                        write(u'''_preMsgHook(portNum);
''')
                    else: # generated from line 1636, col 7
                        write(u'''    ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1637, col 5
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1637, col 5.
                        write(u'''_preMsgHook(
        portNum,
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 1639, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 1639, col 9.
                        write(u'''
    );
''')
                    write(u'''
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    _status = msg.serialize(
        static_cast<NATIVE_INT_TYPE>(''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 1647, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 1647, col 38.
                    write(u'''_''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"type",True),"upper",False)() # u'${type.upper()}' on line 1647, col 58
                    if _v is not None: write(_filter(_v, rawExpr=u'${type.upper()}')) # from line 1647, col 58.
                    write(u''')
    );
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

    _status = msg.serialize(portNum);
    FW_ASSERT (
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

''')
                    args = VFSL([locals()]+SL+[globals(), builtin],"port_args",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                    for arg_name, arg_type, arg_comment, arg_modifier, arg_enum in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 1661, col 7
                        write(u'''    // Serialize argument ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1662, col 27
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1662, col 27.
                        write(u'''
''')
                        if VFSL([locals()]+SL+[globals(), builtin],"arg_modifier",True) == '*': # generated from line 1663, col 9
                            write(u'''    _status = msg.serialize(static_cast<void *>(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1664, col 49
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1664, col 49.
                            write(u'''));
''')
                        elif VFSL([locals()]+SL+[globals(), builtin],"arg_enum",True) == 'ENUM': # generated from line 1665, col 9
                            write(u'''    _status = msg.serialize(static_cast<FwEnumStoreType>(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1666, col 58
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1666, col 58.
                            write(u'''));
''')
                        else: # generated from line 1667, col 9
                            write(u'''    _status = msg.serialize(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1668, col 29
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1668, col 29.
                            write(u''');
''')
                        write(u'''    FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(_status)
    );

''')
                    write(u'''      
    // send message
    Os::Queue::QueueBlocking _block = 
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"full",True) == 'block': # generated from line 1679, col 7
                        write(u'''      Os::Queue::QUEUE_BLOCKING;
''')
                    else : # generated from line 1681, col 7
                        write(u'''      Os::Queue::QUEUE_NONBLOCKING;
''')
                    write(u'''    Os::Queue::QueueStatus qStatus =
      this->m_queue.send(msg, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"priority",True) # u'${priority}' on line 1685, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'${priority}')) # from line 1685, col 31.
                    write(u''',_block);
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"full",True) == 'drop': # generated from line 1686, col 7
                        write(u'''    if (qStatus == Os::Queue::QUEUE_FULL) {
        this->incNumMsgDropped();
        return;
    }
''')
                    write(u'''    FW_ASSERT(
        qStatus == Os::Queue::QUEUE_OK,
        static_cast<AssertArg>(qStatus)
    );      
      
''')
                else: # generated from line 1697, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "guarded": # generated from line 1698, col 7
                        write(u'''    // Lock guard mutex before calling
    this->lock();

''')
                    write(u'''    // Down call to pure virtual handler method implemented in Impl class
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"void_params",True) and VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 1704, col 7
                        write(u'''    this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1705, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1705, col 11.
                        write(u'''_handler(portNum);
''')
                    elif VFSL([locals()]+SL+[globals(), builtin],"void_params",True): # generated from line 1706, col 7
                        write(u'''    retVal = this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1707, col 20
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1707, col 20.
                        write(u'''_handler(portNum);
''')
                    elif VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 1708, col 7
                        write(u'''    this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1709, col 11
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1709, col 11.
                        write(u'''_handler(portNum, ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 1709, col 40
                        if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 1709, col 40.
                        write(u''');
''')
                    else: # generated from line 1710, col 7
                        write(u'''    retVal = this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1711, col 20
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1711, col 20.
                        write(u'''_handler(portNum, ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 1711, col 49
                        if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 1711, col 49.
                        write(u''');
''')
                    write(u'''
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "guarded": # generated from line 1714, col 7
                        write(u'''    // Unlock guard mutex
    this->unLock();

''')
                    if not VFSL([locals()]+SL+[globals(), builtin],"void_return_type",True): # generated from line 1719, col 7
                        write(u'''    return retVal;

''')
                write(u'''  }

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"pre_message_hooks",True)) > 0: # generated from line 1728, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Pre-message hooks for async input ports
  // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"pre_message_hooks",True): # generated from line 1733, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_param_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''  void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1735, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1735, col 8.
                write(u''' ::
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 1736, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1737, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1737, col 5.
                    write(u'''_preMsgHook(
        NATIVE_INT_TYPE portNum,
        Fw::SerializeBufferBase &Buffer
    )
''')
                elif VFSL([locals()]+SL+[globals(), builtin],"params",True) == "void": # generated from line 1741, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1742, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1742, col 5.
                    write(u'''_preMsgHook(NATIVE_INT_TYPE portNum)
''')
                else: # generated from line 1743, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1744, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1744, col 5.
                    write(u'''_preMsgHook(
        NATIVE_INT_TYPE portNum,
        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"params",True) # u'$params' on line 1746, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$params')) # from line 1746, col 9.
                    write(u'''
    )
''')
                write(u'''  {
    // Default: no-op
  }

''')
        if (VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "queued") or (VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "active"): # generated from line 1755, col 1
            write(u'''  // ----------------------------------------------------------------------
  // Message dispatch method for active and queued components. Called
  // by active component thread or implementation code for queued components
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"class_name",True) # u'${class_name}' on line 1761, col 46
            if _v is not None: write(_filter(_v, rawExpr=u'${class_name}')) # from line 1761, col 46.
            write(u''' ::
    doDispatch(void)
  {
''')
            if VFSL([locals()]+SL+[globals(), builtin],"needs_msg_size",True): # generated from line 1764, col 1
                write(u'''    U8 msgBuff[this->m_msgSize];
    Fw::ExternalSerializeBuffer msg(msgBuff,this->m_msgSize);
''')
            else: # generated from line 1767, col 1
                write(u'''    ComponentIpcSerializableBuffer msg;
''')
            write(u'''    NATIVE_INT_TYPE priority;

''')
            if (VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "active"): # generated from line 1772, col 3
                write(u'''    Os::Queue::QueueStatus msgStatus = this->m_queue.receive(msg,priority,Os::Queue::QUEUE_BLOCKING);
    FW_ASSERT(
        msgStatus == Os::Queue::QUEUE_OK,
        static_cast<AssertArg>(msgStatus)
    );
''')
            else: # generated from line 1778, col 3
                write(u'''    Os::Queue::QueueStatus msgStatus = this->m_queue.receive(msg,priority,Os::Queue::QUEUE_NONBLOCKING);
    if (Os::Queue::QUEUE_NO_MORE_MSGS == msgStatus) {
      return Fw::QueuedComponentBase::MSG_DISPATCH_EMPTY;
    } else {
      FW_ASSERT(
          msgStatus == Os::Queue::QUEUE_OK,
          static_cast<AssertArg>(msgStatus)
      );
    }
''')
            write(u'''
    // Reset to beginning of buffer
    msg.resetDeser();

    NATIVE_INT_TYPE desMsg;
    Fw::SerializeStatus deserStatus = msg.deserialize(desMsg);
    FW_ASSERT(
        deserStatus == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(deserStatus)
    );

    MsgTypeEnum msgType = static_cast<MsgTypeEnum>(desMsg);

    if (msgType == ''')
            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"name",True),"upper",False)() # u'${name.upper()}' on line 1802, col 20
            if _v is not None: write(_filter(_v, rawExpr=u'${name.upper()}')) # from line 1802, col 20.
            write(u'''_COMPONENT_EXIT) {
      return MSG_DISPATCH_EXIT;
    }

    NATIVE_INT_TYPE portNum;
    deserStatus = msg.deserialize(portNum);
    FW_ASSERT(
        deserStatus == Fw::FW_SERIALIZE_OK,
        static_cast<AssertArg>(deserStatus)
    );

    switch (msgType) {

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 1815, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "async" and VFSL([locals()]+SL+[globals(), builtin],"role",True) != "Cmd": # generated from line 1816, col 5
                    write(u'''      // Handle async input port ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 1817, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 1817, col 34.
                    write(u'''
      case ''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 1818, col 12
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 1818, col 12.
                    write(u'''_''')
                    _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"type",True),"upper",False)() # u'${type.upper()}' on line 1818, col 32
                    if _v is not None: write(_filter(_v, rawExpr=u'${type.upper()}')) # from line 1818, col 32.
                    write(u''': {

''')
                    args = VFSL([locals()]+SL+[globals(), builtin],"port_args",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                    for arg_name, arg_type, arg_comment, arg_modifier, arg_enum in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 1821, col 7
                        write(u'''        // Deserialize argument ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1822, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1822, col 33.
                        write(u'''
''')
                        if VFSL([locals()]+SL+[globals(), builtin],"arg_modifier",True) == '*': # generated from line 1823, col 9
                            write(u'''        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 1824, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 1824, col 9.
                            write(u''' *''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1824, col 20
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1824, col 20.
                            write(u''';
        void* ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1825, col 15
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1825, col 15.
                            write(u'''PtrTemp;
        deserStatus = msg.deserialize(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1826, col 39
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1826, col 39.
                            write(u'''PtrTemp);
        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1827, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1827, col 9.
                            write(u''' = static_cast<''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 1827, col 33
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 1827, col 33.
                            write(u'''*>(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1827, col 45
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1827, col 45.
                            write(u'''PtrTemp);
''')
                        elif VFSL([locals()]+SL+[globals(), builtin],"arg_enum",True) == "ENUM": # generated from line 1828, col 9
                            write(u'''        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 1829, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 1829, col 9.
                            write(u''' ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1829, col 19
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1829, col 19.
                            write(u''';
        FwEnumStoreType ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1830, col 25
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1830, col 25.
                            write(u'''Int;
        deserStatus = msg.deserialize(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1831, col 39
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1831, col 39.
                            write(u'''Int);
        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1832, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1832, col 9.
                            write(u''' = (''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 1832, col 22
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 1832, col 22.
                            write(u''') ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1832, col 33
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1832, col 33.
                            write(u'''Int;
''')
                        else: # generated from line 1833, col 9
                            write(u'''        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 1834, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 1834, col 9.
                            write(u''' ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1834, col 19
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1834, col 19.
                            write(u''';
        deserStatus = msg.deserialize(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1835, col 39
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1835, col 39.
                            write(u''');
''')
                        write(u'''        FW_ASSERT(
            deserStatus == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(deserStatus)
        );

''')
                    if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "Serial": # generated from line 1843, col 7
                        write(u'''        // Deserialize serialized buffer into new buffer
        U8 handBuff[this->m_msgSize];
        Fw::ExternalSerializeBuffer serHandBuff(handBuff,this->m_msgSize);
        deserStatus = msg.deserialize(serHandBuff);
        FW_ASSERT(
            deserStatus == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(deserStatus)
        );
        this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1852, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1852, col 15.
                        write(u'''_handler(portNum, serHandBuff);
''')
                    else: # generated from line 1853, col 7
                        args = VFSL([locals()]+SL+[globals(), builtin],"port_arg_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                        write(u'''        // Call handler function
''')
                        if VFSL([locals()]+SL+[globals(), builtin],"args",True) == "": # generated from line 1856, col 9
                            write(u'''        this->''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1857, col 15
                            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1857, col 15.
                            write(u'''_handler(portNum);
''')
                        else: # generated from line 1858, col 9
                            write(u'''        this->''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1859, col 15
                            if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1859, col 15.
                            write(u'''_handler(
            portNum,
            ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"args",True) # u'$args' on line 1861, col 13
                            if _v is not None: write(_filter(_v, rawExpr=u'$args')) # from line 1861, col 13.
                            write(u'''
        );
''')
                    write(u'''
        break;

      }

''')
            for mnemonic, opcodes, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 1872, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "async": # generated from line 1873, col 5
                    if len(VFSL([locals()]+SL+[globals(), builtin],"opcodes",True)) == 1: # generated from line 1874, col 7
                        write(u'''      // Handle command ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'$mnemonic' on line 1875, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'$mnemonic')) # from line 1875, col 25.
                        write(u'''
      case CMD_''')
                        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True),"upper",False)() # u'${mnemonic.upper()}' on line 1876, col 16
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper()}')) # from line 1876, col 16.
                        write(u''': {
''')
                    else: # generated from line 1877, col 7
                        inst = 0
                        for opcode in VFSL([locals()]+SL+[globals(), builtin],"opcodes",True): # generated from line 1879, col 9
                            write(u'''      case CMD_''')
                            _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True),"upper",False)() # u'${mnemonic.upper()}' on line 1880, col 16
                            if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper()}')) # from line 1880, col 16.
                            write(u'''_''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 1880, col 36
                            if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 1880, col 36.
                            write(u''': 
''')
                            inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                        write(u'''      {
''')
                    write(u'''        // Deserialize opcode
        FwOpcodeType opCode;
        deserStatus = msg.deserialize(opCode);
        FW_ASSERT (
            deserStatus == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(deserStatus)
        );

        // Deserialize command sequence
        U32 cmdSeq;
        deserStatus = msg.deserialize(cmdSeq);
        FW_ASSERT (
            deserStatus == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(deserStatus)
        );

        // Deserialize command argument buffer
        Fw::CmdArgBuffer args;
        deserStatus = msg.deserialize(args);
        FW_ASSERT (
            deserStatus == Fw::FW_SERIALIZE_OK,
            static_cast<AssertArg>(deserStatus)
        );

        // Reset buffer
        args.resetDeser();

''')
                    args = VFSL([locals()]+SL+[globals(), builtin],"command_args",True)[VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True)]
                    for arg_name, arg_type, arg_comment, arg_enum in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 1913, col 7
                        write(u'''        // Deserialize argument ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1914, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1914, col 33.
                        write(u'''
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 1915, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 1915, col 9.
                        write(u''' ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1915, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1915, col 19.
                        write(u''';
''')
                        if VFSL([locals()]+SL+[globals(), builtin],"arg_enum",True) == "enum": # generated from line 1916, col 9
                            write(u'''        FwEnumStoreType ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1917, col 25
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1917, col 25.
                            write(u'''Int;
        deserStatus = args.deserialize(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1918, col 40
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1918, col 40.
                            write(u'''Int);
        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1919, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1919, col 9.
                            write(u''' = (''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'${arg_type}' on line 1919, col 22
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_type}')) # from line 1919, col 22.
                            write(u''')''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1919, col 34
                            if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1919, col 34.
                            write(u'''Int;
''')
                        else: # generated from line 1920, col 9
                            write(u'''        deserStatus = args.deserialize(''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1921, col 40
                            if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1921, col 40.
                            write(u''');
''')
                        write(u'''        if (deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 1924, col 23
                        if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 1924, col 23.
                        write(u"""_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                opCode,
                cmdSeq,
                Fw::COMMAND_FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

""")
                    write(u'''        // Make sure there was no data left over.
        // That means the argument buffer size was incorrect.
#if FW_CMD_CHECK_RESIDUAL        
        if (args.getBuffLeft() != 0) {
          if (this->m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"CmdStatus_Name",True) # u'${CmdStatus_Name}' on line 1940, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${CmdStatus_Name}')) # from line 1940, col 23.
                    write(u"""_OutputPort[0].isConnected()) {
            this->cmdResponse_out(opCode,cmdSeq,Fw::COMMAND_FORMAT_ERROR);
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }
#endif
        // Call handler function
""")
                    if len(VFSL([locals()]+SL+[globals(), builtin],"args",True)) == 0: # generated from line 1948, col 7
                        write(u'''        this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 1949, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 1949, col 15.
                        write(u'''_cmdHandler(opCode, cmdSeq);
''')
                    else: # generated from line 1950, col 7
                        write(u'''        this->''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 1951, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 1951, col 15.
                        write(u'''_cmdHandler(
            opCode,
            cmdSeq,
            ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"command_args_str",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$command_args_str($args)' on line 1954, col 13
                        if _v is not None: write(_filter(_v, rawExpr=u'$command_args_str($args)')) # from line 1954, col 13.
                        write(u'''
        );
''')
                    write(u'''
        break;

      }

''')
            for ifname, priority, full in VFSL([locals()]+SL+[globals(), builtin],"internal_interfaces",True): # generated from line 1964, col 3
                write(u'''      // Handle internal interface ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"ifname",True) # u'$ifname' on line 1965, col 36
                if _v is not None: write(_filter(_v, rawExpr=u'$ifname')) # from line 1965, col 36.
                write(u'''
      case INT_IF_''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"ifname",True),"upper",False)() # u'${ifname.upper()}' on line 1966, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${ifname.upper()}')) # from line 1966, col 19.
                write(u''': {
''')
                args = VFSL([locals()]+SL+[globals(), builtin],"internal_interface_args",True)[VFSL([locals()]+SL+[globals(), builtin],"ifname",True)]
                args_str = VFSL([locals()]+SL+[globals(), builtin],"internal_interface_args",True)[VFSL([locals()]+SL+[globals(), builtin],"ifname",True)]
                write(u'''
''')
                for arg_name, arg_type, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"args",True): # generated from line 1970, col 5
                    write(u'''        ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'$arg_type' on line 1971, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$arg_type')) # from line 1971, col 9.
                    write(u''' ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1971, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1971, col 19.
                    write(u''';
''')
                    if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 1972, col 7
                        write(u'''        FwEnumStoreType ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1973, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1973, col 25.
                        write(u'''Int;
        deserStatus = msg.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1974, col 39
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1974, col 39.
                        write(u'''Int);
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1975, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1975, col 9.
                        write(u''' = static_cast<''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_type",True) # u'${arg_type}' on line 1975, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_type}')) # from line 1975, col 33.
                        write(u'''>(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'${arg_name}' on line 1975, col 46
                        if _v is not None: write(_filter(_v, rawExpr=u'${arg_name}')) # from line 1975, col 46.
                        write(u'''Int);
''')
                    else: # generated from line 1976, col 7
                        write(u'''        deserStatus = msg.deserialize(''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"arg_name",True) # u'$arg_name' on line 1977, col 39
                        if _v is not None: write(_filter(_v, rawExpr=u'$arg_name')) # from line 1977, col 39.
                        write(u''');
''')
                    write(u'''
        // Internal interfaces should always deserialize
        FW_ASSERT(
            Fw::FW_SERIALIZE_OK == deserStatus,
            static_cast<AssertArg>(deserStatus)
        );

''')
                write(u'''        // Make sure there was no data left over.
        // That means the buffer size was incorrect.
        FW_ASSERT(
            msg.getBuffLeft() == 0,
            static_cast<AssertArg>(msg.getBuffLeft())
        );

        // Call handler function
        this->''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"ifname",True) # u'${ifname}' on line 1995, col 15
                if _v is not None: write(_filter(_v, rawExpr=u'${ifname}')) # from line 1995, col 15.
                write(u'''_internalInterfaceHandler(''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"internal_interface_args_str",False)(VFSL([locals()]+SL+[globals(), builtin],"args",True)) # u'$internal_interface_args_str($args)' on line 1995, col 50
                if _v is not None: write(_filter(_v, rawExpr=u'$internal_interface_args_str($args)')) # from line 1995, col 50.
                write(u''');

        break;

      }

''')
            write(u'''      default:
        return MSG_DISPATCH_ERROR;

    }

    return MSG_DISPATCH_OK;

  }

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 2012, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 2013, col 2
                write(u'''} // end namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 2014, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 2014, col 20.
                write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_cpp= 'respond'

## END CLASS DEFINITION

if not hasattr(cpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(cpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(cpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=cpp()).run()


