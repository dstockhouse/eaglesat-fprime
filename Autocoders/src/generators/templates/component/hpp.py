#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1554930752.386722
__CHEETAH_genTimestamp__ = 'Wed Apr 10 14:12:32 2019'
__CHEETAH_src__ = 'hpp.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 10 11:25:47 2019'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class hpp(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(hpp, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''// ====================================================================== 
// \\title  ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 2, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 2, col 12.
        write(u'''ComponentAc.hpp
// \\author Auto-generated
// \\brief  hpp file for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 4, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 4, col 25.
        write(u''' component base class
//
// \\copyright
// Copyright 2009-2015, by the California Institute of Technology.
// ALL RIGHTS RESERVED.  United States Government Sponsorship
// acknowledged. Any commercial use must be negotiated with the Office
// of Technology Transfer at the California Institute of Technology.
// 
// This software may be subject to U.S. export control laws and
// regulations.  By accepting this document, the user agrees to comply
// with all U.S. export laws and regulations.  User has the
// responsibility to obtain export licenses, or other export authority
// as may be required before exporting such information to foreign
// countries or providing access to foreign persons.
// ====================================================================== 

#ifndef ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"name",True),"upper",False)() # u'${name.upper()}' on line 20, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper()}')) # from line 20, col 10.
        write(u'''_COMP_HPP_
#define ''')
        _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"name",True),"upper",False)() # u'${name.upper()}' on line 21, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper()}')) # from line 21, col 10.
        write(u'''_COMP_HPP_

#include <Fw/Cfg/Config.hpp>
#include <Fw/Port/InputSerializePort.hpp>
#include <Fw/Port/OutputSerializePort.hpp>
#include <Fw/Comp/ActiveComponentBase.hpp>
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_guarded_ports",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 27, col 1
            write(u'''#include <Os/Mutex.hpp>
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 30, col 1
            write(u'''#include <Fw/Cmd/CmdString.hpp>
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_channels",True): # generated from line 33, col 1
            write(u'''#include <Fw/Tlm/TlmString.hpp>
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_channels",True) or VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 36, col 1
            write(u'''#include <Fw/Time/TimePortAc.hpp>
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 39, col 1
            write(u'''#include <Fw/Prm/PrmString.hpp>
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 42, col 1
            write(u'''#include <Fw/Log/LogString.hpp>
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_internal_interfaces",True): # generated from line 45, col 1
            write(u'''#include <Fw/Types/InternalInterfaceString.hpp>
''')
        for t in VFSL([locals()]+SL+[globals(), builtin],"types_includes",True): # generated from line 48, col 1
            write(u'''#include <''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"t",True) # u'$t' on line 49, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$t')) # from line 49, col 12.
            write(u'''>
''')
        for t in VFSL([locals()]+SL+[globals(), builtin],"c_includes",True): # generated from line 51, col 1
            write(u'''#include <''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"t",True) # u'$t' on line 52, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$t')) # from line 52, col 12.
            write(u'''>
''')
        for t in VFSL([locals()]+SL+[globals(), builtin],"port_includes",True): # generated from line 54, col 1
            if 'LogText' in VFSL([locals()]+SL+[globals(), builtin],"t",True): # generated from line 55, col 3
                write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
            write(u'''#include <''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"t",True) # u'$t' on line 58, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$t')) # from line 58, col 12.
            write(u'''>
''')
            if 'LogText' in VFSL([locals()]+SL+[globals(), builtin],"t",True): # generated from line 59, col 3
                write(u'''#endif
''')
        for t in VFSL([locals()]+SL+[globals(), builtin],"ser_includes",True): # generated from line 63, col 1
            write(u'''#include <''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"t",True) # u'$t' on line 64, col 12
            if _v is not None: write(_filter(_v, rawExpr=u'$t')) # from line 64, col 12.
            write(u'''>
''')
        write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 67, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 68, col 2
                write(u'''namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'${namespace}' on line 69, col 11
                if _v is not None: write(_filter(_v, rawExpr=u'${namespace}')) # from line 69, col 11.
                write(u''' {
''')
        write(u'''
  //! \\class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 73, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 73, col 14.
        write(u'''ComponentBase
  //! \\brief Auto-generated base for ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 74, col 38
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 74, col 38.
        write(u''' component
  //!
  class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 76, col 9
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 76, col 9.
        write(u'''ComponentBase :
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "passive": # generated from line 77, col 1
            write(u'''    public Fw::PassiveComponentBase
''')
        elif VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "queued": # generated from line 79, col 1
            write(u'''    public Fw::QueuedComponentBase
''')
        else: # generated from line 81, col 1
            write(u'''    public Fw::ActiveComponentBase
''')
        write(u'''  {

    // ----------------------------------------------------------------------
    // Friend classes
    // ----------------------------------------------------------------------

    //! Friend class for white-box testing
    //!
    friend class ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 92, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 92, col 18.
        write(u'''ComponentBaseFriend;

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_typed_input_ports",True): # generated from line 94, col 1
            write(u'''  public:

    // ----------------------------------------------------------------------
    // Getters for typed input ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_input_ports",True): # generated from line 101, col 3
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                write(u'''    //! Get input port at index
    //!
    //! \\return ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 105, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 105, col 17.
                write(u'''[portNum]
    //!
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 107, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 107, col 5.
                write(u'''::Input''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 107, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 107, col 22.
                write(u'''Port* get_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 107, col 39
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 107, col 39.
                write(u'''_InputPort(
        NATIVE_INT_TYPE portNum ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 108, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 108, col 33.
                write(u'''
    );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_serial_input_ports",True): # generated from line 113, col 1
            write(u'''  public:

    // ----------------------------------------------------------------------
    // Get serial input ports
    // ----------------------------------------------------------------------

''')
            for instance, sync, priority, full, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_input_ports",True): # generated from line 120, col 3
                write(u'''    //! Get input port at index
    //!
    //! \\return ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 123, col 17
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 123, col 17.
                write(u'''[portNum]
    //!
    Fw::InputSerializePort* get_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 125, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 125, col 33.
                write(u'''_InputPort(
        NATIVE_INT_TYPE portNum ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 126, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 126, col 33.
                write(u'''
    );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_typed_output_ports",True): # generated from line 131, col 1
            write(u'''  public:

    // ----------------------------------------------------------------------
    // Connect typed input ports to typed output ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_output_ports",True): # generated from line 138, col 3
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 140, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''    //! Connect port to ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 143, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 143, col 25.
                write(u'''[portNum]
    //!
    void set_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 145, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 145, col 14.
                write(u'''_OutputPort(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 146, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 146, col 34.
                write(u'''
        ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 147, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 147, col 9.
                write(u'''::Input''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 147, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 147, col 26.
                write(u'''Port *port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port") # u'$doxygen_post_comment("The port")' on line 147, col 44
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port")')) # from line 147, col 44.
                write(u'''
    );
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 149, col 5
                    write(u'''#endif
''')
                write(u'''
''')
            write(u'''#if FW_PORT_SERIALIZATION

  public:

    // ----------------------------------------------------------------------
    // Connect serialization input ports to typed output ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_output_ports",True): # generated from line 162, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 163, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''    //! Connect port to ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 166, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 166, col 25.
                write(u'''[portNum]
    //!
    void set_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 168, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 168, col 14.
                write(u'''_OutputPort(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 169, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 169, col 34.
                write(u'''
        Fw::InputSerializePort *port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port") # u'$doxygen_post_comment("The port")' on line 170, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port")')) # from line 170, col 38.
                write(u'''
    );
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 172, col 5
                    write(u'''#endif
''')
                write(u'''
''')
            write(u'''#endif

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_serial_output_ports",True): # generated from line 180, col 1
            write(u'''  public:

    // ----------------------------------------------------------------------
    // Connect serial input ports to serial output ports
    // ----------------------------------------------------------------------

#if FW_PORT_SERIALIZATION

''')
            for instance, sync, priority, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_output_ports",True): # generated from line 189, col 3
                write(u'''    //! Connect port to ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 190, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 190, col 25.
                write(u'''[portNum]
    //!
    void set_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 192, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 192, col 14.
                write(u'''_OutputPort(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 193, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 193, col 34.
                write(u'''
        Fw::InputSerializePort *port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port") # u'$doxygen_post_comment("The port")' on line 194, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port")')) # from line 194, col 38.
                write(u'''
    );

''')
            write(u'''
  public:

    // ----------------------------------------------------------------------
    // Connect serialization input ports to serial output ports
    // ----------------------------------------------------------------------

''')
            for instance, sync, priority, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_output_ports",True): # generated from line 205, col 3
                write(u'''    //! Connect port to ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 206, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 206, col 25.
                write(u'''[portNum]
    //!
    void set_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 208, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 208, col 14.
                write(u'''_OutputPort(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 209, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 209, col 34.
                write(u'''
        Fw::InputPortBase *port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port") # u'$doxygen_post_comment("The port")' on line 210, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port")')) # from line 210, col 33.
                write(u'''
    );

''')
            write(u'''#endif

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 217, col 1
            write(u'''  public:

    // ----------------------------------------------------------------------
    // Command registration
    // ----------------------------------------------------------------------

    //! \\brief Register commands with the Command Dispatcher
    //!
    //! Connect the dispatcher first
    //!
    void regCommands(void);

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 231, col 1
            write(u'''  public:

    // ----------------------------------------------------------------------
    // Parameter loading
    // ----------------------------------------------------------------------

    //! \\brief Load the parameters from a parameter source
    //!
    //! Connect the parameter first
    //!
    void loadParameters(void);

''')
        write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Component construction, initialization, and destruction
    // ----------------------------------------------------------------------

#if FW_OBJECT_NAMES == 1
    //! Construct a ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 252, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 252, col 21.
        write(u'''ComponentBase object
    //!
    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 254, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 254, col 5.
        write(u'''ComponentBase(
        const char* compName ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("Component name") # u'$doxygen_post_comment("Component name")' on line 255, col 30
        if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("Component name")')) # from line 255, col 30.
        write(u'''
    );
#else
    //! Construct a ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 258, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 258, col 21.
        write(u'''ComponentBase object
    //!
    ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 260, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 260, col 5.
        write(u'''ComponentBase(void);
#endif

    //! Initialize a ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 263, col 22
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 263, col 22.
        write(u'''ComponentBase object
    //!
    void init(
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "passive": # generated from line 266, col 1
            write(u'''        NATIVE_INT_TYPE instance = 0 ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The instance number") # u'$doxygen_post_comment("The instance number")' on line 267, col 38
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The instance number")')) # from line 267, col 38.
            write(u'''
''')
        elif VFSL([locals()]+SL+[globals(), builtin],"needs_msg_size",True): # generated from line 268, col 1
            write(u'''        NATIVE_INT_TYPE queueDepth, ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The queue depth") # u'$doxygen_post_comment("The queue depth")' on line 269, col 37
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The queue depth")')) # from line 269, col 37.
            write(u'''
        NATIVE_INT_TYPE msgSize, ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The message size") # u'$doxygen_post_comment("The message size")' on line 270, col 34
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The message size")')) # from line 270, col 34.
            write(u'''
        NATIVE_INT_TYPE instance = 0 ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The instance number") # u'$doxygen_post_comment("The instance number")' on line 271, col 38
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The instance number")')) # from line 271, col 38.
            write(u'''
''')
        else: # generated from line 272, col 1
            write(u'''        NATIVE_INT_TYPE queueDepth, ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The queue depth") # u'$doxygen_post_comment("The queue depth")' on line 273, col 37
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The queue depth")')) # from line 273, col 37.
            write(u'''
        NATIVE_INT_TYPE instance = 0 ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The instance number") # u'$doxygen_post_comment("The instance number")' on line 274, col 38
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The instance number")')) # from line 274, col 38.
            write(u'''
''')
        write(u'''    );

    //! Destroy a ''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 278, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 278, col 19.
        write(u'''ComponentBase object
    //!
    virtual ~''')
        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 280, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 280, col 14.
        write(u'''ComponentBase(void);

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_guarded_ports",True): # generated from line 282, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    //! Mutex operations for guarded ports.
    // ----------------------------------------------------------------------
    //! You can override these operations to provide more sophisticated
    //! synchronization.
    // ----------------------------------------------------------------------

    //! Lock the guarded mutex
    //!
    virtual void lock(void);

    //! Unlock the guarded mutex
    //!
    virtual void unLock(void);

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"handlers_typed",True)) > 0: # generated from line 301, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Handlers to implement for typed input ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"handlers_typed",True): # generated from line 308, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''    //! Handler for input port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 311, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 311, col 32.
                write(u'''
    //
    virtual ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 313, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 313, col 13.
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 313, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 313, col 27.
                write(u'''_handler(
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0: # generated from line 314, col 5
                    write(u'''        NATIVE_INT_TYPE portNum ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 315, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 315, col 33.
                    write(u'''
''')
                else: # generated from line 316, col 5
                    write(u'''        NATIVE_INT_TYPE portNum, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 317, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 317, col 34.
                    write(u'''
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_port_params(8, $params)' on line 318, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_port_params(8, $params)')) # from line 318, col 1.
                    write(u'''
''')
                write(u'''    ) = 0;

''')
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Port handler base-class functions for typed input ports.
    // ----------------------------------------------------------------------
    // Call these functions directly to bypass the corresponding ports.
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"handlers_typed",True): # generated from line 331, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''    //! Handler base-class function for input port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 334, col 52
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 334, col 52.
                write(u'''
    //!
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 336, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 336, col 5.
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 336, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 336, col 19.
                write(u'''_handlerBase(
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0: # generated from line 337, col 5
                    write(u'''        NATIVE_INT_TYPE portNum ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 338, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 338, col 33.
                    write(u'''
''')
                else: # generated from line 339, col 5
                    write(u'''        NATIVE_INT_TYPE portNum, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 340, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 340, col 34.
                    write(u'''
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_port_params(8, $params)' on line 341, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_port_params(8, $params)')) # from line 341, col 1.
                    write(u'''
''')
                write(u'''    );

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"handlers_serial",True)) > 0: # generated from line 347, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Handlers to implement for serial input ports
    // ----------------------------------------------------------------------

''')
            for instance, sync, priority, full, max_num in VFSL([locals()]+SL+[globals(), builtin],"handlers_serial",True): # generated from line 354, col 3
                write(u'''    //! Handler for input port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 355, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 355, col 32.
                write(u'''
    //!
    virtual void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 357, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 357, col 18.
                write(u'''_handler(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 358, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 358, col 34.
                write(u'''
        Fw::SerializeBufferBase &Buffer ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 359, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 359, col 41.
                write(u'''
    ) = 0;

''')
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Port handler base-class functions for serial input ports.
    // ----------------------------------------------------------------------
    // Call these functions directly to bypass the corresponding ports.
    // ----------------------------------------------------------------------

''')
            for instance, sync, priority, full, max_num in VFSL([locals()]+SL+[globals(), builtin],"handlers_serial",True): # generated from line 371, col 3
                write(u'''    //! Handler base-class function for input port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 372, col 52
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 372, col 52.
                write(u'''
    //!
    void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 374, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 374, col 10.
                write(u'''_handlerBase(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 375, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 375, col 34.
                write(u''' 
        Fw::SerializeBufferBase &Buffer ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 376, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 376, col 41.
                write(u'''
    );

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"pre_message_hooks_typed",True)) > 0: # generated from line 381, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Pre-message hooks for typed async input ports.
    // ----------------------------------------------------------------------
    // Each of these functions is invoked just before processing a message
    // on the corresponding port. By default they do nothing. You can
    // override them to provide specific pre-message behavior.
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"pre_message_hooks_typed",True): # generated from line 392, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''    //! Pre-message hook for async input port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 394, col 47
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 394, col 47.
                write(u'''
    //!
    virtual void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 396, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 396, col 18.
                write(u'''_preMsgHook(
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0: # generated from line 397, col 5
                    write(u'''        NATIVE_INT_TYPE portNum ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 398, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 398, col 33.
                    write(u'''
''')
                else: # generated from line 399, col 5
                    write(u'''        NATIVE_INT_TYPE portNum, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 400, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 400, col 34.
                    write(u'''
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_port_params(8, $params)' on line 401, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_port_params(8, $params)')) # from line 401, col 1.
                    write(u'''
''')
                write(u'''    );

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"pre_message_hooks_serial",True)) > 0: # generated from line 407, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Pre-message hooks for serial async input ports.
    // ----------------------------------------------------------------------
    // Each of these functions is invoked just before processing a message
    // on the corresponding port. By default they do nothing. You can
    // override them to provide specific pre-message behavior.
    // ----------------------------------------------------------------------

''')
            for instance, sync, priority, full, max_num in VFSL([locals()]+SL+[globals(), builtin],"pre_message_hooks_serial",True): # generated from line 418, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "async": # generated from line 419, col 5
                    write(u'''    //! Pre-message hook for async input port ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 420, col 47
                    if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 420, col 47.
                    write(u'''
    //!
    virtual void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 422, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 422, col 18.
                    write(u'''_preMsgHook(
        NATIVE_INT_TYPE portNum, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 423, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 423, col 34.
                    write(u'''
        Fw::SerializeBufferBase &Buffer ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 424, col 41
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 424, col 41.
                    write(u'''
    );

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"typed_invocation_functions",True)) > 0: # generated from line 430, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Invocation functions for typed output ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_invocation_functions",True): # generated from line 437, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''    //! Invoke output port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 440, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 440, col 28.
                write(u'''
    //!
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 442, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 442, col 5.
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 442, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 442, col 19.
                write(u'''_out(
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0: # generated from line 443, col 5
                    write(u'''        NATIVE_INT_TYPE portNum ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 444, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 444, col 33.
                    write(u'''
''')
                else: # generated from line 445, col 5
                    write(u'''        NATIVE_INT_TYPE portNum, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 446, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 446, col 34.
                    write(u'''
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_port_params(8, $params)' on line 447, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_port_params(8, $params)')) # from line 447, col 1.
                    write(u'''
''')
                write(u'''    );

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"serial_invocation_functions",True)) > 0: # generated from line 453, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Invocation functions for serial output ports
    // ----------------------------------------------------------------------

''')
            for instance, sync, priority, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_invocation_functions",True): # generated from line 460, col 3
                write(u'''    //! Invoke output port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 461, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 461, col 28.
                write(u'''
    //!
    void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 463, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 463, col 10.
                write(u'''_out(
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 464, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 464, col 34.
                write(u'''
        Fw::SerializeBufferBase &Buffer ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 465, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 465, col 41.
                write(u'''
    );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_input_ports",True): # generated from line 470, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Getters for numbers of input ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 477, col 3
                write(u'''    //! Get the number of ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 478, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 478, col 27.
                write(u''' input ports
    //!
    //! \\return The number of ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 480, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 480, col 31.
                write(u''' input ports
    //!
    NATIVE_INT_TYPE getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 482, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 482, col 28.
                write(u'''_InputPorts(void);

''')
            write(u'''  
    // ----------------------------------------------------------------------
    // Enumerations for number of ports
    // ----------------------------------------------------------------------
    
    enum {
''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"input_ports",True): # generated from line 491, col 3
                write(u'''       NUM_''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 492, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 492, col 12.
                write(u'''_INPUT_PORTS = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"max_num",True) # u'$max_num' on line 492, col 46
                if _v is not None: write(_filter(_v, rawExpr=u'$max_num')) # from line 492, col 46.
                write(u''',
''')
            write(u'''    };
  
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_output_ports",True): # generated from line 497, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Getters for numbers of output ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 504, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 505, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''    //! Get the number of ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 508, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 508, col 27.
                write(u''' output ports
    //!
    //! \\return The number of ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 510, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 510, col 31.
                write(u''' output ports
    //!
    NATIVE_INT_TYPE getNum_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 512, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 512, col 28.
                write(u'''_OutputPorts(void);
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) =="LogTextEvent": # generated from line 513, col 5
                    write(u'''#endif
''')
                write(u'''
''')
            write(u'''  
    enum {
''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 520, col 3
                write(u'''       NUM_''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 521, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 521, col 12.
                write(u'''_OUTPUT_PORTS = ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"max_num",True) # u'$max_num' on line 521, col 47
                if _v is not None: write(_filter(_v, rawExpr=u'$max_num')) # from line 521, col 47.
                write(u''',
''')
            write(u'''    };
  
  PROTECTED:

    // ----------------------------------------------------------------------
    // Connection status queries for output ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"output_ports",True): # generated from line 531, col 3
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 532, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''    //! Check whether port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 535, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 535, col 28.
                write(u''' is connected
    //!
    //! \\return Whether port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 537, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 537, col 30.
                write(u''' is connected
    //!
    bool isConnected_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 539, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 539, col 22.
                write(u'''_OutputPort(
        NATIVE_INT_TYPE portNum ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 540, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 540, col 33.
                write(u'''
    );
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 542, col 5
                    write(u'''#endif
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "queued": # generated from line 548, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Message dispatch
    // ----------------------------------------------------------------------

    //! Dispatch a message on the queue
    //!
    virtual MsgDispatchStatus doDispatch(void);

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"command_enums",True)) > 0: # generated from line 560, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Command enums
    // ----------------------------------------------------------------------

''')
            for enum_type, enum_members in VFSL([locals()]+SL+[globals(), builtin],"command_enums",True): # generated from line 567, col 3
                write(u'''    typedef enum {
''')
                for member, init, comment in VFSL([locals()]+SL+[globals(), builtin],"enum_members",True): # generated from line 569, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 570, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 570, col 7.
                    _v = VFSL([locals()]+SL+[globals(), builtin],"init",True) # u'${init}' on line 570, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${init}')) # from line 570, col 16.
                    write(u''', /* ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 570, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 570, col 28.
                    write(u''' */
''')
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'${enum_type}' on line 572, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${enum_type}')) # from line 572, col 7.
                write(u'''_MAX
    } ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'$enum_type' on line 573, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$enum_type')) # from line 573, col 7.
                write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 577, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Command opcodes
    // ----------------------------------------------------------------------

    enum {
''')
            for mnemonic, opcodes, sync, priority,full,comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 585, col 3
                inst = 0
                for opcode in VFSL([locals()]+SL+[globals(), builtin],"opcodes",True): # generated from line 587, col 5
                    if len(VFSL([locals()]+SL+[globals(), builtin],"opcodes",True)) > 1: # generated from line 588, col 7
                        write(u'''      OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic.upper",True) # u'${mnemonic.upper}' on line 589, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper}')) # from line 589, col 14.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 589, col 32
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 589, col 32.
                        write(u''' = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"opcode",True) # u'${opcode}' on line 589, col 40
                        if _v is not None: write(_filter(_v, rawExpr=u'${opcode}')) # from line 589, col 40.
                        write(u''', /* ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 589, col 54
                        if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 589, col 54.
                        write(u''' */
''')
                    else: # generated from line 590, col 7
                        write(u'''      OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic.upper",True) # u'${mnemonic.upper}' on line 591, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic.upper}')) # from line 591, col 14.
                        write(u''' = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"opcode",True) # u'${opcode}' on line 591, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u'${opcode}')) # from line 591, col 34.
                        write(u''', /* ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 591, col 48
                        if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 591, col 48.
                        write(u''' */
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
            for ids, name, type, osets, osavs, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 596, col 3
                inst = 0
                for opcode in VFSL([locals()]+SL+[globals(), builtin],"osets",True): # generated from line 598, col 5
                    if len(VFSL([locals()]+SL+[globals(), builtin],"osets",True)) > 1: # generated from line 599, col 7
                        write(u'''      OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 600, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 600, col 14.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 600, col 28
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 600, col 28.
                        write(u'''_SET = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"opcode",True) # u'${opcode}' on line 600, col 42
                        if _v is not None: write(_filter(_v, rawExpr=u'${opcode}')) # from line 600, col 42.
                        write(u''', //!< opcode to set parameter ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 600, col 82
                        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 600, col 82.
                        write(u''' for instance ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 600, col 101
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 600, col 101.
                        write(u'''
''')
                    else: # generated from line 601, col 7
                        write(u'''      OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 602, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 602, col 14.
                        write(u'''_SET = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"opcode",True) # u'${opcode}' on line 602, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u'${opcode}')) # from line 602, col 34.
                        write(u''', //!< opcode to set parameter ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 602, col 74
                        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 602, col 74.
                        write(u'''
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
                inst = 0
                for opcode in VFSL([locals()]+SL+[globals(), builtin],"osavs",True): # generated from line 607, col 5
                    if len(VFSL([locals()]+SL+[globals(), builtin],"osavs",True)) > 1: # generated from line 608, col 7
                        write(u'''      OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 609, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 609, col 14.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 609, col 28
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 609, col 28.
                        write(u'''_SAVE = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"opcode",True) # u'${opcode}' on line 609, col 43
                        if _v is not None: write(_filter(_v, rawExpr=u'${opcode}')) # from line 609, col 43.
                        write(u''', //!< opcode to save parameter ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 609, col 84
                        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 609, col 84.
                        write(u''' for instance ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 609, col 103
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 609, col 103.
                        write(u'''
''')
                    else: # generated from line 610, col 7
                        write(u'''      OPCODE_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 611, col 14
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 611, col 14.
                        write(u'''_SAVE = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"opcode",True) # u'${opcode}' on line 611, col 35
                        if _v is not None: write(_filter(_v, rawExpr=u'${opcode}')) # from line 611, col 35.
                        write(u''', //!< opcode to save parameter ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 611, col 76
                        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 611, col 76.
                        write(u'''
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
            write(u'''    };

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True): # generated from line 619, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Command handlers to implement
    // ----------------------------------------------------------------------

''')
            for mnemonic, opcode, sync, priority,full,comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 626, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"command_params",True)[VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True)]
                write(u'''    //! Handler for command ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'$mnemonic' on line 628, col 29
                if _v is not None: write(_filter(_v, rawExpr=u'$mnemonic')) # from line 628, col 29.
                write(u'''
    /* ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 629, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 629, col 8.
                write(u''' */
    virtual void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 630, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 630, col 18.
                write(u'''_cmdHandler(
        FwOpcodeType opCode, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The opcode") # u'$doxygen_post_comment("The opcode")' on line 631, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The opcode")')) # from line 631, col 30.
                write(u'''
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0: # generated from line 632, col 5
                    write(u'''        U32 cmdSeq ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The command sequence number") # u'$doxygen_post_comment("The command sequence number")' on line 633, col 20
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The command sequence number")')) # from line 633, col 20.
                    write(u'''
''')
                else: # generated from line 634, col 5
                    write(u'''        U32 cmdSeq, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The command sequence number") # u'$doxygen_post_comment("The command sequence number")' on line 635, col 21
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The command sequence number")')) # from line 635, col 21.
                    write(u'''
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_non_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_non_port_params(8, $params)' on line 636, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_non_port_params(8, $params)')) # from line 636, col 1.
                    write(u'''
''')
                write(u'''    ) = 0;

''')
        mnemonics = [   VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True)   for mnemonic, opcode, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True)   if VFSL([locals()]+SL+[globals(), builtin],"sync",True) == "async" ]
        if len(VFSL([locals()]+SL+[globals(), builtin],"mnemonics",True)) > 0: # generated from line 647, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Pre-message hooks for async commands.
    // ----------------------------------------------------------------------
    // Each of these functions is invoked just before processing the
    // corresponding command. By default they do nothing. You can
    // override them to provide specific pre-command behavior.
    // ----------------------------------------------------------------------

''')
            for mnemonic in VFSL([locals()]+SL+[globals(), builtin],"mnemonics",True): # generated from line 658, col 3
                write(u'''    //! Pre-message hook for command ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'$mnemonic' on line 659, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$mnemonic')) # from line 659, col 38.
                write(u'''
    //!
    virtual void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 661, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 661, col 18.
                write(u'''_preMsgHook(
        FwOpcodeType opCode, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The opcode") # u'$doxygen_post_comment("The opcode")' on line 662, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The opcode")')) # from line 662, col 30.
                write(u'''
        U32 cmdSeq ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The command sequence number") # u'$doxygen_post_comment("The command sequence number")' on line 663, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The command sequence number")')) # from line 663, col 20.
                write(u'''
    );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True): # generated from line 668, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Command handler base-class functions.
    // Call these functions directly to bypass the command input port.
    // ----------------------------------------------------------------------

''')
            for mnemonic, opcode, sync, priority, full, comment in VFSL([locals()]+SL+[globals(), builtin],"commands",True): # generated from line 676, col 3
                write(u'''    //! Base-class handler function for command ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'$mnemonic' on line 677, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'$mnemonic')) # from line 677, col 49.
                write(u'''
    //! 
    void ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"mnemonic",True) # u'${mnemonic}' on line 679, col 10
                if _v is not None: write(_filter(_v, rawExpr=u'${mnemonic}')) # from line 679, col 10.
                write(u'''_cmdHandlerBase( 
        FwOpcodeType opCode, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The opcode") # u'$doxygen_post_comment("The opcode")' on line 680, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The opcode")')) # from line 680, col 30.
                write(u'''
        U32 cmdSeq, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The command sequence number") # u'$doxygen_post_comment("The command sequence number")' on line 681, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The command sequence number")')) # from line 681, col 21.
                write(u'''
        Fw::CmdArgBuffer &args ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The command argument buffer") # u'$doxygen_post_comment("The command argument buffer")' on line 682, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The command argument buffer")')) # from line 682, col 32.
                write(u'''
    );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_commands",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 687, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Command response
    // ----------------------------------------------------------------------

    //! Emit command response
    //!
    void cmdResponse_out(
        FwOpcodeType opCode, ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The opcode") # u'$doxygen_post_comment("The opcode")' on line 697, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The opcode")')) # from line 697, col 30.
            write(u'''
        U32 cmdSeq, ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The command sequence number") # u'$doxygen_post_comment("The command sequence number")' on line 698, col 21
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The command sequence number")')) # from line 698, col 21.
            write(u'''
        Fw::CommandResponse response ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The command response") # u'$doxygen_post_comment("The command response")' on line 699, col 38
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The command response")')) # from line 699, col 38.
            write(u'''
    );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 703, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Event IDs
    // ----------------------------------------------------------------------

    enum {
''')
            for ids, name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 711, col 3
                inst = 0
                for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 713, col 7
                    if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 714, col 9
                        write(u'''      EVENTID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 715, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 715, col 15.
                        write(u''' = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'$id' on line 715, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u'$id')) # from line 715, col 31.
                        write(u''', /* ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 715, col 39
                        if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 715, col 39.
                        write(u''' */
''')
                    else: # generated from line 716, col 9
                        write(u'''      EVENTID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 717, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 717, col 15.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 717, col 29
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 717, col 29.
                        write(u''' = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'$id' on line 717, col 39
                        if _v is not None: write(_filter(_v, rawExpr=u'$id')) # from line 717, col 39.
                        write(u''', /* ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 717, col 47
                        if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 717, col 47.
                        write(u''' */
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
            write(u'''    };
    
''')
            throttle_values = [     (VFSL([locals()]+SL+[globals(), builtin],"name",True), VFSL([locals()]+SL+[globals(), builtin],"throttle",True))     for ids, name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True)     if VFSL([locals()]+SL+[globals(), builtin],"throttle",True) != None   ]
            if len(VFSL([locals()]+SL+[globals(), builtin],"throttle_values",True)) > 0: # generated from line 729, col 3
                write(u'''    // ----------------------------------------------------------------------
    // Event Throttle values - sets initial value of countdown variable
    // ----------------------------------------------------------------------

    enum {
''')
                for name, throttle in VFSL([locals()]+SL+[globals(), builtin],"throttle_values",True): # generated from line 735, col 5
                    write(u'''      EVENTID_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 736, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 736, col 15.
                    write(u'''_THROTTLE = ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"throttle",True) # u'$throttle' on line 736, col 40
                    if _v is not None: write(_filter(_v, rawExpr=u'$throttle')) # from line 736, col 40.
                    write(u''', ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("Throttle reset count for " + VFSL([locals()]+SL+[globals(), builtin],"name",True)) # u'$doxygen_post_comment("Throttle reset count for " + $name)' on line 736, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("Throttle reset count for " + $name)')) # from line 736, col 51.
                    write(u'''
''')
                write(u'''    };

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"event_enums",True)) > 0: # generated from line 742, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Event enums
    // ----------------------------------------------------------------------

''')
            for enum_type, enum_members in VFSL([locals()]+SL+[globals(), builtin],"event_enums",True): # generated from line 749, col 3
                write(u'''    typedef enum {
''')
                for member, init, comment in VFSL([locals()]+SL+[globals(), builtin],"enum_members",True): # generated from line 751, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 752, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 752, col 7.
                    _v = VFSL([locals()]+SL+[globals(), builtin],"init",True) # u'${init}' on line 752, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${init}')) # from line 752, col 16.
                    write(u''', /* ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 752, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 752, col 28.
                    write(u''' */
''')
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'${enum_type}' on line 754, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${enum_type}')) # from line 754, col 7.
                write(u'''_MAX
    } ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'$enum_type' on line 755, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$enum_type')) # from line 755, col 7.
                write(u''';

''')
        write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Event logging functions
    // ----------------------------------------------------------------------

''')
        for ids, name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 765, col 1
            params = VFSL([locals()]+SL+[globals(), builtin],"event_params",True)[VFSL([locals()]+SL+[globals(), builtin],"name",True)]
            write(u'''    //! Log event ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 767, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 767, col 19.
            write(u'''
    //!
''')
            if not VFSL([locals()]+SL+[globals(), builtin],"comment",True) is None: # generated from line 769, col 3
                write(u'''    /* ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 770, col 8
                if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 770, col 8.
                write(u''' */
''')
            write(u'''    void log_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 772, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 772, col 14.
            write(u'''_''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 772, col 26
            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 772, col 26.
            write(u'''(
''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"emit_non_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_non_port_params(8, $params)' on line 773, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$emit_non_port_params(8, $params)')) # from line 773, col 1.
            write(u'''
    );
    
''')
            if VFSL([locals()]+SL+[globals(), builtin],"throttle",True) != None: # generated from line 776, col 3
                write(u'''    // reset throttle value for ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 777, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 777, col 33.
                write(u'''
    void log_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"severity",True) # u'${severity}' on line 778, col 14
                if _v is not None: write(_filter(_v, rawExpr=u'${severity}')) # from line 778, col 14.
                write(u'''_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 778, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 778, col 26.
                write(u'''_ThrottleClear(void);
''')
            write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 782, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Channel IDs
    // ----------------------------------------------------------------------

    enum {
''')
            for ids, name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 790, col 3
                inst = 0
                for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 792, col 6
                    if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) == 1: # generated from line 793, col 8
                        write(u'''      CHANNELID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 794, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 794, col 17.
                        write(u''' = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'$id' on line 794, col 33
                        if _v is not None: write(_filter(_v, rawExpr=u'$id')) # from line 794, col 33.
                        write(u''', //!< Channel ID for ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 794, col 58
                        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 794, col 58.
                        write(u'''
''')
                    else: # generated from line 795, col 8
                        write(u'''      CHANNELID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 796, col 17
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 796, col 17.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 796, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 796, col 31.
                        write(u''' = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'$id' on line 796, col 41
                        if _v is not None: write(_filter(_v, rawExpr=u'$id')) # from line 796, col 41.
                        write(u''', //!< Channel ID for ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 796, col 66
                        if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 796, col 66.
                        write(u''', instance ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'$inst' on line 796, col 82
                        if _v is not None: write(_filter(_v, rawExpr=u'$inst')) # from line 796, col 82.
                        write(u'''
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
            write(u'''    };

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"channel_enums",True)) > 0: # generated from line 804, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Channel enums
    // ----------------------------------------------------------------------

''')
            for enum_type, enum_members in VFSL([locals()]+SL+[globals(), builtin],"channel_enums",True): # generated from line 811, col 3
                write(u'''    typedef enum {
''')
                for member, init, comment in VFSL([locals()]+SL+[globals(), builtin],"enum_members",True): # generated from line 813, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 814, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 814, col 7.
                    _v = VFSL([locals()]+SL+[globals(), builtin],"init",True) # u'${init}' on line 814, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${init}')) # from line 814, col 16.
                    write(u''', /* ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 814, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 814, col 28.
                    write(u''' */
''')
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'${enum_type}' on line 816, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${enum_type}')) # from line 816, col 7.
                write(u'''_MAX
    } ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'$enum_type' on line 817, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$enum_type')) # from line 817, col 7.
                write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True): # generated from line 821, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Telemetry write functions
    // ----------------------------------------------------------------------

''')
            for ids, name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True): # generated from line 828, col 3
                write(u'''    //! Write telemetry channel ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 829, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 829, col 33.
                write(u'''
    //!
''')
                if not VFSL([locals()]+SL+[globals(), builtin],"comment",True) is None: # generated from line 831, col 5
                    write(u'''    /* ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 832, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 832, col 8.
                    write(u''' */
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 834, col 5
                    write(u'''    void tlmWrite_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 835, col 19
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 835, col 19.
                    write(u'''(
        Fw::TlmString& arg ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The telemetry value") # u'$doxygen_post_comment("The telemetry value")' on line 836, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The telemetry value")')) # from line 836, col 28.
                    write(u'''
    );
''')
                else: # generated from line 838, col 5
                    if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "enum": # generated from line 839, col 7
                        write(u'''    void tlmWrite_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 840, col 19
                        if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 840, col 19.
                        write(u'''(
        ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 841, col 9
                        if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 841, col 9.
                        write(u''' arg ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The telemetry value") # u'$doxygen_post_comment("The telemetry value")' on line 841, col 21
                        if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The telemetry value")')) # from line 841, col 21.
                        write(u'''
    );
''')
                    else: # generated from line 843, col 7
                        if VFSL([locals()]+SL+[globals(), builtin],"typeinfo",True) == "user": # generated from line 844, col 9
                            write(u'''    void tlmWrite_''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 845, col 19
                            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 845, col 19.
                            write(u'''(
        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 846, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 846, col 9.
                            write(u'''& arg ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The telemetry value") # u'$doxygen_post_comment("The telemetry value")' on line 846, col 22
                            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The telemetry value")')) # from line 846, col 22.
                            write(u'''
    );
''')
                        else: # generated from line 848, col 9
                            write(u'''    void tlmWrite_''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 849, col 19
                            if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 849, col 19.
                            write(u'''(
        ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 850, col 9
                            if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 850, col 9.
                            write(u''' arg ''')
                            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The telemetry value") # u'$doxygen_post_comment("The telemetry value")' on line 850, col 21
                            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The telemetry value")')) # from line 850, col 21.
                            write(u'''
    );
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_telemetry",True) or VFSL([locals()]+SL+[globals(), builtin],"has_events",True): # generated from line 858, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Time
    // ----------------------------------------------------------------------

    //! Get the time
    //!
    //! \\return The current time
    //!
    Fw::Time getTime(void);

''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"parameter_enums",True)) > 0: # generated from line 872, col 1
            for enum_type, enum_members in VFSL([locals()]+SL+[globals(), builtin],"parameter_enums",True): # generated from line 873, col 3
                write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Parameter enums
    // ----------------------------------------------------------------------

    typedef enum {
''')
                for member, init, comment in VFSL([locals()]+SL+[globals(), builtin],"enum_members",True): # generated from line 881, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 882, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 882, col 7.
                    _v = VFSL([locals()]+SL+[globals(), builtin],"init",True) # u'${init}' on line 882, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${init}')) # from line 882, col 16.
                    write(u''', /* ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 882, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 882, col 28.
                    write(u''' */
''')
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'${enum_type}' on line 884, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${enum_type}')) # from line 884, col 7.
                write(u'''_MAX
    } ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'$enum_type' on line 885, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$enum_type')) # from line 885, col 7.
                write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 889, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Parameter IDs
    // ----------------------------------------------------------------------

    enum {
''')
            for ids, name, type, osets, osavs, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 897, col 3
                inst = 0
                for id in VFSL([locals()]+SL+[globals(), builtin],"ids",True): # generated from line 899, col 5
                    if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) > 1: # generated from line 900, col 7
                        write(u'''      PARAMID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 901, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 901, col 15.
                        write(u'''_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"inst",True) # u'${inst}' on line 901, col 29
                        if _v is not None: write(_filter(_v, rawExpr=u'${inst}')) # from line 901, col 29.
                        write(u''' = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'${id}' on line 901, col 39
                        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 901, col 39.
                        write(u''',
''')
                    else: # generated from line 902, col 7
                        write(u'''      PARAMID_''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 903, col 15
                        if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 903, col 15.
                        write(u''' = ''')
                        _v = VFSL([locals()]+SL+[globals(), builtin],"id",True) # u'${id}' on line 903, col 31
                        if _v is not None: write(_filter(_v, rawExpr=u'${id}')) # from line 903, col 31.
                        write(u''',
''')
                    inst = VFSL([locals()]+SL+[globals(), builtin],"inst",True) + 1
            for ids, name, type, osets, osavs, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 908, col 3
                if len(VFSL([locals()]+SL+[globals(), builtin],"ids",True)) > 1: # generated from line 909, col 5
                    write(u'''      PARAMID_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name.upper",True) # u'${name.upper}' on line 910, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${name.upper}')) # from line 910, col 15.
                    write(u''', // for notifications
''')
            write(u'''    };

  PROTECTED:

    // ----------------------------------------------------------------------
    // Parameter update hook
    // ----------------------------------------------------------------------

    //! \\brief Called whenever a parameter is updated
    //!
    //! This function does nothing by default. You may override it.
    //!
    virtual void parameterUpdated(
        FwPrmIdType id ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The parameter ID") # u'$doxygen_post_comment("The parameter ID")' on line 926, col 24
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The parameter ID")')) # from line 926, col 24.
            write(u'''
    );

    // ----------------------------------------------------------------------
    // Parameter load hook
    // ----------------------------------------------------------------------

    //! \\brief Called whenever a parameters are loaded
    //!
    //! This function does nothing by default. You may override it.
    //!
    virtual void parametersLoaded();

  PROTECTED:

    // ----------------------------------------------------------------------
    // Parameter get functions
    // ----------------------------------------------------------------------

''')
            for ids, name, type, osets, osavs, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 945, col 3
                write(u'''    //! Get parameter ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 946, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 946, col 23.
                write(u'''
    //!
''')
                if not VFSL([locals()]+SL+[globals(), builtin],"comment",True) is None: # generated from line 948, col 5
                    write(u'''    /* ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 949, col 8
                    if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 949, col 8.
                    write(u''' */
''')
                write(u'''    //! \\return The parameter value
    //!
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 953, col 5
                    write(u'''    Fw::ParamString paramGet_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 954, col 30
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 954, col 30.
                    write(u'''(
        Fw::ParamValid& valid ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("Whether the parameter is valid") # u'$doxygen_post_comment("Whether the parameter is valid")' on line 955, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("Whether the parameter is valid")')) # from line 955, col 31.
                    write(u'''
    );
''')
                else: # generated from line 957, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 958, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 958, col 5.
                    write(u''' paramGet_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 958, col 20
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 958, col 20.
                    write(u'''(
        Fw::ParamValid& valid ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("Whether the parameter is valid") # u'$doxygen_post_comment("Whether the parameter is valid")' on line 959, col 31
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("Whether the parameter is valid")')) # from line 959, col 31.
                    write(u'''
    );
''')
                write(u'''
''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"internal_interface_enums",True)) > 0: # generated from line 965, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Internal interface enums
    // ----------------------------------------------------------------------

''')
            for enum_type, enum_members in VFSL([locals()]+SL+[globals(), builtin],"internal_interface_enums",True): # generated from line 972, col 3
                write(u'''    typedef enum {
''')
                for member, init, comment in VFSL([locals()]+SL+[globals(), builtin],"enum_members",True): # generated from line 974, col 5
                    write(u'''      ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"member",True) # u'${member}' on line 975, col 7
                    if _v is not None: write(_filter(_v, rawExpr=u'${member}')) # from line 975, col 7.
                    _v = VFSL([locals()]+SL+[globals(), builtin],"init",True) # u'${init}' on line 975, col 16
                    if _v is not None: write(_filter(_v, rawExpr=u'${init}')) # from line 975, col 16.
                    write(u''', /* ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"comment",True) # u'$comment' on line 975, col 28
                    if _v is not None: write(_filter(_v, rawExpr=u'$comment')) # from line 975, col 28.
                    write(u''' */
''')
                write(u'''      ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'${enum_type}' on line 977, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'${enum_type}')) # from line 977, col 7.
                write(u'''_MAX
    } ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"enum_type",True) # u'$enum_type' on line 978, col 7
                if _v is not None: write(_filter(_v, rawExpr=u'$enum_type')) # from line 978, col 7.
                write(u''';

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_internal_interfaces",True): # generated from line 982, col 1
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Internal interface handlers
    // ----------------------------------------------------------------------

''')
            for name, priority, full in VFSL([locals()]+SL+[globals(), builtin],"internal_interfaces",True): # generated from line 989, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"internal_interface_params",True)[VFSL([locals()]+SL+[globals(), builtin],"name",True)]
                write(u'''    //! Internal Interface handler for ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 991, col 40
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 991, col 40.
                write(u'''
    //!
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0: # generated from line 993, col 5
                    write(u'''    virtual void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 994, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 994, col 18.
                    write(u'''_internalInterfaceHandler(void) = 0;
''')
                else: # generated from line 995, col 5
                    write(u'''    virtual void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 996, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 996, col 18.
                    write(u'''_internalInterfaceHandler(
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_non_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_non_port_params(8, $params)' on line 997, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_non_port_params(8, $params)')) # from line 997, col 1.
                    write(u'''
    ) = 0;
''')
                write(u'''
''')
            write(u'''  PROTECTED:

    // ----------------------------------------------------------------------
    // Internal interface base-class functions
    // ----------------------------------------------------------------------

''')
            for name, priority, full in VFSL([locals()]+SL+[globals(), builtin],"internal_interfaces",True): # generated from line 1008, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"internal_interface_params",True)[VFSL([locals()]+SL+[globals(), builtin],"name",True)]
                write(u'''    //! Base class function for ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 1010, col 33
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 1010, col 33.
                write(u'''
    //!
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0: # generated from line 1012, col 5
                    write(u'''    void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1013, col 10
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1013, col 10.
                    write(u'''_internalInterfaceInvoke(void);
''')
                else: # generated from line 1014, col 5
                    write(u'''    void ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1015, col 10
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1015, col 10.
                    write(u'''_internalInterfaceInvoke(
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_non_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_non_port_params(8, $params)' on line 1016, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_non_port_params(8, $params)')) # from line 1016, col 1.
                    write(u'''
    );
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"needs_msg_size",True): # generated from line 1022, col 1
            write(u'''
  PRIVATE:
    NATIVE_INT_TYPE m_msgSize; //!< store max message size
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_typed_input_ports",True): # generated from line 1027, col 1
            write(u'''
  PRIVATE:

    // ----------------------------------------------------------------------
    // Typed input ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_input_ports",True): # generated from line 1035, col 3
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                write(u'''    //! Input port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 1037, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 1037, col 20.
                write(u'''
    //!
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 1039, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 1039, col 5.
                write(u'''::Input''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1039, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1039, col 22.
                write(u'''Port m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1039, col 36
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1039, col 36.
                write(u'''_InputPort[NUM_''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 1039, col 62
                if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 1039, col 62.
                write(u'''_INPUT_PORTS];

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_serial_input_ports",True): # generated from line 1043, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Serial input ports
    // ----------------------------------------------------------------------

''')
            for instance, sync, priority, full, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_input_ports",True): # generated from line 1050, col 3
                write(u'''    //! Input port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 1051, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 1051, col 20.
                write(u'''
    //!
    Fw::InputSerializePort m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1053, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1053, col 30.
                write(u'''_InputPort[NUM_''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 1053, col 56
                if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 1053, col 56.
                write(u'''_INPUT_PORTS];

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_typed_output_ports",True): # generated from line 1057, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Typed output ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_output_ports",True): # generated from line 1064, col 3
                namespace = VFSL([locals()]+SL+[globals(), builtin],"port_namespaces",True)[VFSL([locals()]+SL+[globals(), builtin],"type",True)]
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 1066, col 5
                    write(u'''#if FW_ENABLE_TEXT_LOGGING == 1
''')
                write(u'''    //! Output port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 1069, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 1069, col 21.
                write(u'''
    //!
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 1071, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 1071, col 5.
                write(u'''::Output''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1071, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1071, col 23.
                write(u'''Port m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1071, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1071, col 37.
                write(u'''_OutputPort[NUM_''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 1071, col 64
                if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 1071, col 64.
                write(u'''_OUTPUT_PORTS];
''')
                if VFSL([locals()]+SL+[globals(), builtin],"role",True) == "LogTextEvent": # generated from line 1072, col 5
                    write(u'''#endif
''')
                write(u'''
''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_serial_output_ports",True): # generated from line 1078, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Serial output ports
    // ----------------------------------------------------------------------

''')
            for instance, sync, priority, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_output_ports",True): # generated from line 1085, col 3
                write(u'''    //! Output port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 1086, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 1086, col 21.
                write(u'''
    //!
    Fw::OutputSerializePort m_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1088, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1088, col 31.
                write(u'''_OutputPort[NUM_''')
                _v = VFN(VFSL([locals()]+SL+[globals(), builtin],"instance",True),"upper",False)() # u'${instance.upper()}' on line 1088, col 58
                if _v is not None: write(_filter(_v, rawExpr=u'${instance.upper()}')) # from line 1088, col 58.
                write(u'''_OUTPUT_PORTS];

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_typed_input_ports",True): # generated from line 1092, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Calls for messages received on typed input ports
    // ----------------------------------------------------------------------

''')
            for instance, type, sync, priority, full, role, max_num in VFSL([locals()]+SL+[globals(), builtin],"typed_input_ports",True): # generated from line 1099, col 3
                params = VFSL([locals()]+SL+[globals(), builtin],"port_params",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                return_type = VFSL([locals()]+SL+[globals(), builtin],"port_return_type_strs",True)[VFSL([locals()]+SL+[globals(), builtin],"instance",True)]
                write(u'''    //! Callback for port ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'$instance' on line 1102, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'$instance')) # from line 1102, col 27.
                write(u'''
    //!
    static ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"return_type",True) # u'${return_type}' on line 1104, col 12
                if _v is not None: write(_filter(_v, rawExpr=u'${return_type}')) # from line 1104, col 12.
                write(u'''m_p_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1104, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1104, col 30.
                write(u'''_in(
        Fw::PassiveComponentBase* callComp, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The component instance") # u'$doxygen_post_comment("The component instance")' on line 1105, col 45
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The component instance")')) # from line 1105, col 45.
                write(u'''
''')
                if len(VFSL([locals()]+SL+[globals(), builtin],"params",True)) == 0: # generated from line 1106, col 5
                    write(u'''        NATIVE_INT_TYPE portNum ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 1107, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 1107, col 33.
                    write(u'''
''')
                else: # generated from line 1108, col 5
                    write(u'''        NATIVE_INT_TYPE portNum, ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 1109, col 34
                    if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 1109, col 34.
                    write(u'''
''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"emit_port_params",False)(8, VFSL([locals()]+SL+[globals(), builtin],"params",True)) # u'$emit_port_params(8, $params)' on line 1110, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$emit_port_params(8, $params)')) # from line 1110, col 1.
                    write(u'''
''')
                write(u'''    );

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_serializable_ports",True): # generated from line 1116, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Call for messages received on serial input ports
    // ----------------------------------------------------------------------

#if FW_PORT_SERIALIZATION

''')
            for instance, sync, priority, full, max_num in VFSL([locals()]+SL+[globals(), builtin],"serial_input_ports",True): # generated from line 1125, col 3
                write(u'''  
    //! Serial port callback
    //!
    static void m_p_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"instance",True) # u'${instance}' on line 1129, col 21
                if _v is not None: write(_filter(_v, rawExpr=u'${instance}')) # from line 1129, col 21.
                write(u'''_in(
        Fw::PassiveComponentBase* callComp, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The component instance") # u'$doxygen_post_comment("The component instance")' on line 1130, col 45
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The component instance")')) # from line 1130, col 45.
                write(u'''
        NATIVE_INT_TYPE portNum, ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The port number") # u'$doxygen_post_comment("The port number")' on line 1131, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The port number")')) # from line 1131, col 34.
                write(u'''
        Fw::SerializeBufferBase &Buffer ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 1132, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 1132, col 41.
                write(u'''
    );
''')
            write(u'''
#endif

''')
        if VFSL([locals()]+SL+[globals(), builtin],"kind",True) == "active": # generated from line 1139, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Message dispatch functions
    // ----------------------------------------------------------------------

    //! Called in the message loop to dispatch a message from the queue
    //!
    virtual MsgDispatchStatus doDispatch(void);

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_guarded_ports",True) or VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 1151, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Mutexes
    // ----------------------------------------------------------------------

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_guarded_ports",True): # generated from line 1159, col 1
            write(u'''    //! Mutex for guarded ports
    //!
    Os::Mutex m_guardedPortMutex;

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 1165, col 1
            write(u'''    //! Mutex for locking parameters during sets and saves
    //!
    Os::Mutex m_paramLock;

''')
        if VFSL([locals()]+SL+[globals(), builtin],"has_parameters",True): # generated from line 1171, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Parameter validity flags
    // ----------------------------------------------------------------------

''')
            for ids, name, type, osets, osavs, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 1178, col 3
                write(u'''    //! True if parameter ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 1179, col 27
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 1179, col 27.
                write(u''' was successfully received
    //!
    Fw::ParamValid m_param_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1181, col 28
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1181, col 28.
                write(u'''_valid;

''')
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Parameter variables
    // ----------------------------------------------------------------------

''')
            for ids, name, type, osets, osavs, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 1190, col 3
                write(u'''    //! Parameter ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 1191, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 1191, col 19.
                write(u'''
    //!
    ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_pre_comment",False)(VFSL([locals()]+SL+[globals(), builtin],"comment",True)) # u'$doxygen_pre_comment($comment)' on line 1193, col 5
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_pre_comment($comment)')) # from line 1193, col 5.
                write(u'''
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 1194, col 5
                    write(u'''    Fw::ParamString m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1195, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1195, col 23.
                    write(u''';
''')
                else: # generated from line 1196, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'${type}' on line 1197, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'${type}')) # from line 1197, col 5.
                    write(u''' m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1197, col 15
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1197, col 15.
                    write(u''';
''')
                write(u'''
''')
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Private parameter get function
    // ----------------------------------------------------------------------

    //! Get a parameter by ID
    //!
    //! \\return Whether the parameter is valid
    //!
    Fw::ParamValid getParam(
        FwPrmIdType id, ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The ID") # u'$doxygen_post_comment("The ID")' on line 1212, col 25
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The ID")')) # from line 1212, col 25.
            write(u'''
        Fw::ParamBuffer& buff ''')
            _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The paramter value") # u'$doxygen_post_comment("The paramter value")' on line 1213, col 31
            if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The paramter value")')) # from line 1213, col 31.
            write(u'''
    );

  PRIVATE:

    // ----------------------------------------------------------------------
    // Parameter set functions
    // ----------------------------------------------------------------------

''')
            for ids, name, type, osets, osavs, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 1222, col 3
                write(u'''    //! Set parameter ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 1223, col 23
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 1223, col 23.
                write(u'''
    //!
    //! \\return The command response
    //!
    Fw::CommandResponse paramSet_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1227, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1227, col 34.
                write(u'''(
        Fw::SerializeBufferBase &val ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"doxygen_post_comment",False)("The serialization buffer") # u'$doxygen_post_comment("The serialization buffer")' on line 1228, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$doxygen_post_comment("The serialization buffer")')) # from line 1228, col 38.
                write(u'''
    );

''')
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Parameter save functions
    // ----------------------------------------------------------------------

''')
            for ids, name, type, osets, osavs, size, default, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"parameters",True): # generated from line 1238, col 3
                write(u'''    //! Save parameter ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 1239, col 24
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 1239, col 24.
                write(u'''
    //!
    //! \\return The command response
    //!
    Fw::CommandResponse paramSave_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1243, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1243, col 35.
                write(u'''(void);

''')
        update_channels = [   (VFSL([locals()]+SL+[globals(), builtin],"name",True), VFSL([locals()]+SL+[globals(), builtin],"type",True))  for ids, name, type, size, update, comment, typeinfo in VFSL([locals()]+SL+[globals(), builtin],"channels",True)   if VFSL([locals()]+SL+[globals(), builtin],"update",True) != None and VFSL([locals()]+SL+[globals(), builtin],"update",True) != "always" ]
        if len(VFSL([locals()]+SL+[globals(), builtin],"update_channels",True)) > 0: # generated from line 1252, col 1
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // First update flags for telemetry channels
    // ----------------------------------------------------------------------

''')
            for name, type in VFSL([locals()]+SL+[globals(), builtin],"update_channels",True): # generated from line 1259, col 3
                write(u'''    //! Initialized to true; cleared when channel ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 1260, col 51
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 1260, col 51.
                write(u''' is first updated
    //!
    bool m_first_update_''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1262, col 25
                if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1262, col 25.
                write(u''';

''')
            write(u'''  PRIVATE:

    // ----------------------------------------------------------------------
    // Last value storage for telemetry channels
    // ----------------------------------------------------------------------

''')
            for name, type in VFSL([locals()]+SL+[globals(), builtin],"update_channels",True): # generated from line 1271, col 3
                write(u'''    //! Records the last emitted value for channel ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'$name' on line 1272, col 52
                if _v is not None: write(_filter(_v, rawExpr=u'$name')) # from line 1272, col 52.
                write(u'''
    //!
''')
                if VFSL([locals()]+SL+[globals(), builtin],"type",True) == "string": # generated from line 1274, col 5
                    write(u'''    Fw::TlmString m_last_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1275, col 26
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1275, col 26.
                    write(u''';
''')
                else: # generated from line 1276, col 5
                    write(u'''    ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"type",True) # u'$type' on line 1277, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$type')) # from line 1277, col 5.
                    write(u''' m_last_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1277, col 18
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1277, col 18.
                    write(u''';
''')
                write(u'''
''')
        write(u'''
''')
        if len(VFSL([locals()]+SL+[globals(), builtin],"events",True)) > 0: # generated from line 1283, col 1
            write(u'''  PRIVATE:
    // ----------------------------------------------------------------------
    // Counter values for event throttling
    // ----------------------------------------------------------------------
''')
            for ids, name, severity, format_string, throttle, comment in VFSL([locals()]+SL+[globals(), builtin],"events",True): # generated from line 1288, col 1
                if VFSL([locals()]+SL+[globals(), builtin],"throttle",True) != None: # generated from line 1289, col 3
                    write(u'''    NATIVE_UINT_TYPE m_''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1290, col 24
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1290, col 24.
                    write(u'''Throttle; //!< throttle for ''')
                    _v = VFSL([locals()]+SL+[globals(), builtin],"name",True) # u'${name}' on line 1290, col 59
                    if _v is not None: write(_filter(_v, rawExpr=u'${name}')) # from line 1290, col 59.
                    write(u'''
''')
        write(u'''
  };  

''')
        if VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True) != None: # generated from line 1297, col 1
            for namespace in VFSL([locals()]+SL+[globals(), builtin],"namespace_list",True): # generated from line 1298, col 2
                write(u'''} // end namespace ''')
                _v = VFSL([locals()]+SL+[globals(), builtin],"namespace",True) # u'$namespace' on line 1299, col 20
                if _v is not None: write(_filter(_v, rawExpr=u'$namespace')) # from line 1299, col 20.
                write(u'''
''')
        write(u'''#endif
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_hpp= 'respond'

## END CLASS DEFINITION

if not hasattr(hpp, '_initCheetahAttributes'):
    templateAPIClass = getattr(hpp, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(hpp)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=hpp()).run()


